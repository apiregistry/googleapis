#%RAML 1.0
title: Cloud Tool Results API
version: v1beta3
baseUri: https://www.googleapis.com/toolresults/v1beta3/projects/
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
(commons.Links):
- title: Developer Documentation
  url: https://developers.google.com/cloud-test-lab/
  role: documentation
(commons.Icons):
- url: http://www.google.com/images/icons/product/search-32.gif
  name: x32
- url: http://www.google.com/images/icons/product/search-16.gif
  name: x16
(commons.Id): toolresults:v1beta3
securitySchemes:
  oath2:
    type: OAuth 2.0
    description: Google Oath2.0 authorization. Detailed documentation can be found at https://developers.google.com/identity/protocols/OAuth2
    settings:
      authorizationGrants:
      - authorization_code
      - implicit
      authorizationUri: https://accounts.google.com/o/oauth2/v2/auth
      accessTokenUri: https://accounts.google.com/o/oauth2/v2/auth
      scopes:
      - https://www.googleapis.com/auth/cloud-platform
traits:
  hasParameters:
    queryParameters:
      quotaUser?:
        type: string
        description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
      prettyPrint?:
        type: boolean
        default: true
        description: Returns response with indentations and line breaks.
      userIp?:
        type: string
        description: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
      fields?:
        type: string
        description: Selector specifying which fields to include in a partial response.
securedBy:
  oath2: 
types:
  Any:
    type: object
    properties:
      typeUrl?:
        type: string
        description: |-
          A URL/resource name whose content describes the type of the serialized protocol buffer message.

          For URLs which use the scheme `http`, `https`, or no scheme, the following restrictions and interpretations apply:

          * If no scheme is provided, `https` is assumed. * The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading "." is not accepted). * An HTTP GET on the URL must yield a [google.protobuf.Type][] value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.)

          Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
      value?:
        type: string
        description: Must be a valid serialized protocol buffer of the above specified type.
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

      Foo foo = ...; Any any; any.PackFrom(foo); ... if (any.UnpackTo(&foo)) { ... }

      Example 2: Pack and unpack a message in Java.

      Foo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) { foo = any.unpack(Foo.class); }

      Example 3: Pack and unpack a message in Python.

      foo = Foo(...) any = Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR): any.Unpack(foo) ...

      The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example "foo.bar.com/x/y.z" will yield type name "y.z".



      JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:

      package google.profile; message Person { string first_name = 1; string last_name = 2; }

      { "@type": "type.googleapis.com/google.profile.Person", "firstName": , "lastName":  }

      If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):

      { "@type": "type.googleapis.com/google.protobuf.Duration", "value": "1.212s" }
  Duration:
    type: object
    properties:
      seconds?:
        type: integer
        format: int64
        description: Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive.
      nanos?:
        type: integer
        format: int32
        description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
    description: |-
      A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.

      Example 1: Compute Duration from two Timestamps in pseudo code.

      Timestamp start = ...; Timestamp end = ...; Duration duration = ...;

      duration.seconds = end.seconds - start.seconds; duration.nanos = end.nanos - start.nanos;

      if (duration.seconds  0) { duration.seconds += 1; duration.nanos -= 1000000000; } else if (durations.seconds > 0 && duration.nanos < 0) { duration.seconds -= 1; duration.nanos += 1000000000; }

      Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.

      Timestamp start = ...; Duration duration = ...; Timestamp end = ...;

      end.seconds = start.seconds + duration.seconds; end.nanos = start.nanos + duration.nanos;

      if (end.nanos = 1000000000) { end.seconds += 1; end.nanos -= 1000000000; }

      Example 3: Compute Duration from datetime.timedelta in Python.

      td = datetime.timedelta(days=3, minutes=10) duration = Duration() duration.FromTimedelta(td)
  Execution:
    type: object
    properties:
      completionTime?: Timestamp
      executionId?:
        type: string
        description: |-
          A unique identifier within a History for this Execution.

          Returns INVALID_ARGUMENT if this field is set or overwritten by the caller.

          - In response always set - In create/update request: never set
      creationTime?: Timestamp
      testExecutionMatrixId?:
        type: string
        description: |-
          TestExecution Matrix ID that the Test Service uses.

          - In response: present if set by create - In create: optional - In update: never set
      state?:
        type: string
        description: |-
          The initial state is IN_PROGRESS.

          The only legal state transitions is from IN_PROGRESS to COMPLETE.

          A PRECONDITION_FAILED will be returned if an invalid transition is requested.

          The state can only be set to COMPLETE once. A FAILED_PRECONDITION will be returned if the state is set to COMPLETE multiple times.

          If the state is set to COMPLETE, all the in-progress steps within the execution will be set as COMPLETE. If the outcome of the step is not set, the outcome will be set to INCONCLUSIVE.

          - In response always set - In create/update request: optional
        enum:
        - complete
        - inProgress
        - pending
        - unknownState
      outcome?: Outcome
    description: |-
      An Execution represents a collection of Steps. For instance, it could represent: - a mobile test executed across a range of device configurations - a jenkins job with a build step followed by a test step

      The maximum size of an execution message is 1 MiB.

      An Execution can be updated until its state is set to COMPLETE at which point it becomes immutable.
  FailureDetail:
    type: object
    properties:
      otherNativeCrash?:
        type: boolean
        description: If a native process other than the app crashed.
      timedOut?:
        type: boolean
        description: If the test overran some time limit, and that is why it failed.
      notInstalled?:
        type: boolean
        description: If an app is not installed and thus no test can be run with the app. This might be caused by trying to run a test on an unsupported platform.
      unableToCrawl?:
        type: boolean
        description: If the robo was unable to crawl the app; perhaps because the app did not start.
      crashed?:
        type: boolean
        description: If the failure was severe because the system under test crashed.
  FileReference:
    type: object
    properties:
      fileUri?:
        type: string
        description: |-
          The URI of a file stored in Google Cloud Storage.

          For example: http://storage.googleapis.com/mybucket/path/to/test.xml or in gsutil format: gs://mybucket/path/to/test.xml with version-specific info, gs://mybucket/path/to/test.xml#1360383693690000

          An INVALID_ARGUMENT error will be returned if the URI format is not supported.

          - In response: always set - In create/update request: always set
    description: A reference to a file.
  History:
    type: object
    properties:
      displayName?:
        type: string
        description: |-
          A short human-readable (plain text) name to display in the UI. Maximum of 100 characters.

          - In response: present if set during create. - In create request: optional
      historyId?:
        type: string
        description: |-
          A unique identifier within a project for this History.

          Returns INVALID_ARGUMENT if this field is set or overwritten by the caller.

          - In response always set - In create request: never set
      name?:
        type: string
        description: |-
          A name to uniquely identify a history within a project. Maximum of 100 characters.

          - In response always set - In create request: always set
    description: |-
      A History represents a sorted list of Executions ordered by the start_timestamp_millis field (descending). It can be used to group all the Executions of a continuous build.

      Note that the ordering only operates on one-dimension. If a repository has multiple branches, it means that multiple histories will need to be used in order to order Executions per branch.
  Image:
    type: object
    properties:
      thumbnail?: Thumbnail
      stepId?:
        type: string
        description: |-
          The step to which the image is attached.

          Always set.
      sourceImage?: ToolOutputReference
      error?: Status
    description: An image, with a link to the main image and a thumbnail.
  InconclusiveDetail:
    type: object
    properties:
      infrastructureFailure?:
        type: boolean
        description: |-
          If the test runner could not determine success or failure because the test depends on a component other than the system under test which failed.

          For example, a mobile test requires provisioning a device where the test executes, and that provisioning can fail.
      abortedByUser?:
        type: boolean
        description: If the end user aborted the test execution before a pass or fail could be determined. For example, the user pressed ctrl-c which sent a kill signal to the test runner while the test was running.
  ListExecutionsResponse:
    type: object
    properties:
      executions?:
        type: array
        description: |-
          Executions.

          Always set.
        items: Execution
      nextPageToken?:
        type: string
        description: |-
          A continuation token to resume the query at the next item.

          Will only be set if there are more Executions to fetch.
  ListHistoriesResponse:
    type: object
    properties:
      nextPageToken?:
        type: string
        description: |-
          A continuation token to resume the query at the next item.

          Will only be set if there are more histories to fetch.

          Tokens are valid for up to one hour from the time of the first list request. For instance, if you make a list request at 1PM and use the token from this first request 10 minutes later, the token from this second response will only be valid for 50 minutes.
      histories?:
        type: array
        description: Histories.
        items: History
    description: Response message for HistoryService.List
  ListStepThumbnailsResponse:
    type: object
    properties:
      nextPageToken?:
        type: string
        description: |-
          A continuation token to resume the query at the next item.

          If set, indicates that there are more thumbnails to read, by calling list again with this value in the page_token field.
      thumbnails?:
        type: array
        description: |-
          A list of image data.

          Images are returned in a deterministic order; they are ordered by these factors, in order of importance: * First, by their associated test case. Images without a test case are considered greater than images with one. * Second, by their creation time. Images without a creation time are greater than images with one. * Third, by the order in which they were added to the step (by calls to CreateStep or UpdateStep).
        items: Image
    description: A response containing the thumbnails in a step.
  ListStepsResponse:
    type: object
    properties:
      nextPageToken?:
        type: string
        description: |-
          A continuation token to resume the query at the next item.

          If set, indicates that there are more steps to read, by calling list again with this value in the page_token field.
      steps?:
        type: array
        description: Steps.
        items: Step
    description: Response message for StepService.List.
  Outcome:
    type: object
    properties:
      summary?:
        type: string
        description: |-
          The simplest way to interpret a result.

          Required
        enum:
        - failure
        - inconclusive
        - skipped
        - success
        - unset
      skippedDetail?: SkippedDetail
      successDetail?: SuccessDetail
      failureDetail?: FailureDetail
      inconclusiveDetail?: InconclusiveDetail
    description: Interprets a result so that humans and machines can act on it.
  ProjectSettings:
    type: object
    properties:
      defaultBucket?:
        type: string
        description: |-
          The name of the Google Cloud Storage bucket to which results are written.

          By default, this is unset.

          In update request: optional In response: optional
      name?:
        type: string
        description: |-
          The name of the project's settings.

          Always of the form: projects/{project-id}/settings

          In update request: never set In response: always set
    description: Per-project settings for the Tool Results service.
  PublishXunitXmlFilesRequest:
    type: object
    properties:
      xunitXmlFiles?:
        type: array
        description: |-
          URI of the Xunit XML files to publish.

          The maximum size of the file this reference is pointing to is 50MB.

          Required.
        items: FileReference
    description: Request message for StepService.PublishXunitXmlFiles.
  SkippedDetail:
    type: object
    properties:
      incompatibleArchitecture?:
        type: boolean
        description: If the App doesn't run on the specific architecture, for example, x86.
      incompatibleDevice?:
        type: boolean
        description: If the requested OS version doesn't run on the specific device model.
      incompatibleAppVersion?:
        type: boolean
        description: If the App doesn't support the specific API level.
  StackTrace:
    type: object
    properties:
      exception?:
        type: string
        description: |-
          The stack trace message.

          Required
    description: A stacktrace.
  Status:
    type: object
    properties:
      code?:
        type: integer
        format: int32
        description: The status code, which should be an enum value of [google.rpc.Code][].
      details?:
        type: array
        description: A list of messages that carry the error details. There will be a common set of message types for APIs to use.
        items: Any
      message?:
        type: string
        description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][] field, or localized by the client.
    description: |-
      The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). The error model is designed to be:

      - Simple to use and understand for most users - Flexible enough to meet unexpected needs

      # Overview

      The `Status` message contains three pieces of data: error code, error message, and error details. The error code should be an enum value of [google.rpc.Code][], but it may accept additional error codes if needed. The error message should be a developer-facing English message that helps developers *understand* and *resolve* the error. If a localized user-facing error message is needed, put the localized message in the error details or localize it in the client. The optional error details may contain arbitrary information about the error. There is a predefined set of error detail types in the package `google.rpc` which can be used for common error conditions.

      # Language mapping

      The `Status` message is the logical representation of the error model, but it is not necessarily the actual wire format. When the `Status` message is exposed in different client libraries and different wire protocols, it can be mapped differently. For example, it will likely be mapped to some exceptions in Java, but more likely mapped to some error codes in C.

      # Other uses

      The error model and the `Status` message can be used in a variety of environments, either with or without APIs, to provide a consistent developer experience across different environments.

      Example uses of this error model include:

      - Partial errors. If a service needs to return partial errors to the client, it may embed the `Status` in the normal response to indicate the partial errors.

      - Workflow errors. A typical workflow has multiple steps. Each step may have a `Status` message for error reporting purpose.

      - Batch operations. If a client uses batch request and batch response, the `Status` message should be used directly inside batch response, one for each error sub-response.

      - Asynchronous operations. If an API call embeds asynchronous operation results in its response, the status of those operations should be represented directly using the `Status` message.

      - Logging. If some API errors are stored in logs, the message `Status` could be used directly after any stripping needed for security/privacy reasons.
  Step:
    type: object
    properties:
      creationTime?: Timestamp
      deviceUsageDuration?: Duration
      stepId?:
        type: string
        description: |-
          A unique identifier within a Execution for this Step.

          Returns INVALID_ARGUMENT if this field is set or overwritten by the caller.

          - In response: always set - In create/update request: never set
      description?:
        type: string
        description: |-
          A description of this tool For example: mvn clean package -D skipTests=true

          - In response: present if set by create/update request - In create/update request: optional
      toolExecutionStep?: ToolExecutionStep
      labels?:
        type: array
        description: |-
          Arbitrary user-supplied key/value pairs that are associated with the step.

          Users are responsible for managing the key namespace such that keys don't accidentally collide.

          An INVALID_ARGUMENT will be returned if the number of labels exceeds 100 or if the length of any of the keys or values exceeds 100 characters.

          - In response: always set - In create request: optional - In update request: optional; any new key/value pair will be added to the map, and any new value for an existing key will update that key's value
        items: StepLabelsEntry
      completionTime?: Timestamp
      runDuration?: Duration
      dimensionValue?:
        type: array
        description: |-
          If the execution containing this step has any dimension_definition set, then this field allows the child to specify the values of the dimensions.

          The keys must exactly match the dimension_definition of the execution.

          For example, if the execution has `dimension_definition = ['attempt', 'device']` then a step must define values for those dimensions, eg. `dimension_value = ['attempt': '1', 'device': 'Nexus 6']`

          If a step does not participate in one dimension of the matrix, the value for that dimension should be empty string. For example, if one of the tests is executed by a runner which does not support retries, the step could have `dimension_value = ['attempt': '', 'device': 'Nexus 6']`

          If the step does not participate in any dimensions of the matrix, it may leave dimension_value unset.

          A PRECONDITION_FAILED will be returned if any of the keys do not exist in the dimension_definition of the execution.

          A PRECONDITION_FAILED will be returned if another step in this execution already has the same name and dimension_value, but differs on other data fields, for example, step field is different.

          A PRECONDITION_FAILED will be returned if dimension_value is set, and there is a dimension_definition in the execution which is not specified as one of the keys.

          - In response: present if set by create - In create request: optional - In update request: never set
        items: StepDimensionValueEntry
      name?:
        type: string
        description: |-
          A short human-readable name to display in the UI. Maximum of 100 characters. For example: Clean build

          A PRECONDITION_FAILED will be returned upon creating a new step if it shares its name and dimension_value with an existing step. If two steps represent a similar action, but have different dimension values, they should share the same name. For instance, if the same set of tests is run on two different platforms, the two steps should have the same name.

          - In response: always set - In create request: always set - In update request: never set
      hasImages?:
        type: boolean
        description: |-
          Whether any of the outputs of this step are images whose thumbnails can be fetched with ListThumbnails.

          - In response: always set - In create/update request: never set
      state?:
        type: string
        description: |-
          The initial state is IN_PROGRESS. The only legal state transitions are * IN_PROGRESS -> COMPLETE

          A PRECONDITION_FAILED will be returned if an invalid transition is requested.

          It is valid to create Step with a state set to COMPLETE. The state can only be set to COMPLETE once. A PRECONDITION_FAILED will be returned if the state is set to COMPLETE multiple times.

          - In response: always set - In create/update request: optional
        enum:
        - complete
        - inProgress
        - pending
        - unknownState
      testExecutionStep?: TestExecutionStep
      outcome?: Outcome
    description: |-
      A Step represents a single operation performed as part of Execution. A step can be used to represent the execution of a tool ( for example a test runner execution or an execution of a compiler).

      Steps can overlap (for instance two steps might have the same start time if some operations are done in parallel).

      Here is an example, let's consider that we have a continuous build is executing a test runner for each iteration. The workflow would look like: - user creates a Execution with id 1 - user creates an TestExecutionStep with id 100 for Execution 1 - user update TestExecutionStep with id 100 to add a raw xml log + the service parses the xml logs and returns a TestExecutionStep with updated TestResult(s). - user update the status of TestExecutionStep with id 100 to COMPLETE

      A Step can be updated until its state is set to COMPLETE at which points it becomes immutable.
  StepDimensionValueEntry:
    type: object
    properties:
      value?:
        type: string
      key?:
        type: string
  StepLabelsEntry:
    type: object
    properties:
      value?:
        type: string
      key?:
        type: string
  SuccessDetail:
    type: object
    properties:
      otherNativeCrash?:
        type: boolean
        description: If a native process other than the app crashed.
  TestCaseReference:
    type: object
    properties:
      testSuiteName?:
        type: string
        description: The name of the test suite to which this test case belongs.
      name?:
        type: string
        description: |-
          The name of the test case.

          Required.
      className?:
        type: string
        description: The name of the class.
    description: |-
      A reference to a test case.

      Test case references are canonically ordered lexicographically by these three factors: * First, by test_suite_name. * Second, by class_name. * Third, by name.
  TestExecutionStep:
    type: object
    properties:
      testIssues?:
        type: array
        description: |-
          Issues observed during the test execution.

          For example, if the mobile app under test crashed during the test, the error message and the stack trace content can be recorded here to assist debugging.

          - In response: present if set by create or update - In create/update request: optional
        items: TestIssue
      toolExecution?: ToolExecution
      testSuiteOverviews?:
        type: array
        description: |-
          List of test suite overview contents. This could be parsed from xUnit XML log by server, or uploaded directly by user. This references should only be called when test suites are fully parsed or uploaded.

          The maximum allowed number of test suite overviews per step is 1000.

          - In response: always set - In create request: optional - In update request: never (use publishXunitXmlFiles custom method instead)
        items: TestSuiteOverview
      testTiming?: TestTiming
    description: |-
      A step that represents running tests.

      It accepts ant-junit xml files which will be parsed into structured test results by the service. Xml file paths are updated in order to append more files, however they can't be deleted.

      Users can also add test results manually by using the test_result field.
  TestIssue:
    type: object
    properties:
      errorMessage?:
        type: string
        description: |-
          A brief human-readable message describing the abnormal event.

          Required.
      stackTrace?: StackTrace
    description: An abnormal event observed during the test execution.
  TestSuiteOverview:
    type: object
    properties:
      name?:
        type: string
        description: |-
          The name of the test suite.

          - In create/response: always set - In update request: never
      xmlSource?: FileReference
      skippedCount?:
        type: integer
        format: int32
        description: |-
          Number of test cases not run, typically set by the service by parsing the xml_source.

          - In create/response: always set - In update request: never
      totalCount?:
        type: integer
        format: int32
        description: |-
          Number of test cases, typically set by the service by parsing the xml_source.

          - In create/response: always set - In update request: never
      errorCount?:
        type: integer
        format: int32
        description: |-
          Number of test cases in error, typically set by the service by parsing the xml_source.

          - In create/response: always set - In update request: never
      failureCount?:
        type: integer
        format: int32
        description: |-
          Number of failed test cases, typically set by the service by parsing the xml_source. May also be set by the user.

          - In create/response: always set - In update request: never
    description: |-
      A summary of a test suite result either parsed from XML or uploaded directly by a user.

      Note: the API related comments are for StepService only. This message is also being used in ExecutionService in a read only mode for the corresponding step.
  TestTiming:
    type: object
    properties:
      testProcessDuration?: Duration
    description: Testing timing break down to know phases.
  Thumbnail:
    type: object
    properties:
      data?:
        type: string
        description: |-
          The thumbnail file itself.

          That is, the bytes here are precisely the bytes that make up the thumbnail file; they can be served as an image as-is (with the appropriate content type.)

          Always set.
      heightPx?:
        type: integer
        format: int32
        description: |-
          The height of the thumbnail, in pixels.

          Always set.
      widthPx?:
        type: integer
        format: int32
        description: |-
          The width of the thumbnail, in pixels.

          Always set.
      contentType?:
        type: string
        description: |-
          The thumbnail's content type, i.e. "image/png".

          Always set.
    description: A single thumbnail, with its size and format.
  Timestamp:
    type: object
    properties:
      seconds?:
        type: integer
        format: int64
        description: Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
      nanos?:
        type: integer
        format: int32
        description: Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.
    description: |-
      A Timestamp represents a point in time independent of any time zone or calendar, represented as seconds and fractions of seconds at nanosecond resolution in UTC Epoch time. It is encoded using the Proleptic Gregorian Calendar which extends the Gregorian calendar backwards to year one. It is encoded assuming all minutes are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from RFC 3339 date strings. See [https://www.ietf.org/rfc/rfc3339.txt](https://www.ietf.org/rfc/rfc3339.txt).

      Example 1: Compute Timestamp from POSIX `time()`.

      Timestamp timestamp; timestamp.set_seconds(time(NULL)); timestamp.set_nanos(0);

      Example 2: Compute Timestamp from POSIX `gettimeofday()`.

      struct timeval tv; gettimeofday(&tv, NULL);

      Timestamp timestamp; timestamp.set_seconds(tv.tv_sec); timestamp.set_nanos(tv.tv_usec * 1000);

      Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.

      FILETIME ft; GetSystemTimeAsFileTime(&ft); UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;

      // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z. Timestamp timestamp; timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL)); timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));

      Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.

      long millis = System.currentTimeMillis();

      Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000) .setNanos((int) ((millis % 1000) * 1000000)).build();



      Example 5: Compute Timestamp from current time in Python.

      timestamp = Timestamp() timestamp.GetCurrentTime()
  ToolExecution:
    type: object
    properties:
      commandLineArguments?:
        type: array
        description: |-
          The full tokenized command line including the program name (equivalent to argv in a C program).

          - In response: present if set by create request - In create request: optional - In update request: never set
        items:
          type: string
      toolOutputs?:
        type: array
        description: |-
          References to opaque files of any format output by the tool execution.

          The maximum allowed number of tool outputs per step is 1000.

          - In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list
        items: ToolOutputReference
      exitCode?: ToolExitCode
      toolLogs?:
        type: array
        description: |-
          References to any plain text logs output the tool execution.

          This field can be set before the tool has exited in order to be able to have access to a live view of the logs while the tool is running.

          The maximum allowed number of tool logs per step is 1000.

          - In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list
        items: FileReference
    description: An execution of an arbitrary tool. It could be a test runner or a tool copying artifacts or deploying code.
  ToolExecutionStep:
    type: object
    properties:
      toolExecution?: ToolExecution
    description: 'Generic tool step to be used for binaries we do not explicitly support.
      For example: running cp to copy artifacts from one location to another.'
  ToolExitCode:
    type: object
    properties:
      number?:
        type: integer
        format: int32
        description: |-
          Tool execution exit code. A value of 0 means that the execution was successful.

          - In response: always set - In create/update request: always set
    description: Exit code from a tool execution.
  ToolOutputReference:
    type: object
    properties:
      output?: FileReference
      creationTime?: Timestamp
      testCase?: TestCaseReference
    description: A reference to a ToolExecution output file.
/{projectId}:
  uriParameters:
    projectId:
      type: string
      description: |-
        A Project id.

        Required.
  /settings:
    get:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/cloud-platform
      description: |-
        Gets the Tool Results settings for a project.

        May return any of the following canonical error codes:

        - PERMISSION_DENIED - if the user is not authorized to read from project
      is:
      - hasParameters
      responses:
        200:
          body:
            application/json: ProjectSettings
/{projectId}:initializeSettings:
  uriParameters:
    projectId:
      type: string
      description: |-
        A Project id.

        Required.
  post:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/cloud-platform
    description: |-
      Creates resources for settings which have not yet been set.

      Currently, this creates a single resource: a Google Cloud Storage bucket, to be used as the default bucket for this project. The bucket is created in the name of the user calling. Except in rare cases, calling this method in parallel from multiple clients will only create a single bucket. In order to avoid unnecessary storage charges, the bucket is configured to automatically delete objects older than 90 days.

      The bucket is created with the project-private ACL: All project team members are given permissions to the bucket and objects created within it according to their roles. Project owners have owners rights, and so on. The default ACL on objects created in the bucket is project-private as well. See Google Cloud Storage documentation for more details.

      If there is already a default bucket set and the project can access the bucket, this call does nothing. However, if the project doesn't have the permission to access the bucket or the bucket is deteleted, a new bucket will be created.

      May return any canonical error codes, including the following:

      - PERMISSION_DENIED - if the user is not authorized to write to project - Any error code raised by Google Cloud Storage
    is:
    - hasParameters
    responses:
      200:
        body:
          application/json: ProjectSettings
