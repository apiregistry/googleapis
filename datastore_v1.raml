#%RAML 1.0
title: Google Cloud Datastore API
version: v1
baseUri: https://datastore.googleapis.com/
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
(commons.Links):
- title: Developer Documentation
  url: https://cloud.google.com/datastore/
  role: documentation
(commons.Icons):
- url: http://www.google.com/images/icons/product/search-32.gif
  name: x32
- url: http://www.google.com/images/icons/product/search-16.gif
  name: x16
(commons.Id): datastore:v1
securitySchemes:
  oath2:
    type: OAuth 2.0
    description: Google Oath2.0 authorization. Detailed documentation can be found at https://developers.google.com/identity/protocols/OAuth2
    settings:
      authorizationGrants:
      - authorization_code
      - implicit
      authorizationUri: https://accounts.google.com/o/oauth2/v2/auth
      accessTokenUri: https://accounts.google.com/o/oauth2/v2/auth
      scopes:
      - https://www.googleapis.com/auth/cloud-platform
      - https://www.googleapis.com/auth/datastore
traits:
  hasParameters:
    queryParameters:
      quotaUser?:
        type: string
        description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      pp?:
        type: boolean
        default: true
        description: Pretty-print response.
      prettyPrint?:
        type: boolean
        default: true
        description: Returns response with indentations and line breaks.
      $.xgafv?:
        type: string
        description: V1 error format.
        enum:
        - '1'
        - '2'
      upload_protocol?:
        type: string
        description: Upload protocol for media (e.g. "raw", "multipart").
      uploadType?:
        type: string
        description: Legacy upload protocol for media (e.g. "media", "multipart").
      callback?:
        type: string
        description: JSONP
      fields?:
        type: string
        description: Selector specifying which fields to include in a partial response.
securedBy:
  oath2: 
types:
  AllocateIdsRequest:
    type: object
    properties:
      keys?:
        type: array
        description: |-
          A list of keys with incomplete key paths for which to allocate IDs.
          No key may be reserved/read-only.
        items: Key
    description: The request for Datastore.AllocateIds.
  AllocateIdsResponse:
    type: object
    properties:
      keys?:
        type: array
        description: |-
          The keys specified in the request (in the same order), each with
          its key path completed with a newly allocated ID.
        items: Key
    description: The response for Datastore.AllocateIds.
  ArrayValue:
    type: object
    properties:
      values?:
        type: array
        description: |-
          Values in the array.
          The order of this array may not be preserved if it contains a mix of
          indexed and unindexed values.
        items: Value
    description: An array value.
  BeginTransactionRequest:
    type: object
    description: The request for Datastore.BeginTransaction.
  BeginTransactionResponse:
    type: object
    properties:
      transaction?:
        type: string
        description: The transaction identifier (always present).
    description: The response for Datastore.BeginTransaction.
  CommitRequest:
    type: object
    properties:
      mode?:
        type: string
        description: The type of commit to perform. Defaults to `TRANSACTIONAL`.
        enum:
        - MODE_UNSPECIFIED
        - TRANSACTIONAL
        - NON_TRANSACTIONAL
      mutations?:
        type: array
        description: |-
          The mutations to perform.

          When mode is `TRANSACTIONAL`, mutations affecting a single entity are
          applied in order. The following sequences of mutations affecting a single
          entity are not permitted in a single `Commit` request:

          - `insert` followed by `insert`
          - `update` followed by `insert`
          - `upsert` followed by `insert`
          - `delete` followed by `update`

          When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single
          entity.
        items: Mutation
      transaction?:
        type: string
        description: |-
          The identifier of the transaction associated with the commit. A
          transaction identifier is returned by a call to
          Datastore.BeginTransaction.
    description: The request for Datastore.Commit.
  CommitResponse:
    type: object
    properties:
      mutationResults?:
        type: array
        description: |-
          The result of performing the mutations.
          The i-th mutation result corresponds to the i-th mutation in the request.
        items: MutationResult
      indexUpdates?:
        type: integer
        format: int32
        description: |-
          The number of index entries updated during the commit, or zero if none were
          updated.
    description: The response for Datastore.Commit.
  CompositeFilter:
    type: object
    properties:
      op?:
        type: string
        description: The operator for combining multiple filters.
        enum:
        - OPERATOR_UNSPECIFIED
        - AND
      filters?:
        type: array
        description: |-
          The list of filters to combine.
          Must contain at least one filter.
        items: Filter
    description: A filter that merges multiple other filters using the given operator.
  Entity:
    type: object
    properties:
      properties?:
        type: object
        description: |-
          The entity's properties.
          The map's keys are property names.
          A property name matching regex `__.*__` is reserved.
          A reserved property name is forbidden in certain documented contexts.
          The name must not contain more than 500 characters.
          The name cannot be `""`.
      key?: Key
    description: |-
      A Datastore data object.

      An entity is limited to 1 megabyte when stored. That _roughly_
      corresponds to a limit of 1 megabyte for the serialized form of this
      message.
  EntityResult:
    type: object
    properties:
      cursor?:
        type: string
        description: |-
          A cursor that points to the position after the result entity.
          Set only when the `EntityResult` is part of a `QueryResultBatch` message.
      version?:
        type: integer
        format: int64
        description: |-
          The version of the entity, a strictly positive number that monotonically
          increases with changes to the entity.

          This field is set for `FULL` entity
          results.

          For missing entities in `LookupResponse`, this
          is the version of the snapshot that was used to look up the entity, and it
          is always set except for eventually consistent reads.
      entity?: Entity
    description: The result of fetching an entity from Datastore.
  Filter:
    type: object
    properties:
      compositeFilter?: CompositeFilter
      propertyFilter?: PropertyFilter
    description: A holder for any type of filter.
  GqlQuery:
    type: object
    properties:
      namedBindings?:
        type: object
        description: |-
          For each non-reserved named binding site in the query string, there must be
          a named parameter with that name, but not necessarily the inverse.

          Key must match regex `A-Za-z_$*`, must not match regex
          `__.*__`, and must not be `""`.
      allowLiterals?:
        type: boolean
        description: |-
          When false, the query string must not contain any literals and instead must
          bind all values. For example,
          `SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while
          `SELECT * FROM Kind WHERE a = @value` is.
      queryString?:
        type: string
        description: |-
          A string of the format described
          [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
      positionalBindings?:
        type: array
        description: |-
          Numbered binding site @1 references the first numbered parameter,
          effectively using 1-based indexing, rather than the usual 0.

          For each binding site numbered i in `query_string`, there must be an i-th
          numbered parameter. The inverse must also be true.
        items: GqlQueryParameter
    description: A [GQL query](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
  GqlQueryParameter:
    type: object
    properties:
      cursor?:
        type: string
        description: |-
          A query cursor. Query cursors are returned in query
          result batches.
      value?: Value
    description: A binding parameter for a GQL query.
  Key:
    type: object
    properties:
      path?:
        type: array
        description: |-
          The entity path.
          An entity path consists of one or more elements composed of a kind and a
          string or numerical identifier, which identify entities. The first
          element identifies a _root entity_, the second element identifies
          a _child_ of the root entity, the third element identifies a child of the
          second entity, and so forth. The entities identified by all prefixes of
          the path are called the element's _ancestors_.

          An entity path is always fully complete: *all* of the entity's ancestors
          are required to be in the path along with the entity identifier itself.
          The only exception is that in some documented cases, the identifier in the
          last path element (for the entity) itself may be omitted. For example,
          the last path element of the key of `Mutation.insert` may have no
          identifier.

          A path can never be empty, and a path can have at most 100 elements.
        items: PathElement
      partitionId?: PartitionId
    description: |-
      A unique identifier for an entity.
      If a key's partition ID or any of its path kinds or names are
      reserved/read-only, the key is reserved/read-only.
      A reserved/read-only key is forbidden in certain documented contexts.
  KindExpression:
    type: object
    properties:
      name?:
        type: string
        description: The name of the kind.
    description: A representation of a kind.
  LatLng:
    type: object
    properties:
      latitude?:
        type: number
        format: double
        description: The latitude in degrees. It must be in the range [-90.0, +90.0].
      longitude?:
        type: number
        format: double
        description: The longitude in degrees. It must be in the range [-180.0, +180.0].
    description: |-
      An object representing a latitude/longitude pair. This is expressed as a pair
      of doubles representing degrees latitude and degrees longitude. Unless
      specified otherwise, this must conform to the
      <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84
      standard</a>. Values must be within normalized ranges.

      Example of normalization code in Python:

          def NormalizeLongitude(longitude):
            """Wraps decimal degrees longitude to [-180.0, 180.0]."""
            q, r = divmod(longitude, 360.0)
            if r > 180.0 or (r == 180.0 and q <= -1.0):
              return r - 360.0
            return r

          def NormalizeLatLng(latitude, longitude):
            """Wraps decimal degrees latitude and longitude to
            [-90.0, 90.0] and [-180.0, 180.0], respectively."""
            r = latitude % 360.0
            if r <= 90.0:
              return r, NormalizeLongitude(longitude)
            elif r >= 270.0:
              return r - 360, NormalizeLongitude(longitude)
            else:
              return 180 - r, NormalizeLongitude(longitude + 180.0)

          assert 180.0 == NormalizeLongitude(180.0)
          assert -180.0 == NormalizeLongitude(-180.0)
          assert -179.0 == NormalizeLongitude(181.0)
          assert (0.0, 0.0) == NormalizeLatLng(360.0, 0.0)
          assert (0.0, 0.0) == NormalizeLatLng(-360.0, 0.0)
          assert (85.0, 180.0) == NormalizeLatLng(95.0, 0.0)
          assert (-85.0, -170.0) == NormalizeLatLng(-95.0, 10.0)
          assert (90.0, 10.0) == NormalizeLatLng(90.0, 10.0)
          assert (-90.0, -10.0) == NormalizeLatLng(-90.0, -10.0)
          assert (0.0, -170.0) == NormalizeLatLng(-180.0, 10.0)
          assert (0.0, -170.0) == NormalizeLatLng(180.0, 10.0)
          assert (-90.0, 10.0) == NormalizeLatLng(270.0, 10.0)
          assert (90.0, 10.0) == NormalizeLatLng(-270.0, 10.0)
  LookupRequest:
    type: object
    properties:
      keys?:
        type: array
        description: Keys of entities to look up.
        items: Key
      readOptions?: ReadOptions
    description: The request for Datastore.Lookup.
  LookupResponse:
    type: object
    properties:
      deferred?:
        type: array
        description: |-
          A list of keys that were not looked up due to resource constraints. The
          order of results in this field is undefined and has no relation to the
          order of the keys in the input.
        items: Key
      found?:
        type: array
        description: |-
          Entities found as `ResultType.FULL` entities. The order of results in this
          field is undefined and has no relation to the order of the keys in the
          input.
        items: EntityResult
      missing?:
        type: array
        description: |-
          Entities not found as `ResultType.KEY_ONLY` entities. The order of results
          in this field is undefined and has no relation to the order of the keys
          in the input.
        items: EntityResult
    description: The response for Datastore.Lookup.
  Mutation:
    type: object
    properties:
      baseVersion?:
        type: integer
        format: int64
        description: |-
          The version of the entity that this mutation is being applied to. If this
          does not match the current version on the server, the mutation conflicts.
      upsert?: Entity
      insert?: Entity
      update?: Entity
      delete?: Key
    description: A mutation to apply to an entity.
  MutationResult:
    type: object
    properties:
      version?:
        type: integer
        format: int64
        description: |-
          The version of the entity on the server after processing the mutation. If
          the mutation doesn't change anything on the server, then the version will
          be the version of the current entity or, if no entity is present, a version
          that is strictly greater than the version of any previous entity and less
          than the version of any possible future entity.
      conflictDetected?:
        type: boolean
        description: |-
          Whether a conflict was detected for this mutation. Always false when a
          conflict detection strategy field is not set in the mutation.
      key?: Key
    description: The result of applying a mutation.
  PartitionId:
    type: object
    properties:
      namespaceId?:
        type: string
        description: If not empty, the ID of the namespace to which the entities belong.
      projectId?:
        type: string
        description: The ID of the project to which the entities belong.
    description: |-
      A partition ID identifies a grouping of entities. The grouping is always
      by project and namespace, however the namespace ID may be empty.

      A partition ID contains several dimensions:
      project ID and namespace ID.

      Partition dimensions:

      - May be `""`.
      - Must be valid UTF-8 bytes.
      - Must have values that match regex `[A-Za-z\d\.\-_]{1,100}`
      If the value of any dimension matches regex `__.*__`, the partition is
      reserved/read-only.
      A reserved/read-only partition ID is forbidden in certain documented
      contexts.

      Foreign partition IDs (in which the project ID does
      not match the context project ID ) are discouraged.
      Reads and writes of foreign partition IDs may fail if the project is not in an active state.
  PathElement:
    type: object
    properties:
      kind?:
        type: string
        description: |-
          The kind of the entity.
          A kind matching regex `__.*__` is reserved/read-only.
          A kind must not contain more than 1500 bytes when UTF-8 encoded.
          Cannot be `""`.
      name?:
        type: string
        description: |-
          The name of the entity.
          A name matching regex `__.*__` is reserved/read-only.
          A name must not be more than 1500 bytes when UTF-8 encoded.
          Cannot be `""`.
      id?:
        type: integer
        format: int64
        description: |-
          The auto-allocated ID of the entity.
          Never equal to zero. Values less than zero are discouraged and may not
          be supported in the future.
    description: |-
      A (kind, ID/name) pair used to construct a key path.

      If either name or ID is set, the element is complete.
      If neither is set, the element is incomplete.
  Projection:
    type: object
    properties:
      property?: PropertyReference
    description: A representation of a property in a projection.
  PropertyFilter:
    type: object
    properties:
      op?:
        type: string
        description: The operator to filter by.
        enum:
        - OPERATOR_UNSPECIFIED
        - LESS_THAN
        - LESS_THAN_OR_EQUAL
        - GREATER_THAN
        - GREATER_THAN_OR_EQUAL
        - EQUAL
        - HAS_ANCESTOR
      property?: PropertyReference
      value?: Value
    description: A filter on a specific property.
  PropertyOrder:
    type: object
    properties:
      property?: PropertyReference
      direction?:
        type: string
        description: The direction to order by. Defaults to `ASCENDING`.
        enum:
        - DIRECTION_UNSPECIFIED
        - ASCENDING
        - DESCENDING
    description: The desired order for a specific property.
  PropertyReference:
    type: object
    properties:
      name?:
        type: string
        description: |-
          The name of the property.
          If name includes "."s, it may be interpreted as a property name path.
    description: A reference to a property relative to the kind expressions.
  Query:
    type: object
    properties:
      filter?: Filter
      offset?:
        type: integer
        format: int32
        description: |-
          The number of results to skip. Applies before limit, but after all other
          constraints. Optional. Must be >= 0 if specified.
      kind?:
        type: array
        description: |-
          The kinds to query (if empty, returns entities of all kinds).
          Currently at most 1 kind may be specified.
        items: KindExpression
      limit?:
        type: integer
        format: int32
        description: |-
          The maximum number of results to return. Applies after all other
          constraints. Optional.
          Unspecified is interpreted as no limit.
          Must be >= 0 if specified.
      endCursor?:
        type: string
        description: |-
          An ending point for the query results. Query cursors are
          returned in query result batches and
          [can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
      projection?:
        type: array
        description: The projection to return. Defaults to returning all properties.
        items: Projection
      startCursor?:
        type: string
        description: |-
          A starting point for the query results. Query cursors are
          returned in query result batches and
          [can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
      distinctOn?:
        type: array
        description: |-
          The properties to make distinct. The query results will contain the first
          result for each distinct combination of values for the given properties
          (if empty, all results are returned).
        items: PropertyReference
      order?:
        type: array
        description: The order to apply to the query results (if empty, order is unspecified).
        items: PropertyOrder
    description: A query for entities.
  QueryResultBatch:
    type: object
    properties:
      entityResults?:
        type: array
        description: The results for this batch.
        items: EntityResult
      endCursor?:
        type: string
        description: A cursor that points to the position after the last result in the batch.
      skippedCursor?:
        type: string
        description: |-
          A cursor that points to the position after the last skipped result.
          Will be set when `skipped_results` != 0.
      snapshotVersion?:
        type: integer
        format: int64
        description: |-
          The version number of the snapshot this batch was returned from.
          This applies to the range of results from the query's `start_cursor` (or
          the beginning of the query if no cursor was given) to this batch's
          `end_cursor` (not the query's `end_cursor`).

          In a single transaction, subsequent query result batches for the same query
          can have a greater snapshot version number. Each batch's snapshot version
          is valid for all preceding batches.
      skippedResults?:
        type: integer
        format: int32
        description: The number of results skipped, typically because of an offset.
      moreResults?:
        type: string
        description: The state of the query after the current batch.
        enum:
        - MORE_RESULTS_TYPE_UNSPECIFIED
        - NOT_FINISHED
        - MORE_RESULTS_AFTER_LIMIT
        - MORE_RESULTS_AFTER_CURSOR
        - NO_MORE_RESULTS
      entityResultType?:
        type: string
        description: The result type for every entity in `entity_results`.
        enum:
        - RESULT_TYPE_UNSPECIFIED
        - FULL
        - PROJECTION
        - KEY_ONLY
    description: A batch of results produced by a query.
  ReadOptions:
    type: object
    properties:
      readConsistency?:
        type: string
        description: |-
          The non-transactional read consistency to use.
          Cannot be set to `STRONG` for global queries.
        enum:
        - READ_CONSISTENCY_UNSPECIFIED
        - STRONG
        - EVENTUAL
      transaction?:
        type: string
        description: |-
          The identifier of the transaction in which to read. A
          transaction identifier is returned by a call to
          Datastore.BeginTransaction.
    description: The options shared by read requests.
  RollbackRequest:
    type: object
    properties:
      transaction?:
        type: string
        description: |-
          The transaction identifier, returned by a call to
          Datastore.BeginTransaction.
    description: The request for Datastore.Rollback.
  RollbackResponse:
    type: object
    description: |-
      The response for Datastore.Rollback.
      (an empty message).
  RunQueryRequest:
    type: object
    properties:
      partitionId?: PartitionId
      gqlQuery?: GqlQuery
      query?: Query
      readOptions?: ReadOptions
    description: The request for Datastore.RunQuery.
  RunQueryResponse:
    type: object
    properties:
      query?: Query
      batch?: QueryResultBatch
    description: The response for Datastore.RunQuery.
  Value:
    type: object
    properties:
      keyValue?: Key
      timestampValue?:
        type: string
        description: |-
          A timestamp value.
          When stored in the Datastore, precise only to microseconds;
          any additional precision is rounded down.
      geoPointValue?: LatLng
      arrayValue?: ArrayValue
      doubleValue?:
        type: number
        format: double
        description: A double value.
      nullValue?:
        type: string
        description: A null value.
        enum:
        - NULL_VALUE
      stringValue?:
        type: string
        description: |-
          A UTF-8 encoded string value.
          When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes.
          Otherwise, may be set to at least 1,000,000 bytes.
      entityValue?: Entity
      meaning?:
        type: integer
        format: int32
        description: The `meaning` field should only be populated for backwards compatibility.
      integerValue?:
        type: integer
        format: int64
        description: An integer value.
      booleanValue?:
        type: boolean
        description: A boolean value.
      excludeFromIndexes?:
        type: boolean
        description: |-
          If the value should be excluded from all indexes including those defined
          explicitly.
      blobValue?:
        type: string
        description: |-
          A blob value.
          May have at most 1,000,000 bytes.
          When `exclude_from_indexes` is false, may have at most 1500 bytes.
          In JSON requests, must be base64-encoded.
    description: |-
      A message that can hold any of the supported value types and associated
      metadata.
/v1:
  /projects:
    /{projectId}:rollback:
      uriParameters:
        projectId:
          type: string
          description: The ID of the project against which to make the request.
      post:
        securedBy:
          oath2:
            scopes:
            - https://www.googleapis.com/auth/cloud-platform
            - https://www.googleapis.com/auth/datastore
        description: Rolls back a transaction.
        displayName: Rollback Projects
        is:
        - hasParameters
        body:
          application/json: RollbackRequest
        responses:
          200:
            body:
              application/json: RollbackResponse
    /{projectId}:lookup:
      uriParameters:
        projectId:
          type: string
          description: The ID of the project against which to make the request.
      post:
        securedBy:
          oath2:
            scopes:
            - https://www.googleapis.com/auth/cloud-platform
            - https://www.googleapis.com/auth/datastore
        description: Looks up entities by key.
        displayName: Lookup Projects
        is:
        - hasParameters
        body:
          application/json: LookupRequest
        responses:
          200:
            body:
              application/json: LookupResponse
    /{projectId}:beginTransaction:
      uriParameters:
        projectId:
          type: string
          description: The ID of the project against which to make the request.
      post:
        securedBy:
          oath2:
            scopes:
            - https://www.googleapis.com/auth/cloud-platform
            - https://www.googleapis.com/auth/datastore
        description: Begins a new transaction.
        displayName: BeginTransaction Projects
        is:
        - hasParameters
        body:
          application/json: BeginTransactionRequest
        responses:
          200:
            body:
              application/json: BeginTransactionResponse
    /{projectId}:commit:
      uriParameters:
        projectId:
          type: string
          description: The ID of the project against which to make the request.
      post:
        securedBy:
          oath2:
            scopes:
            - https://www.googleapis.com/auth/cloud-platform
            - https://www.googleapis.com/auth/datastore
        description: |-
          Commits a transaction, optionally creating, deleting or modifying some
          entities.
        displayName: Commit Projects
        is:
        - hasParameters
        body:
          application/json: CommitRequest
        responses:
          200:
            body:
              application/json: CommitResponse
    /{projectId}:runQuery:
      uriParameters:
        projectId:
          type: string
          description: The ID of the project against which to make the request.
      post:
        securedBy:
          oath2:
            scopes:
            - https://www.googleapis.com/auth/cloud-platform
            - https://www.googleapis.com/auth/datastore
        description: Queries for entities.
        displayName: RunQuery Projects
        is:
        - hasParameters
        body:
          application/json: RunQueryRequest
        responses:
          200:
            body:
              application/json: RunQueryResponse
    /{projectId}:allocateIds:
      uriParameters:
        projectId:
          type: string
          description: The ID of the project against which to make the request.
      post:
        securedBy:
          oath2:
            scopes:
            - https://www.googleapis.com/auth/cloud-platform
            - https://www.googleapis.com/auth/datastore
        description: |-
          Allocates IDs for the given keys, which is useful for referencing an entity
          before it is inserted.
        displayName: AllocateIds Projects
        is:
        - hasParameters
        body:
          application/json: AllocateIdsRequest
        responses:
          200:
            body:
              application/json: AllocateIdsResponse
