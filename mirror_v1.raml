#%RAML 1.0
title: Google Mirror API
version: v1
baseUri: https://www.googleapis.com/mirror/v1/
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
(commons.Links):
- title: Developer Documentation
  url: https://developers.google.com/glass
  role: documentation
(commons.Icons):
- url: http://www.google.com/images/icons/product/search-32.gif
  name: x32
- url: http://www.google.com/images/icons/product/search-16.gif
  name: x16
(commons.Tags):
- limited_availability
(commons.Id): mirror:v1
securitySchemes:
  oath2:
    type: OAuth 2.0
    description: Google Oath2.0 authorization. Detailed documentation can be found at https://developers.google.com/identity/protocols/OAuth2
    settings:
      authorizationGrants:
      - authorization_code
      - implicit
      authorizationUri: https://accounts.google.com/o/oauth2/v2/auth
      accessTokenUri: https://accounts.google.com/o/oauth2/v2/auth
      scopes:
      - https://www.googleapis.com/auth/glass.location
      - https://www.googleapis.com/auth/glass.timeline
traits:
  hasParameters:
    queryParameters:
      quotaUser?:
        type: string
        description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
      prettyPrint?:
        type: boolean
        default: true
        description: Returns response with indentations and line breaks.
      userIp?:
        type: string
        description: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
      fields?:
        type: string
        description: Selector specifying which fields to include in a partial response.
securedBy:
  oath2: 
types:
  Account:
    type: object
    properties:
      features?:
        type: array
        items:
          type: string
      authTokens?: AuthToken[]
      password?:
        type: string
      userData?: UserData[]
    description: Represents an account passed into the Account Manager on Glass.
  Attachment:
    type: object
    properties:
      contentUrl?:
        type: string
        description: The URL for the content.
      id?:
        type: string
        description: The ID of the attachment.
      isProcessingContent?:
        type: boolean
        description: Indicates that the contentUrl is not available because the attachment content is still being processed. If the caller wishes to retrieve the content, it should try again later.
      contentType?:
        type: string
        description: The MIME type of the attachment.
    description: Represents media content, such as a photo, that can be attached to a timeline item.
  AttachmentsListResponse:
    type: object
    properties:
      kind?:
        type: string
        default: mirror#attachmentsList
        description: The type of resource. This is always mirror#attachmentsList.
      items?:
        type: array
        description: The list of attachments.
        items: Attachment
    description: A list of Attachments. This is the response from the server to GET requests on the attachments collection.
  AuthToken:
    type: object
    properties:
      authToken?:
        type: string
      type?:
        type: string
  Command:
    type: object
    properties:
      type?:
        type: string
        description: "The type of operation this command corresponds to. Allowed values\
          \ are:  \n- TAKE_A_NOTE - Shares a timeline item with the transcription\
          \ of user speech from the \"Take a note\" voice menu command.  \n- POST_AN_UPDATE\
          \ - Shares a timeline item with the transcription of user speech from the\
          \ \"Post an update\" voice menu command."
    description: A single menu command that is part of a Contact.
  Contact:
    type: object
    properties:
      acceptTypes?:
        type: array
        description: A list of MIME types that a contact supports. The contact will be shown to the user if any of its acceptTypes matches any of the types of the attachments on the item. If no acceptTypes are given, the contact will be shown for all items.
        items:
          type: string
      phoneNumber?:
        type: string
        description: Primary phone number for the contact. This can be a fully-qualified number, with country calling code and area code, or a local number.
      acceptCommands?:
        type: array
        description: A list of voice menu commands that a contact can handle. Glass shows up to three contacts for each voice menu command. If there are more than that, the three contacts with the highest priority are shown for that particular command.
        items: Command
      displayName?:
        type: string
        description: The name to display for this contact.
      kind?:
        type: string
        default: mirror#contact
        description: The type of resource. This is always mirror#contact.
      speakableName?:
        type: string
        description: Name of this contact as it should be pronounced. If this contact's name must be spoken as part of a voice disambiguation menu, this name is used as the expected pronunciation. This is useful for contact names with unpronounceable characters or whose display spelling is otherwise not phonetic.
      imageUrls?:
        type: array
        description: Set of image URLs to display for a contact. Most contacts will have a single image, but a "group" contact may include up to 8 image URLs and they will be resized and cropped into a mosaic on the client.
        items:
          type: string
      id?:
        type: string
        description: An ID for this contact. This is generated by the application and is treated as an opaque token.
      source?:
        type: string
        description: The ID of the application that created this contact. This is populated by the API
      priority?:
        type: integer
        format: int32
        description: Priority for the contact to determine ordering in a list of contacts. Contacts with higher priorities will be shown before ones with lower priorities.
      type?:
        type: string
        description: "The type for this contact. This is used for sorting in UIs.\
          \ Allowed values are:  \n- INDIVIDUAL - Represents a single person. This\
          \ is the default. \n- GROUP - Represents more than a single person."
      sharingFeatures?:
        type: array
        description: "A list of sharing features that a contact can handle. Allowed\
          \ values are:  \n- ADD_CAPTION"
        items:
          type: string
    description: A person or group that can be used as a creator or a contact.
  ContactsListResponse:
    type: object
    properties:
      kind?:
        type: string
        default: mirror#contacts
        description: The type of resource. This is always mirror#contacts.
      items?:
        type: array
        description: Contact list.
        items: Contact
    description: A list of Contacts representing contacts. This is the response from the server to GET requests on the contacts collection.
  Location:
    type: object
    properties:
      address?:
        type: string
        description: The full address of the location.
      displayName?:
        type: string
        description: The name to be displayed. This may be a business name or a user-defined place, such as "Home".
      kind?:
        type: string
        default: mirror#location
        description: The type of resource. This is always mirror#location.
      latitude?:
        type: number
        format: double
        description: The latitude, in degrees.
      accuracy?:
        type: number
        format: double
        description: The accuracy of the location fix in meters.
      id?:
        type: string
        description: The ID of the location.
      longitude?:
        type: number
        format: double
        description: The longitude, in degrees.
      timestamp?:
        type: string
        description: The time at which this location was captured, formatted according to RFC 3339.
    description: A geographic location that can be associated with a timeline item.
  LocationsListResponse:
    type: object
    properties:
      kind?:
        type: string
        default: mirror#locationsList
        description: The type of resource. This is always mirror#locationsList.
      items?:
        type: array
        description: The list of locations.
        items: Location
    description: A list of Locations. This is the response from the server to GET requests on the locations collection.
  MenuItem:
    type: object
    properties:
      payload?:
        type: string
        description: "A generic payload whose meaning changes depending on this MenuItem's\
          \ action.  \n- When the action is OPEN_URI, the payload is the URL of the\
          \ website to view. \n- When the action is PLAY_VIDEO, the payload is the\
          \ streaming URL of the video \n- When the action is GET_MEDIA_INPUT, the\
          \ payload is the text transcription of a user's speech input"
      removeWhenSelected?:
        type: boolean
        description: If set to true on a CUSTOM menu item, that item will be removed from the menu after it is selected.
      values?:
        type: array
        description: For CUSTOM items, a list of values controlling the appearance of the menu item in each of its states. A value for the DEFAULT state must be provided. If the PENDING or CONFIRMED states are missing, they will not be shown.
        items: MenuValue
      action?:
        type: string
        description: "Controls the behavior when the user picks the menu option. Allowed\
          \ values are:  \n- CUSTOM - Custom action set by the service. When the user\
          \ selects this menuItem, the API triggers a notification to your callbackUrl\
          \ with the userActions.type set to CUSTOM and the userActions.payload set\
          \ to the ID of this menu item. This is the default value. \n- Built-in actions:\
          \  \n- REPLY - Initiate a reply to the timeline item using the voice recording\
          \ UI. The creator attribute must be set in the timeline item for this menu\
          \ to be available. \n- REPLY_ALL - Same behavior as REPLY. The original\
          \ timeline item's recipients will be added to the reply item. \n- DELETE\
          \ - Delete the timeline item. \n- SHARE - Share the timeline item with the\
          \ available contacts. \n- READ_ALOUD - Read the timeline item's speakableText\
          \ aloud; if this field is not set, read the text field; if none of those\
          \ fields are set, this menu item is ignored. \n- GET_MEDIA_INPUT - Allow\
          \ users to provide media payloads to Glassware from a menu item (currently,\
          \ only transcribed text from voice input is supported). Subscribe to notifications\
          \ when users invoke this menu item to receive the timeline item ID. Retrieve\
          \ the media from the timeline item in the payload property. \n- VOICE_CALL\
          \ - Initiate a phone call using the timeline item's creator.phoneNumber\
          \ attribute as recipient. \n- NAVIGATE - Navigate to the timeline item's\
          \ location. \n- TOGGLE_PINNED - Toggle the isPinned state of the timeline\
          \ item. \n- OPEN_URI - Open the payload of the menu item in the browser.\
          \ \n- PLAY_VIDEO - Open the payload of the menu item in the Glass video\
          \ player. \n- SEND_MESSAGE - Initiate sending a message to the timeline\
          \ item's creator:  \n- If the creator.phoneNumber is set and Glass is connected\
          \ to an Android phone, the message is an SMS. \n- Otherwise, if the creator.email\
          \ is set, the message is an email."
      id?:
        type: string
        description: The ID for this menu item. This is generated by the application and is treated as an opaque token.
      contextual_command?:
        type: string
        description: The ContextualMenus.Command associated with this MenuItem (e.g. READ_ALOUD). The voice label for this command will be displayed in the voice menu and the touch label will be displayed in the touch menu. Note that the default menu value's display name will be overriden if you specify this property. Values that do not correspond to a ContextualMenus.Command name will be ignored.
    description: A custom menu item that can be presented to the user by a timeline item.
  MenuValue:
    type: object
    properties:
      displayName?:
        type: string
        description: The name to display for the menu item. If you specify this property for a built-in menu item, the default contextual voice command for that menu item is not shown.
      iconUrl?:
        type: string
        description: URL of an icon to display with the menu item.
      state?:
        type: string
        description: "The state that this value applies to. Allowed values are:  \n\
          - DEFAULT - Default value shown when displayed in the menuItems list. \n\
          - PENDING - Value shown when the menuItem has been selected by the user\
          \ but can still be cancelled. \n- CONFIRMED - Value shown when the menuItem\
          \ has been selected by the user and can no longer be cancelled."
    description: A single value that is part of a MenuItem.
  Notification:
    type: object
    properties:
      userActions?:
        type: array
        description: A list of actions taken by the user that triggered the notification.
        items: UserAction
      itemId?:
        type: string
        description: The ID of the item that generated the notification.
      userToken?:
        type: string
        description: The user token provided by the service when it subscribed for notifications.
      verifyToken?:
        type: string
        description: The secret verify token provided by the service when it subscribed for notifications.
      collection?:
        type: string
        description: The collection that generated the notification.
      operation?:
        type: string
        description: The type of operation that generated the notification.
    description: A notification delivered by the API.
  NotificationConfig:
    type: object
    properties:
      deliveryTime?:
        type: string
        description: The time at which the notification should be delivered.
      level?:
        type: string
        description: "Describes how important the notification is. Allowed values\
          \ are:  \n- DEFAULT - Notifications of default importance. A chime will\
          \ be played to alert users."
    description: Controls how notifications for a timeline item are presented to the user.
  Setting:
    type: object
    properties:
      kind?:
        type: string
        default: mirror#setting
        description: The type of resource. This is always mirror#setting.
      id?:
        type: string
        description: "The setting's ID. The following IDs are valid:  \n- locale -\
          \ The key to the user’s language/locale (BCP 47 identifier) that Glassware\
          \ should use to render localized content.  \n- timezone - The key to the\
          \ user’s current time zone region as defined in the tz database. Example:\
          \ America/Los_Angeles."
      value?:
        type: string
        description: The setting value, as a string.
    description: A setting for Glass.
  Subscription:
    type: object
    properties:
      notification?: Notification
      userToken?:
        type: string
        description: An opaque token sent to the subscriber in notifications so that it can determine the ID of the user.
      verifyToken?:
        type: string
        description: A secret token sent to the subscriber in notifications so that it can verify that the notification was generated by Google.
      kind?:
        type: string
        default: mirror#subscription
        description: The type of resource. This is always mirror#subscription.
      callbackUrl?:
        type: string
        description: The URL where notifications should be delivered (must start with https://).
      collection?:
        type: string
        description: "The collection to subscribe to. Allowed values are:  \n- timeline\
          \ - Changes in the timeline including insertion, deletion, and updates.\
          \ \n- locations - Location updates. \n- settings - Settings updates."
      id?:
        type: string
        description: The ID of the subscription.
      operation?:
        type: array
        description: "A list of operations that should be subscribed to. An empty\
          \ list indicates that all operations on the collection should be subscribed\
          \ to. Allowed values are:  \n- UPDATE - The item has been updated. \n- INSERT\
          \ - A new item has been inserted. \n- DELETE - The item has been deleted.\
          \ \n- MENU_ACTION - A custom menu item has been triggered by the user."
        items:
          type: string
      updated?:
        type: string
        description: The time at which this subscription was last modified, formatted according to RFC 3339.
    description: A subscription to events on a collection.
  SubscriptionsListResponse:
    type: object
    properties:
      kind?:
        type: string
        default: mirror#subscriptionsList
        description: The type of resource. This is always mirror#subscriptionsList.
      items?:
        type: array
        description: The list of subscriptions.
        items: Subscription
    description: A list of Subscriptions. This is the response from the server to GET requests on the subscription collection.
  TimelineItem:
    type: object
    properties:
      displayTime?:
        type: string
        description: The time that should be displayed when this item is viewed in the timeline, formatted according to RFC 3339. This user's timeline is sorted chronologically on display time, so this will also determine where the item is displayed in the timeline. If not set by the service, the display time defaults to the updated time.
      attachments?:
        type: array
        description: "A list of media attachments associated with this item. As a\
          \ convenience, you can refer to attachments in your HTML payloads with the\
          \ attachment or cid scheme. For example:  \n- attachment: <img src=\"attachment:attachment_index\"\
          > where attachment_index is the 0-based index of this array. \n- cid: <img\
          \ src=\"cid:attachment_id\"> where attachment_id is the ID of the attachment."
        items: Attachment
      isBundleCover?:
        type: boolean
        description: "Whether this item is a bundle cover.\n\nIf an item is marked\
          \ as a bundle cover, it will be the entry point to the bundle of items that\
          \ have the same bundleId as that item. It will be shown only on the main\
          \ timeline — not within the opened bundle.\n\nOn the main timeline, items\
          \ that are shown are:  \n- Items that have isBundleCover set to true  \n\
          - Items that do not have a bundleId  In a bundle sub-timeline, items that\
          \ are shown are:  \n- Items that have the bundleId in question AND isBundleCover\
          \ set to false"
      sourceItemId?:
        type: string
        description: Opaque string you can use to map a timeline item to data in your own service.
      title?:
        type: string
        description: The title of this item.
      speakableText?:
        type: string
        description: |-
          The speakable version of the content of this item. Along with the READ_ALOUD menu item, use this field to provide text that would be clearer when read aloud, or to provide extended information to what is displayed visually on Glass.

          Glassware should also specify the speakableType field, which will be spoken before this text in cases where the additional context is useful, for example when the user requests that the item be read aloud following a notification.
      notification?: NotificationConfig
      isDeleted?:
        type: boolean
        description: When true, indicates this item is deleted, and only the ID property is set.
      html?:
        type: string
        description: "HTML content for this item. If both text and html are provided\
          \ for an item, the html will be rendered in the timeline.\nAllowed HTML\
          \ elements - You can use these elements in your timeline cards.\n \n- Headers:\
          \ h1, h2, h3, h4, h5, h6 \n- Images: img \n- Lists: li, ol, ul \n- HTML5\
          \ semantics: article, aside, details, figure, figcaption, footer, header,\
          \ nav, section, summary, time \n- Structural: blockquote, br, div, hr, p,\
          \ span \n- Style: b, big, center, em, i, u, s, small, strike, strong, style,\
          \ sub, sup \n- Tables: table, tbody, td, tfoot, th, thead, tr  \nBlocked\
          \ HTML elements: These elements and their contents are removed from HTML\
          \ payloads.\n \n- Document headers: head, title \n- Embeds: audio, embed,\
          \ object, source, video \n- Frames: frame, frameset \n- Scripting: applet,\
          \ script  \nOther elements: Any elements that aren't listed are removed,\
          \ but their contents are preserved."
      pinScore?:
        type: integer
        format: int32
        description: 'For pinned items, this determines the order in which the item
          is displayed in the timeline, with a higher score appearing closer to the
          clock. Note: setting this field is currently not supported.'
      id?:
        type: string
        description: The ID of the timeline item. This is unique within a user's timeline.
      text?:
        type: string
        description: Text content of this item.
      creator?: Contact
      canonicalUrl?:
        type: string
        description: A canonical URL pointing to the canonical/high quality version of the data represented by the timeline item.
      isPinned?:
        type: boolean
        description: When true, indicates this item is pinned, which means it's grouped alongside "active" items like navigation and hangouts, on the opposite side of the home screen from historical (non-pinned) timeline items. You can allow the user to toggle the value of this property with the TOGGLE_PINNED built-in menu item.
      created?:
        type: string
        description: The time at which this item was created, formatted according to RFC 3339.
      kind?:
        type: string
        default: mirror#timelineItem
        description: The type of resource. This is always mirror#timelineItem.
      bundleId?:
        type: string
        description: The bundle ID for this item. Services can specify a bundleId to group many items together. They appear under a single top-level item on the device.
      inReplyTo?:
        type: string
        description: If this item was generated as a reply to another item, this field will be set to the ID of the item being replied to. This can be used to attach a reply to the appropriate conversation or post.
      menuItems?:
        type: array
        description: A list of menu items that will be presented to the user when this item is selected in the timeline.
        items: MenuItem
      selfLink?:
        type: string
        description: A URL that can be used to retrieve this item.
      speakableType?:
        type: string
        description: |-
          A speakable description of the type of this item. This will be announced to the user prior to reading the content of the item in cases where the additional context is useful, for example when the user requests that the item be read aloud following a notification.

          This should be a short, simple noun phrase such as "Email", "Text message", or "Daily Planet News Update".

          Glassware are encouraged to populate this field for every timeline item, even if the item does not contain speakableText or text so that the user can learn the type of the item without looking at the screen.
      recipients?:
        type: array
        description: A list of users or groups that this item has been shared with.
        items: Contact
      etag?:
        type: string
        description: ETag for this item.
      location?: Location
      updated?:
        type: string
        description: The time at which this item was last modified, formatted according to RFC 3339.
    description: Each item in the user's timeline is represented as a TimelineItem JSON structure, described below.
  TimelineListResponse:
    type: object
    properties:
      kind?:
        type: string
        default: mirror#timeline
        description: The type of resource. This is always mirror#timeline.
      nextPageToken?:
        type: string
        description: The next page token. Provide this as the pageToken parameter in the request to retrieve the next page of results.
      items?:
        type: array
        description: Items in the timeline.
        items: TimelineItem
    description: A list of timeline items. This is the response from the server to GET requests on the timeline collection.
  UserAction:
    type: object
    properties:
      payload?:
        type: string
        description: |-
          An optional payload for the action.

          For actions of type CUSTOM, this is the ID of the custom menu item that was selected.
      type?:
        type: string
        description: "The type of action. The value of this can be:  \n- SHARE - the\
          \ user shared an item. \n- REPLY - the user replied to an item. \n- REPLY_ALL\
          \ - the user replied to all recipients of an item. \n- CUSTOM - the user\
          \ selected a custom menu item on the timeline item. \n- DELETE - the user\
          \ deleted the item. \n- PIN - the user pinned the item. \n- UNPIN - the\
          \ user unpinned the item. \n- LAUNCH - the user initiated a voice command.\
          \  In the future, additional types may be added. UserActions with unrecognized\
          \ types should be ignored."
    description: Represents an action taken by the user that triggered a notification.
  UserData:
    type: object
    properties:
      value?:
        type: string
      key?:
        type: string
/settings:
  /{id}:
    uriParameters:
      id:
        type: string
        description: "The ID of the setting. The following IDs are valid: \n- locale\
          \ - The key to the user’s language/locale (BCP 47 identifier) that Glassware\
          \ should use to render localized content. \n- timezone - The key to the\
          \ user’s current time zone region as defined in the tz database. Example:\
          \ America/Los_Angeles."
    get:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/glass.timeline
      description: Gets a single setting by ID.
      displayName: Get
      is:
      - hasParameters
      responses:
        200:
          body:
            application/json: Setting
      (commons.Id): mirror.settings.get
      (commons.LogicalStructure):
      - Settings
/subscriptions:
  /{id}:
    uriParameters:
      id:
        type: string
        description: The ID of the subscription.
    put:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/glass.timeline
      description: Updates an existing subscription in place.
      displayName: Update
      is:
      - hasParameters
      body:
        application/json: Subscription
      responses:
        200:
          body:
            application/json: Subscription
      (commons.Id): mirror.subscriptions.update
      (commons.LogicalStructure):
      - Subscriptions
    delete:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/glass.timeline
      description: Deletes a subscription.
      displayName: Delete
      is:
      - hasParameters
      (commons.Id): mirror.subscriptions.delete
      (commons.LogicalStructure):
      - Subscriptions
  post:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/glass.timeline
    description: Creates a new subscription.
    displayName: Insert
    is:
    - hasParameters
    body:
      application/json: Subscription
    responses:
      200:
        body:
          application/json: Subscription
    (commons.Id): mirror.subscriptions.insert
    (commons.LogicalStructure):
    - Subscriptions
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/glass.timeline
    description: Retrieves a list of subscriptions for the authenticated user and service.
    displayName: List
    is:
    - hasParameters
    responses:
      200:
        body:
          application/json: SubscriptionsListResponse
    (commons.Id): mirror.subscriptions.list
    (commons.LogicalStructure):
    - Subscriptions
/timeline:
  /{id}:
    uriParameters:
      id:
        type: string
        description: The ID of the timeline item.
    patch:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/glass.location
          - https://www.googleapis.com/auth/glass.timeline
      description: Updates a timeline item in place. This method supports patch semantics.
      displayName: Patch
      is:
      - hasParameters
      body:
        application/json: TimelineItem
      responses:
        200:
          body:
            application/json: TimelineItem
      (commons.Id): mirror.timeline.patch
      (commons.LogicalStructure):
      - Timeline
    get:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/glass.location
          - https://www.googleapis.com/auth/glass.timeline
      description: Gets a single timeline item by ID.
      displayName: Get
      is:
      - hasParameters
      responses:
        200:
          body:
            application/json: TimelineItem
      (commons.Id): mirror.timeline.get
      (commons.LogicalStructure):
      - Timeline
    put:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/glass.location
          - https://www.googleapis.com/auth/glass.timeline
      description: Updates a timeline item in place.
      displayName: Update
      is:
      - hasParameters
      body:
        application/json: TimelineItem
      responses:
        200:
          body:
            application/json: TimelineItem
      (commons.Id): mirror.timeline.update
      (commons.LogicalStructure):
      - Timeline
    delete:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/glass.location
          - https://www.googleapis.com/auth/glass.timeline
      description: Deletes a timeline item.
      displayName: Delete
      is:
      - hasParameters
      (commons.Id): mirror.timeline.delete
      (commons.LogicalStructure):
      - Timeline
  /{itemId}:
    uriParameters:
      itemId:
        type: string
        description: The ID of the timeline item the attachment belongs to.
    /attachments:
      /{attachmentId}:
        uriParameters:
          attachmentId:
            type: string
            description: The ID of the attachment.
        get:
          securedBy:
            oath2:
              scopes:
              - https://www.googleapis.com/auth/glass.timeline
          description: Retrieves an attachment on a timeline item by item ID and attachment ID.
          displayName: Get
          is:
          - hasParameters
          responses:
            200:
              body:
                application/json: Attachment
          (commons.Id): mirror.timeline.attachments.get
          (commons.LogicalStructure):
          - Timeline
          - Attachments
        delete:
          securedBy:
            oath2:
              scopes:
              - https://www.googleapis.com/auth/glass.timeline
          description: Deletes an attachment from a timeline item.
          displayName: Delete
          is:
          - hasParameters
          (commons.Id): mirror.timeline.attachments.delete
          (commons.LogicalStructure):
          - Timeline
          - Attachments
      post:
        securedBy:
          oath2:
            scopes:
            - https://www.googleapis.com/auth/glass.timeline
        description: Adds a new attachment to a timeline item.
        displayName: Insert
        is:
        - hasParameters
        responses:
          200:
            body:
              application/json: Attachment
        (commons.Id): mirror.timeline.attachments.insert
        (commons.LogicalStructure):
        - Timeline
        - Attachments
      get:
        securedBy:
          oath2:
            scopes:
            - https://www.googleapis.com/auth/glass.timeline
        description: Returns a list of attachments for a timeline item.
        displayName: List
        is:
        - hasParameters
        responses:
          200:
            body:
              application/json: AttachmentsListResponse
        (commons.Id): mirror.timeline.attachments.list
        (commons.LogicalStructure):
        - Timeline
        - Attachments
  post:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/glass.location
        - https://www.googleapis.com/auth/glass.timeline
    description: Inserts a new item into the timeline.
    displayName: Insert
    is:
    - hasParameters
    body:
      application/json: TimelineItem
    responses:
      200:
        body:
          application/json: TimelineItem
    (commons.Id): mirror.timeline.insert
    (commons.LogicalStructure):
    - Timeline
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/glass.location
        - https://www.googleapis.com/auth/glass.timeline
    description: Retrieves a list of timeline items for the authenticated user.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      pinnedOnly?:
        type: boolean
        description: If true, only pinned items will be returned.
      maxResults?:
        type: integer
        format: int32
        description: The maximum number of items to include in the response, used for paging.
      sourceItemId?:
        type: string
        description: If provided, only items with the given sourceItemId will be returned.
      bundleId?:
        type: string
        description: If provided, only items with the given bundleId will be returned.
      includeDeleted?:
        type: boolean
        description: If true, tombstone records for deleted items will be returned.
      orderBy?:
        type: string
        description: Controls the order in which timeline items are returned.
        (commons.EnumDescriptions):
        - Results will be ordered by displayTime (default). This is the same ordering as is used in the timeline on the device.
        - Results will be ordered by the time at which they were last written to the data store.
        enum:
        - displayTime
        - writeTime
      pageToken?:
        type: string
        description: Token for the page of results to return.
    responses:
      200:
        body:
          application/json: TimelineListResponse
    (commons.Id): mirror.timeline.list
    (commons.LogicalStructure):
    - Timeline
/locations:
  /{id}:
    uriParameters:
      id:
        type: string
        description: The ID of the location or latest for the last known location.
    get:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/glass.location
          - https://www.googleapis.com/auth/glass.timeline
      description: Gets a single location by ID.
      displayName: Get
      is:
      - hasParameters
      responses:
        200:
          body:
            application/json: Location
      (commons.Id): mirror.locations.get
      (commons.LogicalStructure):
      - Locations
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/glass.location
        - https://www.googleapis.com/auth/glass.timeline
    description: Retrieves a list of locations for the user.
    displayName: List
    is:
    - hasParameters
    responses:
      200:
        body:
          application/json: LocationsListResponse
    (commons.Id): mirror.locations.list
    (commons.LogicalStructure):
    - Locations
/accounts:
  /{userToken}:
    uriParameters:
      userToken:
        type: string
        description: The ID for the user.
    /{accountType}:
      uriParameters:
        accountType:
          type: string
          description: Account type to be passed to Android Account Manager.
      /{accountName}:
        uriParameters:
          accountName:
            type: string
            description: The name of the account to be passed to the Android Account Manager.
        post:
          description: Inserts a new account for a user
          displayName: Insert
          is:
          - hasParameters
          body:
            application/json: Account
          responses:
            200:
              body:
                application/json: Account
          (commons.Id): mirror.accounts.insert
          (commons.LogicalStructure):
          - Accounts
/contacts:
  /{id}:
    uriParameters:
      id:
        type: string
        description: The ID of the contact.
    patch:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/glass.timeline
      description: Updates a contact in place. This method supports patch semantics.
      displayName: Patch
      is:
      - hasParameters
      body:
        application/json: Contact
      responses:
        200:
          body:
            application/json: Contact
      (commons.Id): mirror.contacts.patch
      (commons.LogicalStructure):
      - Contacts
    get:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/glass.timeline
      description: Gets a single contact by ID.
      displayName: Get
      is:
      - hasParameters
      responses:
        200:
          body:
            application/json: Contact
      (commons.Id): mirror.contacts.get
      (commons.LogicalStructure):
      - Contacts
    put:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/glass.timeline
      description: Updates a contact in place.
      displayName: Update
      is:
      - hasParameters
      body:
        application/json: Contact
      responses:
        200:
          body:
            application/json: Contact
      (commons.Id): mirror.contacts.update
      (commons.LogicalStructure):
      - Contacts
    delete:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/glass.timeline
      description: Deletes a contact.
      displayName: Delete
      is:
      - hasParameters
      (commons.Id): mirror.contacts.delete
      (commons.LogicalStructure):
      - Contacts
  post:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/glass.timeline
    description: Inserts a new contact.
    displayName: Insert
    is:
    - hasParameters
    body:
      application/json: Contact
    responses:
      200:
        body:
          application/json: Contact
    (commons.Id): mirror.contacts.insert
    (commons.LogicalStructure):
    - Contacts
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/glass.timeline
    description: Retrieves a list of contacts for the authenticated user.
    displayName: List
    is:
    - hasParameters
    responses:
      200:
        body:
          application/json: ContactsListResponse
    (commons.Id): mirror.contacts.list
    (commons.LogicalStructure):
    - Contacts
