#%RAML 1.0
title: Google Proximity Beacon API
version: v1beta1
baseUri: https://proximitybeacon.googleapis.com/
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
(commons.Links):
- title: Developer Documentation
  url: https://developers.google.com/beacons/proximity/
  role: documentation
(commons.Icons):
- url: http://www.google.com/images/icons/product/search-32.gif
  name: x32
- url: http://www.google.com/images/icons/product/search-16.gif
  name: x16
(commons.Id): proximitybeacon:v1beta1
securitySchemes:
  oath2:
    type: OAuth 2.0
    description: Google Oath2.0 authorization. Detailed documentation can be found at https://developers.google.com/identity/protocols/OAuth2
    settings:
      authorizationGrants:
      - authorization_code
      - implicit
      authorizationUri: https://accounts.google.com/o/oauth2/v2/auth
      accessTokenUri: https://accounts.google.com/o/oauth2/v2/auth
      scopes:
      - https://www.googleapis.com/auth/userlocation.beacon.registry
traits:
  hasParameters:
    queryParameters:
      pp?:
        type: boolean
        default: true
        description: Pretty-print response.
      quotaUser?:
        type: string
        description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      prettyPrint?:
        type: boolean
        default: true
        description: Returns response with indentations and line breaks.
      upload_protocol?:
        type: string
        description: Upload protocol for media (e.g. "raw", "multipart").
      $.xgafv?:
        type: string
        description: V1 error format.
      uploadType?:
        type: string
        description: Legacy upload protocol for media (e.g. "media", "multipart").
      callback?:
        type: string
        description: JSONP
      fields?:
        type: string
        description: Selector specifying which fields to include in a partial response.
securedBy:
  oath2: 
types:
  AdvertisedId:
    type: object
    properties:
      id?:
        type: string
        description: The actual beacon identifier, as broadcast by the beacon hardware. Must be [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP requests, and will be so encoded (with padding) in responses. The base64 encoding should be of the binary byte-stream and not any textual (such as hex) representation thereof. Required.
      type?:
        type: string
        description: Specifies the identifier type. Required.
        enum:
        - TYPE_UNSPECIFIED
        - EDDYSTONE
        - IBEACON
        - ALTBEACON
        - EDDYSTONE_EID
    description: Defines a unique identifier of a beacon as broadcast by the device.
  AttachmentInfo:
    type: object
    properties:
      data?:
        type: string
        description: An opaque data container for client-provided data.
      namespacedType?:
        type: string
        description: Specifies what kind of attachment this is. Tells a client how to interpret the `data` field. Format is namespace/type, for example scrupulous-wombat-12345/welcome-message
    description: A subset of attachment information served via the `beaconinfo.getforobserved` method, used when your users encounter your beacons.
  Beacon:
    type: object
    properties:
      ephemeralIdRegistration?: EphemeralIdRegistration
      advertisedId?: AdvertisedId
      expectedStability?:
        type: string
        description: Expected location stability. This is set when the beacon is registered or updated, not automatically detected in any way. Optional.
        enum:
        - STABILITY_UNSPECIFIED
        - STABLE
        - PORTABLE
        - MOBILE
        - ROVING
      indoorLevel?: IndoorLevel
      placeId?:
        type: string
        description: The [Google Places API](/places/place-id) Place ID of the place where the beacon is deployed. This is given when the beacon is registered or updated, not automatically detected in any way. Optional.
      description?:
        type: string
        description: Free text used to identify and describe the beacon. Maximum length 140 characters. Optional.
      provisioningKey?:
        type: string
        description: 'Some beacons may require a user to provide an authorization
          key before changing any of its configuration (e.g. broadcast frames, transmit
          power). This field provides a place to store and control access to that
          key. This field is populated in responses to `GET /v1beta1/beacons/3!beaconId`
          from users with write access to the given beacon. That is to say: If the
          user is authorized to write the beacon''s confidential data in the service,
          the service considers them authorized to configure the beacon. Note that
          this key grants nothing on the service, only on the beacon itself.'
      beaconName?:
        type: string
        description: Resource name of this beacon. A beacon name has the format "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon. This field must be left empty when registering. After reading a beacon, clients can use the name for future operations.
      latLng?: LatLng
      properties?:
        type: object
        description: Properties of the beacon device, for example battery type or firmware version. Optional.
      status?:
        type: string
        description: Current status of the beacon. Required.
        enum:
        - STATUS_UNSPECIFIED
        - ACTIVE
        - DECOMMISSIONED
        - INACTIVE
    description: Details of a beacon device.
  BeaconAttachment:
    type: object
    properties:
      data?:
        type: string
        description: An opaque data container for client-provided data. Must be [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP requests, and will be so encoded (with padding) in responses. Required.
      namespacedType?:
        type: string
        description: Specifies what kind of attachment this is. Tells a client how to interpret the `data` field. Format is namespace/type. Namespace provides type separation between clients. Type describes the type of `data`, for use by the client when parsing the `data` field. Required.
      attachmentName?:
        type: string
        description: 'Resource name of this attachment. Attachment names have the
          format: beacons/beacon_id/attachments/attachment_id. Leave this empty on
          creation.'
    description: Project-specific data associated with a beacon.
  BeaconInfo:
    type: object
    properties:
      advertisedId?: AdvertisedId
      attachments?:
        type: array
        description: Attachments matching the type(s) requested. May be empty if no attachment types were requested, or if none matched.
        items: AttachmentInfo
      beaconName?:
        type: string
        description: The name under which the beacon is registered.
    description: A subset of beacon information served via the `beaconinfo.getforobserved` method, which you call when users of your app encounter your beacons.
  Date:
    type: object
    properties:
      month?:
        type: integer
        format: int32
        description: Month of year. Must be from 1 to 12.
      year?:
        type: integer
        format: int32
        description: Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
      day?:
        type: integer
        format: int32
        description: Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a year/month where the day is not significant.
    description: Represents a whole calendar date, e.g. date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the Proleptic Gregorian Calendar. The day may be 0 to represent a year and month where the day is not significant, e.g. credit card expiration date. The year may be 0 to represent a month and day independent of year, e.g. anniversary date. Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`.
  DeleteAttachmentsResponse:
    type: object
    properties:
      numDeleted?:
        type: integer
        format: int32
        description: The number of attachments that were deleted.
    description: Response for a request to delete attachments.
  Diagnostics:
    type: object
    properties:
      alerts?:
        type: array
        description: An unordered list of Alerts that the beacon has.
        items:
          type: string
          enum:
          - ALERT_UNSPECIFIED
          - WRONG_LOCATION
          - LOW_BATTERY
      beaconName?:
        type: string
        description: Resource name of the beacon. For Eddystone-EID beacons, this may be the beacon's current EID, or the beacon's "stable" Eddystone-UID.
      estimatedLowBatteryDate?: Date
    description: Diagnostics for a single beacon.
  Empty:
    type: object
    description: 'A generic empty message that you can re-use to avoid defining duplicated
      empty messages in your APIs. A typical example is to use it as the request or
      the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty)
      returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty
      JSON object `{}`.'
  EphemeralIdRegistration:
    type: object
    properties:
      serviceEcdhPublicKey?:
        type: string
        description: The service's public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, `beacon_ecdh_public_key` must also be populated, and `beacon_identity_key` must not be.
      initialClockValue?:
        type: integer
        format: int64
        description: The initial clock value of the beacon. The beacon's clock must have begun counting at this value immediately prior to transmitting this value to the resolving service. Significant delay in transmitting this value to the service risks registration or resolution failures. If a value is not provided, the default is zero.
      rotationPeriodExponent?:
        type: integer
        format: int32
        description: 'Indicates the nominal period between each rotation of the beacon''s
          ephemeral ID. "Nominal" because the beacon should randomize the actual interval.
          See [the spec at github](https://github.com/google/eddystone/tree/master/eddystone-eid)
          for details. This value corresponds to a power-of-two scaler on the beacon''s
          clock: when the scaler value is K, the beacon will begin broadcasting a
          new ephemeral ID on average every 2^K seconds.'
      initialEid?:
        type: string
        description: An initial ephemeral ID calculated using the clock value submitted as `initial_clock_value`, and the secret key generated by the Diffie-Hellman key exchange using `service_ecdh_public_key` and `service_ecdh_public_key`. This initial EID value will be used by the service to confirm that the key exchange process was successful.
      beaconEcdhPublicKey?:
        type: string
        description: The beacon's public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, `service_ecdh_public_key` must also be populated, and `beacon_identity_key` must not be.
      beaconIdentityKey?:
        type: string
        description: The private key of the beacon. If this field is populated, `beacon_ecdh_public_key` and `service_ecdh_public_key` must not be populated.
    description: 'Write-only registration parameters for beacons using Eddystone-EID
      format. Two ways of securely registering an Eddystone-EID beacon with the service
      are supported: 1. Perform an ECDH key exchange via this API, including a previous
      call to `GET /v1beta1/eidparams`. In this case the fields `beacon_ecdh_public_key`
      and `service_ecdh_public_key` should be populated and `beacon_identity_key`
      should not be populated. This method ensures that only the two parties in the
      ECDH key exchange can compute the identity key, which becomes a secret between
      them. 2. Derive or obtain the beacon''s identity key via other secure means
      (perhaps an ECDH key exchange between the beacon and a mobile device or any
      other secure method), and then submit the resulting identity key to the service.
      In this case `beacon_identity_key` field should be populated, and neither of
      `beacon_ecdh_public_key` nor `service_ecdh_public_key` fields should be. The
      security of this method depends on how securely the parties involved (in particular
      the bluetooth client) handle the identity key, and obviously on how securely
      the identity key was generated. See [the Eddystone specification](https://github.com/google/eddystone/tree/master/eddystone-eid)
      at GitHub.'
  EphemeralIdRegistrationParams:
    type: object
    properties:
      serviceEcdhPublicKey?:
        type: string
        description: The beacon service's public key for use by a beacon to derive its Identity Key using Elliptic Curve Diffie-Hellman key exchange.
      minRotationPeriodExponent?:
        type: integer
        format: int32
        description: Indicates the minimum rotation period supported by the service. See EddystoneEidRegistration.rotation_period_exponent
      maxRotationPeriodExponent?:
        type: integer
        format: int32
        description: Indicates the maximum rotation period supported by the service. See EddystoneEidRegistration.rotation_period_exponent
    description: Information a client needs to provision and register beacons that broadcast Eddystone-EID format beacon IDs, using Elliptic curve Diffie-Hellman key exchange. See [the Eddystone specification](https://github.com/google/eddystone/tree/master/eddystone-eid) at GitHub.
  GetInfoForObservedBeaconsRequest:
    type: object
    properties:
      namespacedTypes?:
        type: array
        description: Specifies what kind of attachments to include in the response. When given, the response will include only attachments of the given types. When empty, no attachments will be returned. Must be in the format namespace/type. Accepts `*` to specify all types in all namespaces. Optional.
        items:
          type: string
      observations?:
        type: array
        description: The beacons that the client has encountered. At least one must be given.
        items: Observation
    description: Request for beacon and attachment information about beacons that a mobile client has encountered "in the wild".
  GetInfoForObservedBeaconsResponse:
    type: object
    properties:
      beacons?:
        type: array
        description: Public information about beacons. May be empty if the request matched no beacons.
        items: BeaconInfo
    description: Information about the requested beacons, optionally including attachment data.
  IndoorLevel:
    type: object
    properties:
      name?:
        type: string
        description: The name of this level.
    description: Indoor level, a human-readable string as returned by Google Maps APIs, useful to indicate which floor of a building a beacon is located on.
  LatLng:
    type: object
    properties:
      latitude?:
        type: number
        format: double
        description: The latitude in degrees. It must be in the range [-90.0, +90.0].
      longitude?:
        type: number
        format: double
        description: The longitude in degrees. It must be in the range [-180.0, +180.0].
    description: 'An object representing a latitude/longitude pair. This is expressed
      as a pair of doubles representing degrees latitude and degrees longitude. Unless
      specified otherwise, this must conform to the WGS84 standard. Values must be
      within normalized ranges. Example of normalization code in Python: def NormalizeLongitude(longitude):
      """Wraps decimal degrees longitude to [-180.0, 180.0].""" q, r = divmod(longitude,
      360.0) if r > 180.0 or (r == 180.0 and q <= -1.0): return r - 360.0 return r
      def NormalizeLatLng(latitude, longitude): """Wraps decimal degrees latitude
      and longitude to [-90.0, 90.0] and [-180.0, 180.0], respectively.""" r = latitude
      % 360.0 if r = 270.0: return r - 360, NormalizeLongitude(longitude) else: return
      180 - r, NormalizeLongitude(longitude + 180.0) assert 180.0 == NormalizeLongitude(180.0)
      assert -180.0 == NormalizeLongitude(-180.0) assert -179.0 == NormalizeLongitude(181.0)
      assert (0.0, 0.0) == NormalizeLatLng(360.0, 0.0) assert (0.0, 0.0) == NormalizeLatLng(-360.0,
      0.0) assert (85.0, 180.0) == NormalizeLatLng(95.0, 0.0) assert (-85.0, -170.0)
      == NormalizeLatLng(-95.0, 10.0) assert (90.0, 10.0) == NormalizeLatLng(90.0,
      10.0) assert (-90.0, -10.0) == NormalizeLatLng(-90.0, -10.0) assert (0.0, -170.0)
      == NormalizeLatLng(-180.0, 10.0) assert (0.0, -170.0) == NormalizeLatLng(180.0,
      10.0) assert (-90.0, 10.0) == NormalizeLatLng(270.0, 10.0) assert (90.0, 10.0)
      == NormalizeLatLng(-270.0, 10.0)'
  ListBeaconAttachmentsResponse:
    type: object
    properties:
      attachments?:
        type: array
        description: The attachments that corresponded to the request params.
        items: BeaconAttachment
    description: Response to ListBeaconAttachments that contains the requested attachments.
  ListBeaconsResponse:
    type: object
    properties:
      nextPageToken?:
        type: string
        description: An opaque pagination token that the client may provide in their next request to retrieve the next page of results.
      totalCount?:
        type: integer
        format: int64
        description: Estimate of the total number of beacons matched by the query. Higher values may be less accurate.
      beacons?:
        type: array
        description: The beacons that matched the search criteria.
        items: Beacon
    description: Response that contains list beacon results and pagination help.
  ListDiagnosticsResponse:
    type: object
    properties:
      diagnostics?:
        type: array
        description: The diagnostics matching the given request.
        items: Diagnostics
      nextPageToken?:
        type: string
        description: Token that can be used for pagination. Returned only if the request matches more beacons than can be returned in this response.
    description: Response that contains the requested diagnostics.
  ListNamespacesResponse:
    type: object
    properties:
      namespaces?:
        type: array
        description: The attachments that corresponded to the request params.
        items: Namespace
    description: Response to ListNamespacesRequest that contains all the project's namespaces.
  Namespace:
    type: object
    properties:
      servingVisibility?:
        type: string
        description: Specifies what clients may receive attachments under this namespace via `beaconinfo.getforobserved`.
        enum:
        - VISIBILITY_UNSPECIFIED
        - UNLISTED
        - PUBLIC
      namespaceName?:
        type: string
        description: 'Resource name of this namespace. Namespaces names have the format:
          namespaces/namespace.'
    description: An attachment namespace defines read and write access for all the attachments created under it. Each namespace is globally unique, and owned by one project which is the only project that can create attachments under it.
  Observation:
    type: object
    properties:
      advertisedId?: AdvertisedId
      telemetry?:
        type: string
        description: The array of telemetry bytes received from the beacon. The server is responsible for parsing it. This field may frequently be empty, as with a beacon that transmits telemetry only occasionally.
      timestampMs?:
        type: string
        description: Time when the beacon was observed.
    description: Represents one beacon observed once.
/v1beta1:
  /beaconinfo:getforobserved:
    post:
      description: Given one or more beacon observations, returns any beacon information and attachments accessible to your application. Authorize by using the [API key](https://developers.google.com/beacons/proximity/how-tos/authorizing#APIKey) for the application.
      displayName: Getforobserved Beaconinfo
      is:
      - hasParameters
      body:
        application/json: GetInfoForObservedBeaconsRequest
      responses:
        200:
          body:
            application/json: GetInfoForObservedBeaconsResponse
  /eidparams:
    get:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/userlocation.beacon.registry
      description: Gets the Proximity Beacon API's current public key and associated parameters used to initiate the Diffie-Hellman key exchange required to register a beacon that broadcasts the Eddystone-EID format. This key changes periodically; clients may cache it and re-use the same public key to provision and register multiple beacons. However, clients should be prepared to refresh this key when they encounter an error registering an Eddystone-EID beacon.
      displayName: GetEidparams
      is:
      - hasParameters
      responses:
        200:
          body:
            application/json: EphemeralIdRegistrationParams
  /{beaconName}:
    uriParameters:
      beaconName:
        type: string
        pattern: ^beacons/[^/]*$
        description: Resource name of this beacon. A beacon name has the format "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5` for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon's "stable" UID. Required.
    get:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/userlocation.beacon.registry
      description: 'Returns detailed information about the specified beacon. Authenticate
        using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2)
        from a signed-in user with **viewer**, **Is owner** or **Can edit** permissions
        in the Google Developers Console project. Requests may supply an Eddystone-EID
        beacon name in the form: `beacons/4!beaconId` where the `beaconId` is the
        base16 ephemeral ID broadcast by the beacon. The returned `Beacon` object
        will contain the beacon''s stable Eddystone-UID. Clients not authorized to
        resolve the beacon''s ephemeral Eddystone-EID broadcast will receive an error.'
      displayName: Get Beacons
      is:
      - hasParameters
      queryParameters:
        projectId?:
          type: string
          description: The project id of the beacon to request. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.
      responses:
        200:
          body:
            application/json: Beacon
    put:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/userlocation.beacon.registry
      description: Updates the information about the specified beacon. **Any field that you do not populate in the submitted beacon will be permanently erased**, so you should follow the "read, modify, write" pattern to avoid inadvertently destroying data. Changes to the beacon status via this method will be silently ignored. To update beacon status, use the separate methods on this API for activation, deactivation, and decommissioning. Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is owner** or **Can edit** permissions in the Google Developers Console project.
      displayName: Update Beacons
      is:
      - hasParameters
      queryParameters:
        projectId?:
          type: string
          description: The project id of the beacon to update. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.
      body:
        application/json: Beacon
      responses:
        200:
          body:
            application/json: Beacon
  /{beaconName}:activate:
    uriParameters:
      beaconName:
        type: string
        pattern: ^beacons/[^/]*$
        description: Beacon that should be activated. A beacon name has the format "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5` for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon's "stable" UID. Required.
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/userlocation.beacon.registry
      description: Activates a beacon. A beacon that is active will return information and attachment data when queried via `beaconinfo.getforobserved`. Calling this method on an already active beacon will do nothing (but will return a successful response code). Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is owner** or **Can edit** permissions in the Google Developers Console project.
      displayName: Activate Beacons
      is:
      - hasParameters
      queryParameters:
        projectId?:
          type: string
          description: The project id of the beacon to activate. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.
      responses:
        200:
          body:
            application/json: Empty
  /{beaconName}:decommission:
    uriParameters:
      beaconName:
        type: string
        pattern: ^beacons/[^/]*$
        description: Beacon that should be decommissioned. A beacon name has the format "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5` for AltBeacon. For Eddystone-EID beacons, you may use either the current EID of the beacon's "stable" UID. Required.
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/userlocation.beacon.registry
      description: Decommissions the specified beacon in the service. This beacon will no longer be returned from `beaconinfo.getforobserved`. This operation is permanent -- you will not be able to re-register a beacon with this ID again. Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is owner** or **Can edit** permissions in the Google Developers Console project.
      displayName: Decommission Beacons
      is:
      - hasParameters
      queryParameters:
        projectId?:
          type: string
          description: The project id of the beacon to decommission. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.
      responses:
        200:
          body:
            application/json: Empty
  /beacons:
    get:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/userlocation.beacon.registry
      description: Searches the beacon registry for beacons that match the given search criteria. Only those beacons that the client has permission to list will be returned. Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **viewer**, **Is owner** or **Can edit** permissions in the Google Developers Console project.
      displayName: List Beacons
      is:
      - hasParameters
      queryParameters:
        q?:
          type: string
          description: 'Filter query string that supports the following field filters:
            * `description:""` For example: `description:"Room 3"` Returns beacons
            whose description matches tokens in the string "Room 3" (not necessarily
            that exact string). The string must be double-quoted. * `status:` For
            example: `status:active` Returns beacons whose status matches the given
            value. Values must be one of the Beacon.Status enum values (case insensitive).
            Accepts multiple filters which will be combined with OR logic. * `stability:`
            For example: `stability:mobile` Returns beacons whose expected stability
            matches the given value. Values must be one of the Beacon.Stability enum
            values (case insensitive). Accepts multiple filters which will be combined
            with OR logic. * `place_id:""` For example: `place_id:"ChIJVSZzVR8FdkgRXGmmm6SslKw="`
            Returns beacons explicitly registered at the given place, expressed as
            a Place ID obtained from [Google Places API](/places/place-id). Does not
            match places inside the given place. Does not consider the beacon''s actual
            location (which may be different from its registered place). Accepts multiple
            filters that will be combined with OR logic. The place ID must be double-quoted.
            * `registration_time[|=]` For example: `registration_time>=1433116800`
            Returns beacons whose registration time matches the given filter. Supports
            the operators: , =. Timestamp must be expressed as an integer number of
            seconds since midnight January 1, 1970 UTC. Accepts at most two filters
            that will be combined with AND logic, to support "between" semantics.
            If more than two are supplied, the latter ones are ignored. * `lat: lng:
            radius:` For example: `lat:51.1232343 lng:-1.093852 radius:1000` Returns
            beacons whose registered location is within the given circle. When any
            of these fields are given, all are required. Latitude and longitude must
            be decimal degrees between -90.0 and 90.0 and between -180.0 and 180.0
            respectively. Radius must be an integer number of meters between 10 and
            1,000,000 (1000 km). * `property:"="` For example: `property:"battery-type=CR2032"`
            Returns beacons which have a property of the given name and value. Supports
            multiple filters which will be combined with OR logic. The entire name=value
            string must be double-quoted as one string. * `attachment_type:""` For
            example: `attachment_type:"my-namespace/my-type"` Returns beacons having
            at least one attachment of the given namespaced type. Supports "any within
            this namespace" via the partial wildcard syntax: "my-namespace/*". Supports
            multiple filters which will be combined with OR logic. The string must
            be double-quoted. Multiple filters on the same field are combined with
            OR logic (except registration_time which is combined with AND logic).
            Multiple filters on different fields are combined with AND logic. Filters
            should be separated by spaces. As with any HTTP query string parameter,
            the whole filter expression must be URL-encoded. Example REST request:
            `GET /v1beta1/beacons?q=status:active%20lat:51.123%20lng:-1.095%20radius:1000`'
        pageSize?:
          type: integer
          format: int32
          description: The maximum number of records to return for this request, up to a server-defined upper limit.
        pageToken?:
          type: string
          description: A pagination token obtained from a previous request to list beacons.
        projectId?:
          type: string
          description: The project id to list beacons under. If not present then the project credential that made the request is used as the project. Optional.
      responses:
        200:
          body:
            application/json: ListBeaconsResponse
  /beacons:register:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/userlocation.beacon.registry
      description: Registers a previously unregistered beacon given its `advertisedId`. These IDs are unique within the system. An ID can be registered only once. Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is owner** or **Can edit** permissions in the Google Developers Console project.
      displayName: Register Beacons
      is:
      - hasParameters
      queryParameters:
        projectId?:
          type: string
          description: The project id of the project the beacon will be registered to. If the project id is not specified then the project making the request is used. Optional.
      body:
        application/json: Beacon
      responses:
        200:
          body:
            application/json: Beacon
  /{beaconName}:deactivate:
    uriParameters:
      beaconName:
        type: string
        pattern: ^beacons/[^/]*$
        description: Beacon that should be deactivated. A beacon name has the format "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5` for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon's "stable" UID. Required.
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/userlocation.beacon.registry
      description: Deactivates a beacon. Once deactivated, the API will not return information nor attachment data for the beacon when queried via `beaconinfo.getforobserved`. Calling this method on an already inactive beacon will do nothing (but will return a successful response code). Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is owner** or **Can edit** permissions in the Google Developers Console project.
      displayName: Deactivate Beacons
      is:
      - hasParameters
      queryParameters:
        projectId?:
          type: string
          description: The project id of the beacon to deactivate. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.
      responses:
        200:
          body:
            application/json: Empty
  /{namespaceName}:
    uriParameters:
      namespaceName:
        type: string
        pattern: ^namespaces/[^/]*$
        description: 'Resource name of this namespace. Namespaces names have the format:
          namespaces/namespace.'
    put:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/userlocation.beacon.registry
      description: Updates the information about the specified namespace. Only the namespace visibility can be updated.
      displayName: Update Namespaces
      is:
      - hasParameters
      queryParameters:
        projectId?:
          type: string
          description: The project id of the namespace to update. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.
      body:
        application/json: Namespace
      responses:
        200:
          body:
            application/json: Namespace
  /namespaces:
    get:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/userlocation.beacon.registry
      description: Lists all attachment namespaces owned by your Google Developers Console project. Attachment data associated with a beacon must include a namespaced type, and the namespace must be owned by your project. Authenticate using an [OAuth access token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **viewer**, **Is owner** or **Can edit** permissions in the Google Developers Console project.
      displayName: List Namespaces
      is:
      - hasParameters
      queryParameters:
        projectId?:
          type: string
          description: The project id to list namespaces under. Optional.
      responses:
        200:
          body:
            application/json: ListNamespacesResponse
