#%RAML 1.0
title: Google Identity Toolkit API
version: v3
baseUri: https://www.googleapis.com/identitytoolkit/v3/relyingparty/
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
(commons.Links):
- title: Developer Documentation
  url: https://developers.google.com/identity-toolkit/v3/
  role: documentation
(commons.Icons):
- url: http://www.google.com/images/icons/product/search-32.gif
  name: x32
- url: http://www.google.com/images/icons/product/search-16.gif
  name: x16
(commons.Id): identitytoolkit:v3
securitySchemes:
  oath2:
    type: OAuth 2.0
    description: Google Oath2.0 authorization. Detailed documentation can be found at https://developers.google.com/identity/protocols/OAuth2
    settings:
      authorizationGrants:
      - authorization_code
      - implicit
      authorizationUri: https://accounts.google.com/o/oauth2/v2/auth
      accessTokenUri: https://accounts.google.com/o/oauth2/v2/auth
      scopes:
      - https://www.googleapis.com/auth/firebase
traits:
  hasParameters:
    queryParameters:
      quotaUser?:
        type: string
        description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
      prettyPrint?:
        type: boolean
        default: true
        description: Returns response with indentations and line breaks.
      userIp?:
        type: string
        description: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
      fields?:
        type: string
        description: Selector specifying which fields to include in a partial response.
securedBy:
  oath2: 
types:
  CreateAuthUriResponse:
    type: object
    properties:
      authUri?:
        type: string
        description: The URI used by the IDP to authenticate the user.
      allProviders?:
        type: array
        description: all providers the user has once used to do federated login
        items:
          type: string
      kind?:
        type: string
        default: identitytoolkit#CreateAuthUriResponse
        description: The fixed string identitytoolkit#CreateAuthUriResponse".
      providerId?:
        type: string
        description: The provider ID of the auth URI.
      registered?:
        type: boolean
        description: Whether the user is registered if the identifier is an email.
      sessionId?:
        type: string
        description: Session ID which should be passed in the following verifyAssertion request.
      captchaRequired?:
        type: boolean
        description: True if captcha is required.
      forExistingProvider?:
        type: boolean
        description: True if the authUri is for user's existing provider.
    description: Response of creating the IDP authentication URL.
  DeleteAccountResponse:
    type: object
    properties:
      kind?:
        type: string
        default: identitytoolkit#DeleteAccountResponse
        description: The fixed string "identitytoolkit#DeleteAccountResponse".
    description: Respone of deleting account.
  DownloadAccountResponse:
    type: object
    properties:
      kind?:
        type: string
        default: identitytoolkit#DownloadAccountResponse
        description: The fixed string "identitytoolkit#DownloadAccountResponse".
      nextPageToken?:
        type: string
        description: The next page token. To be used in a subsequent request to return the next page of results.
      users?:
        type: array
        description: The user accounts data.
        items: UserInfo
    description: Respone of downloading accounts in batch.
  EmailTemplate:
    type: object
    properties:
      subject?:
        type: string
        description: Subject of the email.
      format?:
        type: string
        description: Email body format.
      replyTo?:
        type: string
        description: Reply-to address.
      from?:
        type: string
        description: From address of the email.
      fromDisplayName?:
        type: string
        description: From display name.
      body?:
        type: string
        description: Email body.
    description: Template for an email template.
  GetAccountInfoResponse:
    type: object
    properties:
      kind?:
        type: string
        default: identitytoolkit#GetAccountInfoResponse
        description: The fixed string "identitytoolkit#GetAccountInfoResponse".
      users?:
        type: array
        description: The info of the users.
        items: UserInfo
    description: Response of getting account information.
  GetOobConfirmationCodeResponse:
    type: object
    properties:
      kind?:
        type: string
        default: identitytoolkit#GetOobConfirmationCodeResponse
        description: The fixed string "identitytoolkit#GetOobConfirmationCodeResponse".
      oobCode?:
        type: string
        description: The code to be send to the user.
      email?:
        type: string
        description: The email address that the email is sent to.
    description: Response of getting a code for user confirmation (reset password, change email etc.).
  GetRecaptchaParamResponse:
    type: object
    properties:
      recaptchaStoken?:
        type: string
        description: The stoken field for the recaptcha widget, used to request captcha challenge.
      recaptchaSiteKey?:
        type: string
        description: Site key registered at recaptcha.
      kind?:
        type: string
        default: identitytoolkit#GetRecaptchaParamResponse
        description: The fixed string "identitytoolkit#GetRecaptchaParamResponse".
    description: Response of getting recaptcha param.
  IdentitytoolkitRelyingpartyCreateAuthUriRequest:
    type: object
    properties:
      identifier?:
        type: string
        description: The email or federated ID of the user.
      clientId?:
        type: string
        description: The relying party OAuth client ID.
      oauthScope?:
        type: string
        description: Additional oauth scopes, beyond the basid user profile, that the user would be prompted to grant
      customParameter?:
        type: object
        description: 'The query parameter that client can customize by themselves
          in auth url. The following parameters are reserved for server so that they
          cannot be customized by clients: client_id, response_type, scope, redirect_uri,
          state, oauth_token.'
      authFlowType?:
        type: string
        description: Explicitly specify the auth flow type. Currently only support "CODE_FLOW" type. The field is only used for Google provider.
      sessionId?:
        type: string
        description: The session_id passed by client.
      providerId?:
        type: string
        description: The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.
      appId?:
        type: string
        description: The app ID of the mobile app, base64(CERT_SHA1):PACKAGE_NAME for Android, BUNDLE_ID for iOS.
      context?:
        type: string
        description: The opaque value used by the client to maintain context info between the authentication request and the IDP callback.
      hostedDomain?:
        type: string
        description: The hosted domain to restrict sign-in to accounts at that domain for Google Apps hosted accounts.
      continueUri?:
        type: string
        description: The URI to which the IDP redirects the user after the federated login flow.
      oauthConsumerKey?:
        type: string
        description: The developer's consumer key for OpenId OAuth Extension
      openidRealm?:
        type: string
        description: Optional realm for OpenID protocol. The sub string "scheme://domain:port" of the param "continueUri" is used if this is not set.
      otaApp?:
        type: string
        description: The native app package for OTA installation.
    description: Request to get the IDP authentication URL.
  IdentitytoolkitRelyingpartyDeleteAccountRequest:
    type: object
    properties:
      delegatedProjectNumber?:
        type: integer
        format: int64
        description: GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
      idToken?:
        type: string
        description: The GITKit token or STS id token of the authenticated user.
      localId?:
        type: string
        description: The local ID of the user.
    description: Request to delete account.
  IdentitytoolkitRelyingpartyDownloadAccountRequest:
    type: object
    properties:
      maxResults?:
        type: integer
        format: int32
        description: The max number of results to return in the response.
      nextPageToken?:
        type: string
        description: The token for the next page. This should be taken from the previous response.
      delegatedProjectNumber?:
        type: integer
        format: int64
        description: GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
    description: Request to download user account in batch.
  IdentitytoolkitRelyingpartyGetAccountInfoRequest:
    type: object
    properties:
      delegatedProjectNumber?:
        type: integer
        format: int64
        description: GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
      idToken?:
        type: string
        description: The GITKit token of the authenticated user.
      localId?:
        type: array
        description: The list of local ID's of the users to inquiry.
        items:
          type: string
      email?:
        type: array
        description: The list of emails of the users to inquiry.
        items:
          type: string
    description: Request to get the account information.
  IdentitytoolkitRelyingpartyGetProjectConfigResponse:
    type: object
    properties:
      legacyResetPasswordTemplate?: EmailTemplate
      idpConfig?:
        type: array
        description: OAuth2 provider configuration.
        items: IdpConfig
      apiKey?:
        type: string
        description: Browser API key, needed when making http request to Apiary.
      resetPasswordTemplate?: EmailTemplate
      useEmailSending?:
        type: boolean
        description: Whether to use email sending provided by Firebear.
      enableAnonymousUser?:
        type: boolean
        description: Whether anonymous user is enabled.
      allowPasswordUser?:
        type: boolean
        description: Whether to allow password user sign in or sign up.
      projectId?:
        type: string
        description: Project ID of the relying party.
      verifyEmailTemplate?: EmailTemplate
      authorizedDomains?:
        type: array
        description: Authorized domains.
        items:
          type: string
      changeEmailTemplate?: EmailTemplate
    description: Response of getting the project configuration.
  IdentitytoolkitRelyingpartyGetPublicKeysResponse:
    type: object
    description: Respone of getting public keys.
  IdentitytoolkitRelyingpartyResetPasswordRequest:
    type: object
    properties:
      oldPassword?:
        type: string
        description: The old password inputted by the user.
      newPassword?:
        type: string
        description: The new password inputted by the user.
      oobCode?:
        type: string
        description: The confirmation code.
      email?:
        type: string
        description: The email address of the user.
    description: Request to reset the password.
  IdentitytoolkitRelyingpartySetAccountInfoRequest:
    type: object
    properties:
      captchaResponse?:
        type: string
        description: Response to the captcha.
      validSince?:
        type: integer
        format: int64
        description: Timestamp in seconds for valid login token.
      captchaChallenge?:
        type: string
        description: The captcha challenge.
      displayName?:
        type: string
        description: The name of the user.
      upgradeToFederatedLogin?:
        type: boolean
        description: Mark the user to upgrade to federated login.
      localId?:
        type: string
        description: The local ID of the user.
      oobCode?:
        type: string
        description: The out-of-band code of the change email request.
      returnSecureToken?:
        type: boolean
        description: Whether return sts id token and refresh token instead of gitkit token.
      createdAt?:
        type: integer
        format: int64
        description: The timestamp when the account is created.
      emailVerified?:
        type: boolean
        description: Mark the email as verified or not.
      photoUrl?:
        type: string
        description: The photo url of the user.
      password?:
        type: string
        description: The new password of the user.
      instanceId?:
        type: string
        description: Instance id token of the app.
      lastLoginAt?:
        type: integer
        format: int64
        description: Last login timestamp.
      provider?:
        type: array
        description: The associated IDPs of the user.
        items:
          type: string
      deleteAttribute?:
        type: array
        description: The attributes users request to delete.
        items:
          type: string
      delegatedProjectNumber?:
        type: integer
        format: int64
        description: GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
      idToken?:
        type: string
        description: The GITKit token of the authenticated user.
      disableUser?:
        type: boolean
        description: Whether to disable the user.
      deleteProvider?:
        type: array
        description: The IDPs the user request to delete.
        items:
          type: string
      email?:
        type: string
        description: The email of the user.
    description: Request to set the account information.
  IdentitytoolkitRelyingpartySetProjectConfigRequest:
    type: object
    properties:
      legacyResetPasswordTemplate?: EmailTemplate
      idpConfig?:
        type: array
        description: Oauth2 provider configuration.
        items: IdpConfig
      apiKey?:
        type: string
        description: Browser API key, needed when making http request to Apiary.
      resetPasswordTemplate?: EmailTemplate
      delegatedProjectNumber?:
        type: integer
        format: int64
        description: GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
      useEmailSending?:
        type: boolean
        description: Whether to use email sending provided by Firebear.
      enableAnonymousUser?:
        type: boolean
        description: Whether to enable anonymous user.
      allowPasswordUser?:
        type: boolean
        description: Whether to allow password user sign in or sign up.
      verifyEmailTemplate?: EmailTemplate
      authorizedDomains?:
        type: array
        description: Authorized domains for widget redirect.
        items:
          type: string
      changeEmailTemplate?: EmailTemplate
    description: Request to set the project configuration.
  IdentitytoolkitRelyingpartySetProjectConfigResponse:
    type: object
    properties:
      projectId?:
        type: string
        description: Project ID of the relying party.
    description: Response of setting the project configuration.
  IdentitytoolkitRelyingpartySignOutUserRequest:
    type: object
    properties:
      instanceId?:
        type: string
        description: Instance id token of the app.
      localId?:
        type: string
        description: The local ID of the user.
    description: Request to sign out user.
  IdentitytoolkitRelyingpartySignOutUserResponse:
    type: object
    properties:
      localId?:
        type: string
        description: The local ID of the user.
    description: Response of signing out user.
  IdentitytoolkitRelyingpartySignupNewUserRequest:
    type: object
    properties:
      captchaResponse?:
        type: string
        description: Response to the captcha.
      password?:
        type: string
        description: The new password of the user.
      instanceId?:
        type: string
        description: Instance id token of the app.
      captchaChallenge?:
        type: string
        description: The captcha challenge.
      displayName?:
        type: string
        description: The name of the user.
      idToken?:
        type: string
        description: The GITKit token of the authenticated user.
      email?:
        type: string
        description: The email of the user.
    description: Request to signup new user, create anonymous user or anonymous user reauth.
  IdentitytoolkitRelyingpartyUploadAccountRequest:
    type: object
    properties:
      signerKey?:
        type: string
        description: The key for to hash the password.
      memoryCost?:
        type: integer
        format: int32
        description: Memory cost for hash calculation. Used by scrypt similar algorithms.
      saltSeparator?:
        type: string
        description: The salt separator.
      targetProjectId?:
        type: string
        description: Specify which project (field value is actually project id) to operate. Only used when provided credential.
      delegatedProjectNumber?:
        type: integer
        format: int64
        description: GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
      sanityCheck?:
        type: boolean
        description: If true, backend will do sanity check(including duplicate email and federated id) when uploading account.
      hashAlgorithm?:
        type: string
        description: The password hash algorithm.
      rounds?:
        type: integer
        format: int32
        description: Rounds for hash calculation. Used by scrypt and similar algorithms.
      users?:
        type: array
        description: The account info to be stored.
        items: UserInfo
    description: Request to upload user account in batch.
  IdentitytoolkitRelyingpartyVerifyAssertionRequest:
    type: object
    properties:
      instanceId?:
        type: string
        description: Instance id token of the app.
      pendingIdToken?:
        type: string
        description: The GITKit token for the non-trusted IDP pending to be confirmed by the user.
      postBody?:
        type: string
        description: The post body if the request is a HTTP POST.
      returnIdpCredential?:
        type: boolean
        description: Whether return 200 and IDP credential rather than throw exception when federated id is already linked.
      delegatedProjectNumber?:
        type: integer
        format: int64
        description: GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
      returnRefreshToken?:
        type: boolean
        description: Whether to return refresh tokens.
      idToken?:
        type: string
        description: The GITKit token of the authenticated user.
      requestUri?:
        type: string
        description: The URI to which the IDP redirects the user back. It may contain federated login result params added by the IDP.
      sessionId?:
        type: string
        description: Session ID, which should match the one in previous createAuthUri request.
      returnSecureToken?:
        type: boolean
        description: Whether return sts id token and refresh token instead of gitkit token.
    description: Request to verify the IDP assertion.
  IdentitytoolkitRelyingpartyVerifyCustomTokenRequest:
    type: object
    properties:
      instanceId?:
        type: string
        description: Instance id token of the app.
      delegatedProjectNumber?:
        type: integer
        format: int64
        description: GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
      returnSecureToken?:
        type: boolean
        description: Whether return sts id token and refresh token instead of gitkit token.
      token?:
        type: string
        description: The custom token to verify
    description: Request to verify a custom token
  IdentitytoolkitRelyingpartyVerifyPasswordRequest:
    type: object
    properties:
      captchaResponse?:
        type: string
        description: Response to the captcha.
      password?:
        type: string
        description: The password inputed by the user.
      instanceId?:
        type: string
        description: Instance id token of the app.
      pendingIdToken?:
        type: string
        description: The GITKit token for the non-trusted IDP, which is to be confirmed by the user.
      captchaChallenge?:
        type: string
        description: The captcha challenge.
      delegatedProjectNumber?:
        type: integer
        format: int64
        description: GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
      idToken?:
        type: string
        description: The GITKit token of the authenticated user.
      email?:
        type: string
        description: The email of the user.
      returnSecureToken?:
        type: boolean
        description: Whether return sts id token and refresh token instead of gitkit token.
    description: Request to verify the password.
  IdpConfig:
    type: object
    properties:
      clientId?:
        type: string
        description: OAuth2 client ID.
      provider?:
        type: string
        description: OAuth2 provider.
      whitelistedAudiences?:
        type: array
        description: Whitelisted client IDs for audience check.
        items:
          type: string
      secret?:
        type: string
        description: OAuth2 client secret.
      experimentPercent?:
        type: integer
        format: int32
        description: Percent of users who will be prompted/redirected federated login for this IDP.
      enabled?:
        type: boolean
        description: Whether this IDP is enabled.
    description: Template for a single idp configuration.
  Relyingparty:
    type: object
    properties:
      requestType?:
        type: string
        description: The request type.
      captchaResp?:
        type: string
        description: The recaptcha response from the user.
      kind?:
        type: string
        default: identitytoolkit#relyingparty
        description: The fixed string "identitytoolkit#relyingparty".
      idToken?:
        type: string
        description: The user's Gitkit login token for email change.
      challenge?:
        type: string
        description: The recaptcha challenge presented to the user.
      userIp?:
        type: string
        description: The IP address of the user.
      newEmail?:
        type: string
        description: The new email if the code is for email change.
      email?:
        type: string
        description: The email of the user.
    description: Request of getting a code for user confirmation (reset password, change email etc.)
  ResetPasswordResponse:
    type: object
    properties:
      requestType?:
        type: string
        description: The request type.
      kind?:
        type: string
        default: identitytoolkit#ResetPasswordResponse
        description: The fixed string "identitytoolkit#ResetPasswordResponse".
      newEmail?:
        type: string
        description: If the out-of-band code is for email recovery, the user's new email.
      email?:
        type: string
        description: The user's email. If the out-of-band code is for email recovery, the user's original email.
    description: Response of resetting the password.
  SetAccountInfoResponse:
    type: object
    properties:
      expiresIn?:
        type: integer
        format: int64
        description: If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
      photoUrl?:
        type: string
        description: The photo url of the user.
      providerUserInfo?:
        type: array
        description: The user's profiles at the associated IdPs.
        items:
          type: object
          properties:
            photoUrl?:
              type: string
              description: The user's photo url at the IDP.
            displayName?:
              type: string
              description: The user's display name at the IDP.
            federatedId?:
              type: string
              description: User's identifier at IDP.
            providerId?:
              type: string
              description: The IdP ID. For whitelisted IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.
      displayName?:
        type: string
        description: The name of the user.
      kind?:
        type: string
        default: identitytoolkit#SetAccountInfoResponse
        description: The fixed string "identitytoolkit#SetAccountInfoResponse".
      idToken?:
        type: string
        description: The Gitkit id token to login the newly sign up user.
      newEmail?:
        type: string
        description: The new email the user attempts to change to.
      localId?:
        type: string
        description: The local ID of the user.
      email?:
        type: string
        description: The email of the user.
      passwordHash?:
        type: string
        description: The user's hashed password.
      refreshToken?:
        type: string
        description: If idToken is STS id token, then this field will be refresh token.
    description: Respone of setting the account information.
  SignupNewUserResponse:
    type: object
    properties:
      expiresIn?:
        type: integer
        format: int64
        description: If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
      displayName?:
        type: string
        description: The name of the user.
      kind?:
        type: string
        default: identitytoolkit#SignupNewUserResponse
        description: The fixed string "identitytoolkit#SignupNewUserResponse".
      idToken?:
        type: string
        description: The Gitkit id token to login the newly sign up user.
      localId?:
        type: string
        description: The RP local ID of the user.
      email?:
        type: string
        description: The email of the user.
      refreshToken?:
        type: string
        description: If idToken is STS id token, then this field will be refresh token.
    description: Response of signing up new user, creating anonymous user or anonymous user reauth.
  UploadAccountResponse:
    type: object
    properties:
      kind?:
        type: string
        default: identitytoolkit#UploadAccountResponse
        description: The fixed string "identitytoolkit#UploadAccountResponse".
      error?:
        type: array
        description: The error encountered while processing the account info.
        items:
          type: object
          properties:
            index?:
              type: integer
              format: int32
              description: The index of the malformed account, starting from 0.
            message?:
              type: string
              description: Detailed error message for the account info.
    description: Respone of uploading accounts in batch.
  UserInfo:
    type: object
    properties:
      salt?:
        type: string
        description: The user's password salt.
      validSince?:
        type: integer
        format: int64
        description: Timestamp in seconds for valid login token.
      providerUserInfo?:
        type: array
        description: The IDP of the user.
        items:
          type: object
          properties:
            photoUrl?:
              type: string
              description: The user's photo url at the IDP.
            displayName?:
              type: string
              description: The user's display name at the IDP.
            federatedId?:
              type: string
              description: User's identifier at IDP.
            providerId?:
              type: string
              description: The IdP ID. For white listed IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.
            rawId?:
              type: string
              description: User's raw identifier directly returned from IDP.
            screenName?:
              type: string
              description: User's screen name at Twitter or login name at Github.
            email?:
              type: string
              description: User's email at IDP.
            rawUserInfo?:
              type: string
              description: Raw IDP-returned user info.
      displayName?:
        type: string
        description: The name of the user.
      customAuth?:
        type: boolean
        description: Whether the user is authenticated by the developer.
      screenName?:
        type: string
        description: User's screen name at Twitter or login name at Github.
      localId?:
        type: string
        description: The local ID of the user.
      version?:
        type: integer
        format: int32
        description: Version of the user's password.
      passwordHash?:
        type: string
        description: The user's hashed password.
      createdAt?:
        type: integer
        format: int64
        description: User creation timestamp.
      emailVerified?:
        type: boolean
        description: Whether the email has been verified.
      passwordUpdatedAt?:
        type: number
        format: double
        description: The timestamp when the password was last updated.
      photoUrl?:
        type: string
        description: The URL of the user profile photo.
      lastLoginAt?:
        type: integer
        format: int64
        description: last login timestamp.
      disabled?:
        type: boolean
        description: Whether the user is disabled.
      email?:
        type: string
        description: The email of the user.
    description: Template for an individual account info.
  VerifyAssertionResponse:
    type: object
    properties:
      lastName?:
        type: string
        description: The last name of the user.
      displayName?:
        type: string
        description: The display name of the user.
      inputEmail?:
        type: string
        description: It's the identifier param in the createAuthUri request if the identifier is an email. It can be used to check whether the user input email is different from the asserted email.
      oauthScope?:
        type: string
        description: The scope for the OpenID OAuth extension.
      oauthAuthorizationCode?:
        type: string
        description: The OAuth2 authorization code.
      language?:
        type: string
        description: The language preference of the user.
      screenName?:
        type: string
        description: The screen_name of a Twitter user or the login name at Github.
      localId?:
        type: string
        description: The RP local ID if it's already been mapped to the IdP account identified by the federated ID.
      verifiedProvider?:
        type: array
        description: When action is 'map', contains the idps which can be used for confirmation.
        items:
          type: string
      rawUserInfo?:
        type: string
        description: Raw IDP-returned user info.
      expiresIn?:
        type: integer
        format: int64
        description: If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
      needEmail?:
        type: boolean
        description: Whether need client to supply email to complete the federated login flow.
      photoUrl?:
        type: string
        description: The URI of the public accessible profiel picture.
      oauthAccessToken?:
        type: string
        description: The OAuth2 access token.
      originalEmail?:
        type: string
        description: The original email stored in the mapping storage. It's returned when the federated ID is associated to a different email.
      emailRecycled?:
        type: boolean
        description: It's true if the email is recycled.
      providerId?:
        type: string
        description: The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. If the "providerId" param is set to OpenID OP identifer other than the whilte listed IdPs the OP identifier is returned. If the "identifier" param is federated ID in the createAuthUri request. The domain part of the federated ID is returned.
      appScheme?:
        type: string
        description: The custom scheme used by mobile app.
      context?:
        type: string
        description: The opaque value used by the client to maintain context info between the authentication request and the IDP callback.
      action?:
        type: string
        description: The action code.
      oauthTokenSecret?:
        type: string
        description: The OAuth1 access token secret.
      oauthIdToken?:
        type: string
        description: The OIDC id token.
      email?:
        type: string
        description: 'The email returned by the IdP. NOTE: The federated login user
          may not own the email.'
      kind?:
        type: string
        default: identitytoolkit#VerifyAssertionResponse
        description: The fixed string "identitytoolkit#VerifyAssertionResponse".
      nickName?:
        type: string
        description: The nick name of the user.
      errorMessage?:
        type: string
        description: Client error code.
      fullName?:
        type: string
        description: The full name of the user.
      oauthExpireIn?:
        type: integer
        format: int32
        description: The lifetime in seconds of the OAuth2 access token.
      timeZone?:
        type: string
        description: The timezone of the user.
      dateOfBirth?:
        type: string
        description: The birth date of the IdP account.
      oauthRequestToken?:
        type: string
        description: The user approved request token for the OpenID OAuth extension.
      appInstallationUrl?:
        type: string
        description: URL for OTA app installation.
      emailVerified?:
        type: boolean
        description: The value is true if the IDP is also the email provider. It means the user owns the email.
      firstName?:
        type: string
        description: The first name of the user.
      federatedId?:
        type: string
        description: The unique ID identifies the IdP account.
      idToken?:
        type: string
        description: The ID token.
      needConfirmation?:
        type: boolean
        description: Whether the assertion is from a non-trusted IDP and need account linking confirmation.
      refreshToken?:
        type: string
        description: If idToken is STS id token, then this field will be refresh token.
    description: Response of verifying the IDP assertion.
  VerifyCustomTokenResponse:
    type: object
    properties:
      expiresIn?:
        type: integer
        format: int64
        description: If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
      kind?:
        type: string
        default: identitytoolkit#VerifyCustomTokenResponse
        description: The fixed string "identitytoolkit#VerifyCustomTokenResponse".
      idToken?:
        type: string
        description: The GITKit token for authenticated user.
      refreshToken?:
        type: string
        description: If idToken is STS id token, then this field will be refresh token.
    description: Response from verifying a custom token
  VerifyPasswordResponse:
    type: object
    properties:
      expiresIn?:
        type: integer
        format: int64
        description: If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
      photoUrl?:
        type: string
        description: The URI of the user's photo at IdP
      oauthAccessToken?:
        type: string
        description: The OAuth2 access token.
      displayName?:
        type: string
        description: The name of the user.
      kind?:
        type: string
        default: identitytoolkit#VerifyPasswordResponse
        description: The fixed string "identitytoolkit#VerifyPasswordResponse".
      idToken?:
        type: string
        description: The GITKit token for authenticated user.
      oauthAuthorizationCode?:
        type: string
        description: The OAuth2 authorization code.
      oauthExpireIn?:
        type: integer
        format: int32
        description: The lifetime in seconds of the OAuth2 access token.
      registered?:
        type: boolean
        description: Whether the email is registered.
      localId?:
        type: string
        description: The RP local ID if it's already been mapped to the IdP account identified by the federated ID.
      email?:
        type: string
        description: 'The email returned by the IdP. NOTE: The federated login user
          may not own the email.'
      refreshToken?:
        type: string
        description: If idToken is STS id token, then this field will be refresh token.
    description: Request of verifying the password.
/resetPassword:
  post:
    description: Reset password for a user.
    displayName: ResetPassword Relyingparty
    is:
    - hasParameters
    body:
      application/json: IdentitytoolkitRelyingpartyResetPasswordRequest
    responses:
      200:
        body:
          application/json: ResetPasswordResponse
/verifyPassword:
  post:
    description: Verifies the user entered password.
    displayName: VerifyPassword Relyingparty
    is:
    - hasParameters
    body:
      application/json: IdentitytoolkitRelyingpartyVerifyPasswordRequest
    responses:
      200:
        body:
          application/json: VerifyPasswordResponse
/verifyCustomToken:
  post:
    description: Verifies the developer asserted ID token.
    displayName: VerifyCustomToken Relyingparty
    is:
    - hasParameters
    body:
      application/json: IdentitytoolkitRelyingpartyVerifyCustomTokenRequest
    responses:
      200:
        body:
          application/json: VerifyCustomTokenResponse
/downloadAccount:
  post:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/firebase
    description: Batch download user accounts.
    displayName: DownloadAccount Relyingparty
    is:
    - hasParameters
    body:
      application/json: IdentitytoolkitRelyingpartyDownloadAccountRequest
    responses:
      200:
        body:
          application/json: DownloadAccountResponse
/getProjectConfig:
  get:
    description: Get project configuration.
    displayName: GetProjectConfig Relyingparty
    is:
    - hasParameters
    queryParameters:
      delegatedProjectNumber?:
        type: string
        description: Delegated GCP project number of the request.
      projectNumber?:
        type: string
        description: GCP project number of the request.
    responses:
      200:
        body:
          application/json: IdentitytoolkitRelyingpartyGetProjectConfigResponse
/getOobConfirmationCode:
  post:
    description: Get a code for user action confirmation.
    displayName: GetOobConfirmationCode Relyingparty
    is:
    - hasParameters
    body:
      application/json: Relyingparty
    responses:
      200:
        body:
          application/json: GetOobConfirmationCodeResponse
/setAccountInfo:
  post:
    description: Set account info for a user.
    displayName: SetAccountInfo Relyingparty
    is:
    - hasParameters
    body:
      application/json: IdentitytoolkitRelyingpartySetAccountInfoRequest
    responses:
      200:
        body:
          application/json: SetAccountInfoResponse
/verifyAssertion:
  post:
    description: Verifies the assertion returned by the IdP.
    displayName: VerifyAssertion Relyingparty
    is:
    - hasParameters
    body:
      application/json: IdentitytoolkitRelyingpartyVerifyAssertionRequest
    responses:
      200:
        body:
          application/json: VerifyAssertionResponse
/uploadAccount:
  post:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/firebase
    description: Batch upload existing user accounts.
    displayName: UploadAccount Relyingparty
    is:
    - hasParameters
    body:
      application/json: IdentitytoolkitRelyingpartyUploadAccountRequest
    responses:
      200:
        body:
          application/json: UploadAccountResponse
/publicKeys:
  get:
    description: Get token signing public key.
    displayName: GetPublicKeys Relyingparty
    is:
    - hasParameters
    responses:
      200:
        body:
          application/json: IdentitytoolkitRelyingpartyGetPublicKeysResponse
/getAccountInfo:
  post:
    description: Returns the account info.
    displayName: GetAccountInfo Relyingparty
    is:
    - hasParameters
    body:
      application/json: IdentitytoolkitRelyingpartyGetAccountInfoRequest
    responses:
      200:
        body:
          application/json: GetAccountInfoResponse
/createAuthUri:
  post:
    description: Creates the URI used by the IdP to authenticate the user.
    displayName: CreateAuthUri Relyingparty
    is:
    - hasParameters
    body:
      application/json: IdentitytoolkitRelyingpartyCreateAuthUriRequest
    responses:
      200:
        body:
          application/json: CreateAuthUriResponse
/signupNewUser:
  post:
    description: Signup new user.
    displayName: SignupNewUser Relyingparty
    is:
    - hasParameters
    body:
      application/json: IdentitytoolkitRelyingpartySignupNewUserRequest
    responses:
      200:
        body:
          application/json: SignupNewUserResponse
/setProjectConfig:
  post:
    description: Set project configuration.
    displayName: SetProjectConfig Relyingparty
    is:
    - hasParameters
    body:
      application/json: IdentitytoolkitRelyingpartySetProjectConfigRequest
    responses:
      200:
        body:
          application/json: IdentitytoolkitRelyingpartySetProjectConfigResponse
/deleteAccount:
  post:
    description: Delete user account.
    displayName: DeleteAccount Relyingparty
    is:
    - hasParameters
    body:
      application/json: IdentitytoolkitRelyingpartyDeleteAccountRequest
    responses:
      200:
        body:
          application/json: DeleteAccountResponse
/getRecaptchaParam:
  get:
    description: Get recaptcha secure param.
    displayName: GetRecaptchaParam Relyingparty
    is:
    - hasParameters
    responses:
      200:
        body:
          application/json: GetRecaptchaParamResponse
/signOutUser:
  post:
    description: Sign out user.
    displayName: SignOutUser Relyingparty
    is:
    - hasParameters
    body:
      application/json: IdentitytoolkitRelyingpartySignOutUserRequest
    responses:
      200:
        body:
          application/json: IdentitytoolkitRelyingpartySignOutUserResponse
