#%RAML 1.0
title: Google Cloud Natural Language API
version: v1beta1
baseUri: https://language.googleapis.com/
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
(commons.Links):
- title: Developer Documentation
  url: https://cloud.google.com/natural-language/
  role: documentation
(commons.Icons):
- url: http://www.google.com/images/icons/product/search-32.gif
  name: x32
- url: http://www.google.com/images/icons/product/search-16.gif
  name: x16
(commons.Id): language:v1beta1
securitySchemes:
  oath2:
    type: OAuth 2.0
    description: Google Oath2.0 authorization. Detailed documentation can be found at https://developers.google.com/identity/protocols/OAuth2
    settings:
      authorizationGrants:
      - authorization_code
      - implicit
      authorizationUri: https://accounts.google.com/o/oauth2/v2/auth
      accessTokenUri: https://accounts.google.com/o/oauth2/v2/auth
      scopes:
      - https://www.googleapis.com/auth/cloud-platform
traits:
  hasParameters:
    queryParameters:
      quotaUser?:
        type: string
        description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      pp?:
        type: boolean
        default: true
        description: Pretty-print response.
      prettyPrint?:
        type: boolean
        default: true
        description: Returns response with indentations and line breaks.
      $.xgafv?:
        type: string
        description: V1 error format.
        (commons.EnumDescriptions):
        - v1 error format
        - v2 error format
        enum:
        - '1'
        - '2'
      upload_protocol?:
        type: string
        description: Upload protocol for media (e.g. "raw", "multipart").
      uploadType?:
        type: string
        description: Legacy upload protocol for media (e.g. "media", "multipart").
      callback?:
        type: string
        description: JSONP
      fields?:
        type: string
        description: Selector specifying which fields to include in a partial response.
securedBy:
  oath2: 
types:
  AnalyzeEntitiesRequest:
    type: object
    properties:
      document?: Document
      encodingType?:
        type: string
        description: The encoding type used by the API to calculate offsets.
        enum:
        - NONE
        - UTF8
        - UTF16
        - UTF32
    description: The entity analysis request message.
  AnalyzeEntitiesResponse:
    type: object
    properties:
      entities?:
        type: array
        description: The recognized entities in the input document.
        items: Entity
      language?:
        type: string
        description: |-
          The language of the text, which will be the same as the language specified
          in the request or, if not specified, the automatically-detected language.
          See Document.language field for more details.
    description: The entity analysis response message.
  AnalyzeSentimentRequest:
    type: object
    properties:
      document?: Document
    description: The sentiment analysis request message.
  AnalyzeSentimentResponse:
    type: object
    properties:
      documentSentiment?: Sentiment
      language?:
        type: string
        description: |-
          The language of the text, which will be the same as the language specified
          in the request or, if not specified, the automatically-detected language.
    description: The sentiment analysis response message.
  AnnotateTextRequest:
    type: object
    properties:
      features?: Features
      document?: Document
      encodingType?:
        type: string
        description: The encoding type used by the API to calculate offsets.
        enum:
        - NONE
        - UTF8
        - UTF16
        - UTF32
    description: |-
      The request message for the text annotation API, which can perform multiple
      analysis types (sentiment, entities, and syntax) in one call.
  AnnotateTextResponse:
    type: object
    properties:
      entities?:
        type: array
        description: |-
          Entities, along with their semantic information, in the input document.
          Populated if the user enables
          AnnotateTextRequest.Features.extract_entities.
        items: Entity
      sentences?:
        type: array
        description: |-
          Sentences in the input document. Populated if the user enables
          AnnotateTextRequest.Features.extract_syntax.
        items: Sentence
      documentSentiment?: Sentiment
      language?:
        type: string
        description: |-
          The language of the text, which will be the same as the language specified
          in the request or, if not specified, the automatically-detected language.
          See Document.language field for more details.
      tokens?:
        type: array
        description: |-
          Tokens, along with their syntactic information, in the input document.
          Populated if the user enables
          AnnotateTextRequest.Features.extract_syntax.
        items: Token
    description: The text annotations response message.
  DependencyEdge:
    type: object
    properties:
      label?:
        type: string
        description: The parse label for the token.
        enum:
        - UNKNOWN
        - ABBREV
        - ACOMP
        - ADVCL
        - ADVMOD
        - AMOD
        - APPOS
        - ATTR
        - AUX
        - AUXPASS
        - CC
        - CCOMP
        - CONJ
        - CSUBJ
        - CSUBJPASS
        - DEP
        - DET
        - DISCOURSE
        - DOBJ
        - EXPL
        - GOESWITH
        - IOBJ
        - MARK
        - MWE
        - MWV
        - NEG
        - NN
        - NPADVMOD
        - NSUBJ
        - NSUBJPASS
        - NUM
        - NUMBER
        - P
        - PARATAXIS
        - PARTMOD
        - PCOMP
        - POBJ
        - POSS
        - POSTNEG
        - PRECOMP
        - PRECONJ
        - PREDET
        - PREF
        - PREP
        - PRONL
        - PRT
        - PS
        - QUANTMOD
        - RCMOD
        - RCMODREL
        - RDROP
        - REF
        - REMNANT
        - REPARANDUM
        - ROOT
        - SNUM
        - SUFF
        - TMOD
        - TOPIC
        - VMOD
        - VOCATIVE
        - XCOMP
        - SUFFIX
        - TITLE
        - ADVPHMOD
        - AUXCAUS
        - AUXVV
        - DTMOD
        - FOREIGN
        - KW
        - LIST
        - NOMC
        - NOMCSUBJ
        - NOMCSUBJPASS
        - NUMC
        - COP
        - DISLOCATED
      headTokenIndex?:
        type: integer
        format: int32
        description: |-
          Represents the head of this token in the dependency tree.
          This is the index of the token which has an arc going to this token.
          The index is the position of the token in the array of tokens returned
          by the API method. If this token is a root token, then the
          `head_token_index` is its own index.
    description: Represents dependency parse tree information for a token.
  Document:
    type: object
    properties:
      gcsContentUri?:
        type: string
        description: The Google Cloud Storage URI where the file content is located.
      language?:
        type: string
        description: |-
          The language of the document (if not specified, the language is
          automatically detected). Both ISO and BCP-47 language codes are
          accepted.<br>
          **Current Language Restrictions:**

           * Only English, Spanish, and Japanese textual content
             are supported, with the following additional restriction:
             * `analyzeSentiment` only supports English text.
          If the language (either specified by the caller or automatically detected)
          is not supported by the called API method, an `INVALID_ARGUMENT` error
          is returned.
      type?:
        type: string
        description: |-
          Required. If the type is not set or is `TYPE_UNSPECIFIED`,
          returns an `INVALID_ARGUMENT` error.
        enum:
        - TYPE_UNSPECIFIED
        - PLAIN_TEXT
        - HTML
      content?:
        type: string
        description: The content of the input in string format.
    description: |-
      ################################################################ #

      Represents the input to API methods.
  Entity:
    type: object
    properties:
      salience?:
        type: number
        format: float
        description: |-
          The salience score associated with the entity in the [0, 1.0] range.

          The salience score for an entity provides information about the
          importance or centrality of that entity to the entire document text.
          Scores closer to 0 are less salient, while scores closer to 1.0 are highly
          salient.
      metadata?:
        type: object
        description: |-
          Metadata associated with the entity.

          Currently, only Wikipedia URLs are provided, if available.
          The associated key is "wikipedia_url".
      mentions?:
        type: array
        description: |-
          The mentions of this entity in the input document. The API currently
          supports proper noun mentions.
        items: EntityMention
      name?:
        type: string
        description: The representative name for the entity.
      type?:
        type: string
        description: The entity type.
        enum:
        - UNKNOWN
        - PERSON
        - LOCATION
        - ORGANIZATION
        - EVENT
        - WORK_OF_ART
        - CONSUMER_GOOD
        - OTHER
    description: |-
      Represents a phrase in the text that is a known entity, such as
      a person, an organization, or location. The API associates information, such
      as salience and mentions, with entities.
  EntityMention:
    type: object
    properties:
      text?: TextSpan
    description: |-
      Represents a mention for an entity in the text. Currently, proper noun
      mentions are supported.
  Features:
    type: object
    properties:
      extractEntities?:
        type: boolean
        description: Extract entities.
      extractSyntax?:
        type: boolean
        description: Extract syntax information.
      extractDocumentSentiment?:
        type: boolean
        description: Extract document-level sentiment.
    description: |-
      All available features for sentiment, syntax, and semantic analysis.
      Setting each one to true will enable that specific analysis for the input.
  PartOfSpeech:
    type: object
    properties:
      tag?:
        type: string
        description: The part of speech tag.
        enum:
        - UNKNOWN
        - ADJ
        - ADP
        - ADV
        - CONJ
        - DET
        - NOUN
        - NUM
        - PRON
        - PRT
        - PUNCT
        - VERB
        - X
        - AFFIX
    description: Represents part of speech information for a token.
  Sentence:
    type: object
    properties:
      text?: TextSpan
    description: Represents a sentence in the input document.
  Sentiment:
    type: object
    properties:
      magnitude?:
        type: number
        format: float
        description: |-
          A non-negative number in the [0, +inf) range, which represents
          the absolute magnitude of sentiment regardless of polarity (positive or
          negative).
      polarity?:
        type: number
        format: float
        description: |-
          Polarity of the sentiment in the [-1.0, 1.0] range. Larger numbers
          represent more positive sentiments.  This field is being deprecated in
          favor of score. Please refer to our documentation at
          https://cloud.google.com/natural-language/docs for more information.
    description: |-
      Represents the feeling associated with the entire text or entities in
      the text.
  Status:
    type: object
    properties:
      code?:
        type: integer
        format: int32
        description: The status code, which should be an enum value of google.rpc.Code.
      details?:
        type: array
        description: |-
          A list of messages that carry the error details.  There will be a
          common set of message types for APIs to use.
        items:
          type: object
      message?:
        type: string
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          google.rpc.Status.details field, or localized by the client.
    description: |-
      The `Status` type defines a logical error model that is suitable for different
      programming environments, including REST APIs and RPC APIs. It is used by
      [gRPC](https://github.com/grpc). The error model is designed to be:

      - Simple to use and understand for most users
      - Flexible enough to meet unexpected needs

      # Overview

      The `Status` message contains three pieces of data: error code, error message,
      and error details. The error code should be an enum value of
      google.rpc.Code, but it may accept additional error codes if needed.  The
      error message should be a developer-facing English message that helps
      developers *understand* and *resolve* the error. If a localized user-facing
      error message is needed, put the localized message in the error details or
      localize it in the client. The optional error details may contain arbitrary
      information about the error. There is a predefined set of error detail types
      in the package `google.rpc` which can be used for common error conditions.

      # Language mapping

      The `Status` message is the logical representation of the error model, but it
      is not necessarily the actual wire format. When the `Status` message is
      exposed in different client libraries and different wire protocols, it can be
      mapped differently. For example, it will likely be mapped to some exceptions
      in Java, but more likely mapped to some error codes in C.

      # Other uses

      The error model and the `Status` message can be used in a variety of
      environments, either with or without APIs, to provide a
      consistent developer experience across different environments.

      Example uses of this error model include:

      - Partial errors. If a service needs to return partial errors to the client,
          it may embed the `Status` in the normal response to indicate the partial
          errors.

      - Workflow errors. A typical workflow has multiple steps. Each step may
          have a `Status` message for error reporting purpose.

      - Batch operations. If a client uses batch request and batch response, the
          `Status` message should be used directly inside batch response, one for
          each error sub-response.

      - Asynchronous operations. If an API call embeds asynchronous operation
          results in its response, the status of those operations should be
          represented directly using the `Status` message.

      - Logging. If some API errors are stored in logs, the message `Status` could
          be used directly after any stripping needed for security/privacy reasons.
  TextSpan:
    type: object
    properties:
      content?:
        type: string
        description: The content of the output text.
      beginOffset?:
        type: integer
        format: int32
        description: |-
          The API calculates the beginning offset of the content in the original
          document according to the EncodingType specified in the API request.
    description: Represents an output piece of text.
  Token:
    type: object
    properties:
      partOfSpeech?: PartOfSpeech
      dependencyEdge?: DependencyEdge
      lemma?:
        type: string
        description: |-
          [Lemma](https://en.wikipedia.org/wiki/Lemma_(morphology))
          of the token.
      text?: TextSpan
    description: Represents the smallest syntactic building block of the text.
/v1beta1:
  /documents:analyzeEntities:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/cloud-platform
      description: |-
        Finds named entities (currently finds proper names) in the text,
        entity types, salience, mentions for each entity, and other properties.
      displayName: Analyze Entities
      is:
      - hasParameters
      body:
        application/json: AnalyzeEntitiesRequest
      responses:
        200:
          body:
            application/json: AnalyzeEntitiesResponse
      (commons.Id): language.documents.analyzeEntities
      (commons.LogicalStructure):
      - Documents
  /documents:annotateText:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/cloud-platform
      description: |-
        A convenience method that provides all the features that analyzeSentiment,
        analyzeEntities, and analyzeSyntax provide in one call.
      displayName: Annotate Text
      is:
      - hasParameters
      body:
        application/json: AnnotateTextRequest
      responses:
        200:
          body:
            application/json: AnnotateTextResponse
      (commons.Id): language.documents.annotateText
      (commons.LogicalStructure):
      - Documents
  /documents:analyzeSentiment:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/cloud-platform
      description: Analyzes the sentiment of the provided text.
      displayName: Analyze Sentiment
      is:
      - hasParameters
      body:
        application/json: AnalyzeSentimentRequest
      responses:
        200:
          body:
            application/json: AnalyzeSentimentResponse
      (commons.Id): language.documents.analyzeSentiment
      (commons.LogicalStructure):
      - Documents
