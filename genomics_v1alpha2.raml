#%RAML 1.0
title: Genomics API
version: v1alpha2
baseUri: https://genomics.googleapis.com/
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
(commons.Links):
- title: Developer Documentation
  url: https://cloud.google.com/genomics/
  role: documentation
(commons.Icons):
- url: http://www.google.com/images/icons/product/search-32.gif
  name: x32
- url: http://www.google.com/images/icons/product/search-16.gif
  name: x16
(commons.Id): genomics:v1alpha2
securitySchemes:
  oath2:
    type: OAuth 2.0
    description: Google Oath2.0 authorization. Detailed documentation can be found at https://developers.google.com/identity/protocols/OAuth2
    settings:
      authorizationGrants:
      - authorization_code
      - implicit
      authorizationUri: https://accounts.google.com/o/oauth2/v2/auth
      accessTokenUri: https://accounts.google.com/o/oauth2/v2/auth
      scopes:
      - https://www.googleapis.com/auth/genomics
      - https://www.googleapis.com/auth/compute
      - https://www.googleapis.com/auth/cloud-platform
traits:
  hasParameters:
    queryParameters:
      pp?:
        type: boolean
        default: true
        description: Pretty-print response.
      quotaUser?:
        type: string
        description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      prettyPrint?:
        type: boolean
        default: true
        description: Returns response with indentations and line breaks.
      upload_protocol?:
        type: string
        description: Upload protocol for media (e.g. "raw", "multipart").
      $.xgafv?:
        type: string
        description: V1 error format.
      uploadType?:
        type: string
        description: Legacy upload protocol for media (e.g. "media", "multipart").
      callback?:
        type: string
        description: JSONP
      fields?:
        type: string
        description: Selector specifying which fields to include in a partial response.
securedBy:
  oath2: 
types:
  CancelOperationRequest:
    type: object
    description: The request message for Operations.CancelOperation.
  ComputeEngine:
    type: object
    properties:
      instanceName?:
        type: string
        description: The instance on which the operation is running.
      zone?:
        type: string
        description: The availability zone in which the instance resides.
      diskNames?:
        type: array
        description: The names of the disks that were created for this pipeline.
        items:
          type: string
      machineType?:
        type: string
        description: The machine type of the instance.
    description: Describes a Compute Engine resource that is being managed by a running pipeline.
  ControllerConfig:
    type: object
    properties:
      image?:
        type: string
      disks?:
        type: object
      cmd?:
        type: string
      vars?:
        type: object
      gcsSinks?:
        type: object
      gcsLogPath?:
        type: string
      machineType?:
        type: string
      gcsSources?:
        type: object
    description: Stores the information that the controller will fetch from the server in order to run. Should only be used by VMs created by the Pipelines Service and not by end users.
  Disk:
    type: object
    properties:
      sizeGb?:
        type: integer
        format: int32
        description: The size of the disk. Defaults to 500 (GB). This field is not applicable for local SSD.
      mountPoint?:
        type: string
        description: Required at create time and cannot be overridden at run time. Specifies the path in the docker container where files on this disk should be located. For example, if `mountPoint` is `/mnt/disk`, and the parameter has `localPath` `inputs/file.txt`, the docker container can access the data at `/mnt/disk/inputs/file.txt`.
      name?:
        type: string
        description: Required. The name of the disk that can be used in the pipeline parameters. Must be 1 - 63 characters. The name "boot" is reserved for system use.
      autoDelete?:
        type: boolean
        description: Specifies whether or not to delete the disk when the pipeline completes. This field is applicable only for newly created disks. See https://cloud.google.com/compute/docs/reference/latest/instances#resource for more details. By default, `autoDelete` is `false`. `autoDelete` will be enabled if set to `true` at create time or run time.
      readOnly?:
        type: boolean
        description: Specifies how a sourced-base persistent disk will be mounted. See https://cloud.google.com/compute/docs/disks/persistent-disks#use_multi_instances for more details. Can only be set at create time.
      source?:
        type: string
        description: The full or partial URL of the persistent disk to attach. See https://cloud.google.com/compute/docs/reference/latest/instances#resource and https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots for more details.
      type?:
        type: string
        description: Required. The type of the disk to create.
        enum:
        - TYPE_UNSPECIFIED
        - PERSISTENT_HDD
        - PERSISTENT_SSD
        - LOCAL_SSD
    description: A Google Compute Engine disk resource specification.
  DockerExecutor:
    type: object
    properties:
      imageName?:
        type: string
        description: Required. Image name from either Docker Hub or Google Container Registry. Users that run pipelines must have READ access to the image.
      cmd?:
        type: string
        description: Required. The command or newline delimited script to run. The command string will be executed within a bash shell. If the command exits with a non-zero exit code, output parameter de-localization will be skipped and the pipeline operation's `error` field will be populated. Maximum command string length is 16384.
    description: The Docker execuctor specification.
  Empty:
    type: object
    description: 'A generic empty message that you can re-use to avoid defining duplicated
      empty messages in your APIs. A typical example is to use it as the request or
      the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty)
      returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty
      JSON object `{}`.'
  ImportReadGroupSetsResponse:
    type: object
    properties:
      readGroupSetIds?:
        type: array
        description: IDs of the read group sets that were created.
        items:
          type: string
    description: The read group set import response.
  ImportVariantsResponse:
    type: object
    properties:
      callSetIds?:
        type: array
        description: IDs of the call sets created during the import.
        items:
          type: string
    description: The variant data import response.
  ListOperationsResponse:
    type: object
    properties:
      operations?:
        type: array
        description: A list of operations that matches the specified filter in the request.
        items: Operation
      nextPageToken?:
        type: string
        description: The standard List next-page token.
    description: The response message for Operations.ListOperations.
  ListPipelinesResponse:
    type: object
    properties:
      pipelines?:
        type: array
        description: The matched pipelines.
        items: Pipeline
      nextPageToken?:
        type: string
        description: The token to use to get the next page of results.
    description: The response of ListPipelines. Contains at most `pageSize` pipelines. If it contains `pageSize` pipelines, and more pipelines exist, then `nextPageToken` will be populated and should be used as the `pageToken` argument to a subsequent ListPipelines request.
  LocalCopy:
    type: object
    properties:
      path?:
        type: string
        description: 'Required. The path within the user''s docker container where
          this input should be localized to and from, relative to the specified disk''s
          mount point. For example: file.txt,'
      disk?:
        type: string
        description: Required. The name of the disk where this parameter is located. Can be the name of one of the disks specified in the Resources field, or "boot", which represents the Docker instance's boot disk and has a mount point of `/`.
    description: LocalCopy defines how a remote file should be copied to and from the VM.
  LoggingOptions:
    type: object
    properties:
      gcsPath?:
        type: string
        description: The location in Google Cloud Storage to which the pipeline logs will be copied. Can be specified as a fully qualified directory path, in which case logs will be output with a unique identifier as the filename in that directory, or as a fully specified path, which must end in `.log`, in which case that path will be used, and the user must ensure that logs are not overwritten. Stdout and stderr logs from the run are also generated and output as `-stdout.log` and `-stderr.log`.
    description: The logging options for the pipeline run.
  Operation:
    type: object
    properties:
      metadata?:
        type: object
        description: An OperationMetadata object. This will always be returned with the Operation.
      response?:
        type: object
        description: If importing ReadGroupSets, an ImportReadGroupSetsResponse is returned. If importing Variants, an ImportVariantsResponse is returned. For exports, an empty response is returned.
      name?:
        type: string
        description: 'The server-assigned name, which is only unique within the same
          service that originally returns it. For example: `operations/CJHU7Oi_ChDrveSpBRjfuL-qzoWAgEw`'
      error?: Status
      done?:
        type: boolean
        description: If the value is `false`, it means the operation is still in progress. If true, the operation is completed, and either `error` or `response` is available.
    description: This resource represents a long-running operation that is the result of a network API call.
  OperationEvent:
    type: object
    properties:
      description?:
        type: string
        description: Required description of event.
      startTime?:
        type: string
        description: Optional time of when event started.
      endTime?:
        type: string
        description: Optional time of when event finished. An event can have a start time and no finish time. If an event has a finish time, there must be a start time.
    description: An event that occurred during an Operation.
  OperationMetadata:
    type: object
    properties:
      request?:
        type: object
        description: The original request that started the operation. Note that this will be in current version of the API. If the operation was started with v1beta2 API and a GetOperation is performed on v1 API, a v1 request will be returned.
      clientId?:
        type: string
        description: Optionally provided by the caller when submitting the request that creates the operation.
      createTime?:
        type: string
        description: The time at which the job was submitted to the Genomics service.
      startTime?:
        type: string
        description: The time at which the job began to run.
      endTime?:
        type: string
        description: The time at which the job stopped running.
      projectId?:
        type: string
        description: The Google Cloud Project in which the job is scoped.
      events?:
        type: array
        description: Optional event messages that were generated during the job's execution. This also contains any warnings that were generated during import or export.
        items: OperationEvent
      runtimeMetadata?:
        type: object
        description: Runtime metadata on this Operation.
    description: Metadata describing an Operation.
  Pipeline:
    type: object
    properties:
      name?:
        type: string
        description: Required. A user specified pipeline name that does not have to be unique. This name can be used for filtering Pipelines in ListPipelines.
      description?:
        type: string
        description: User-specified description.
      resources?: PipelineResources
      projectId?:
        type: string
        description: Required. The project in which to create the pipeline. The caller must have WRITE access.
      inputParameters?:
        type: array
        description: Input parameters of the pipeline.
        items: PipelineParameter
      outputParameters?:
        type: array
        description: Output parameters of the pipeline.
        items: PipelineParameter
      docker?: DockerExecutor
      pipelineId?:
        type: string
        description: Unique pipeline id that is generated by the service when CreatePipeline is called. Cannot be specified in the Pipeline used in the CreatePipelineRequest, and will be populated in the response to CreatePipeline and all subsequent Get and List calls. Indicates that the service has registered this pipeline.
    description: The pipeline object. Represents a transformation from a set of input parameters to a set of output parameters. The transformation is defined as a docker image and command to run within that image. Each pipeline is run on a Google Compute Engine VM. A pipeline can be created with the `create` method and then later run with the `run` method, or a pipeline can be defined and run all at once with the `run` method.
  PipelineParameter:
    type: object
    properties:
      localCopy?: LocalCopy
      defaultValue?:
        type: string
        description: The default value for this parameter. Can be overridden at runtime. If `localCopy` is present, then this must be a Google Cloud Storage path beginning with `gs://`.
      name?:
        type: string
        description: Required. Name of the parameter - the pipeline runner uses this string as the key to the input and output maps in RunPipeline.
      description?:
        type: string
        description: Human-readable description.
    description: 'Parameters facilitate setting and delivering data into the pipeline''s
      execution environment. They are defined at create time, with optional defaults,
      and can be overridden at run time. If `localCopy` is unset, then the parameter
      specifies a string that is passed as-is into the pipeline, as the value of the
      environment variable with the given name. A default value can be optionally
      specified at create time. The default can be overridden at run time using the
      inputs map. If no default is given, a value must be supplied at runtime. If
      `localCopy` is defined, then the parameter specifies a data source or sink,
      both in Google Cloud Storage and on the Docker container where the pipeline
      computation is run. The service account associated with the Pipeline (by default
      the project''s Compute Engine service account) must have access to the Google
      Cloud Storage paths. At run time, the Google Cloud Storage paths can be overridden
      if a default was provided at create time, or must be set otherwise. The pipeline
      runner should add a key/value pair to either the inputs or outputs map. The
      indicated data copies will be carried out before/after pipeline execution, just
      as if the corresponding arguments were provided to `gsutil cp`. For example:
      Given the following `PipelineParameter`, specified in the `inputParameters`
      list: ``` {name: "input_file", localCopy: {path: "file.txt", disk: "pd1"}} ```
      where `disk` is defined in the `PipelineResources` object as: ``` {name: "pd1",
      mountPoint: "/mnt/disk/"} ``` We create a disk named `pd1`, mount it on the
      host VM, and map `/mnt/pd1` to `/mnt/disk` in the docker container. At runtime,
      an entry for `input_file` would be required in the inputs map, such as: ```
      inputs["input_file"] = "gs://my-bucket/bar.txt" ``` This would generate the
      following gsutil call: ``` gsutil cp gs://my-bucket/bar.txt /mnt/pd1/file.txt
      ``` The file `/mnt/pd1/file.txt` maps to `/mnt/disk/file.txt` in the Docker
      container. Acceptable paths are:   Google Cloud storage pathLocal path   filefile
      globdirectory   For outputs, the direction of the copy is reversed: ``` gsutil
      cp /mnt/disk/file.txt gs://my-bucket/bar.txt ``` Acceptable paths are:   Local
      pathGoogle Cloud Storage path   filefile  file directory - directory must already
      exist   glob directory - directory will be created if it doesn''t exist   One
      restriction due to docker limitations, is that for outputs that are found on
      the boot disk, the local path cannot be a glob and must be a file.'
  PipelineResources:
    type: object
    properties:
      minimumRamGb?:
        type: number
        format: double
        description: The minimum amount of RAM to use. Defaults to 3.75 (GB)
      preemptible?:
        type: boolean
        description: Whether to use preemptible VMs. Defaults to `false`. In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time.
      disks?:
        type: array
        description: Disks to attach.
        items: Disk
      noAddress?:
        type: boolean
        description: 'Whether to assign an external IP to the instance. This is an
          experimental feature that may go away. Defaults to false. Corresponds to
          `--no_address` flag for [gcloud compute instances create] (https://cloud.google.com/sdk/gcloud/reference/compute/instances/create).
          In order to use this, must be true for both create time and run time. Cannot
          be true at run time if false at create time. If you need to ssh into a private
          IP VM for debugging, you can ssh to a public VM and then ssh into the private
          VM''s Internal IP. If noAddress is set, this pipeline run may only load
          docker images from Google Container Registry and not Docker Hub. ** Note:
          To use this option, your project must be in Google Access for Private IPs
          Early Access Program.**'
      zones?:
        type: array
        description: List of Google Compute Engine availability zones to which resource creation will restricted. If empty, any zone may be chosen.
        items:
          type: string
      bootDiskSizeGb?:
        type: integer
        format: int32
        description: The size of the boot disk. Defaults to 10 (GB).
      minimumCpuCores?:
        type: integer
        format: int32
        description: The minimum number of cores to use. Defaults to 1.
    description: The system resources for the pipeline run.
  RepeatedString:
    type: object
    properties:
      values?:
        type: array
        items:
          type: string
  RunPipelineArgs:
    type: object
    properties:
      outputs?:
        type: object
        description: Pipeline output arguments; keys are defined in the pipeline documentation. All output parameters of without default values must be specified. If parameters with defaults are specified here, the defaults will be overridden.
      clientId?:
        type: string
        description: Client-specified pipeline operation identifier.
      keepVmAliveOnFailureDuration?:
        type: string
        description: How long to keep the VM up after a failure (for example docker command failed, copying input or output files failed, etc). While the VM is up, one can ssh into the VM to debug. Default is 0; maximum allowed value is 1 day.
      inputs?:
        type: object
        description: Pipeline input arguments; keys are defined in the pipeline documentation. All input parameters that do not have default values must be specified. If parameters with defaults are specified here, the defaults will be overridden.
      resources?: PipelineResources
      logging?: LoggingOptions
      serviceAccount?: ServiceAccount
      projectId?:
        type: string
        description: Required. The project in which to run the pipeline. The caller must have WRITER access to all Google Cloud services and resources (e.g. Google Compute Engine) will be used.
    description: The pipeline run arguments.
  RunPipelineRequest:
    type: object
    properties:
      pipelineArgs?: RunPipelineArgs
      pipelineId?:
        type: string
        description: The already created pipeline to run.
      ephemeralPipeline?: Pipeline
    description: The request to run a pipeline. If `pipelineId` is specified, it refers to a saved pipeline created with CreatePipeline and set as the `pipelineId` of the returned Pipeline object. If `ephemeralPipeline` is specified, that pipeline is run once with the given args and not saved. It is an error to specify both `pipelineId` and `ephemeralPipeline`. `pipelineArgs` must be specified.
  RuntimeMetadata:
    type: object
    properties:
      computeEngine?: ComputeEngine
    description: Runtime metadata that will be populated in the runtimeMetadata field of the Operation associated with a RunPipeline execution.
  ServiceAccount:
    type: object
    properties:
      scopes?:
        type: array
        description: 'List of scopes to be enabled for this service account on the
          VM. The following scopes are automatically included: * https://www.googleapis.com/auth/compute
          * https://www.googleapis.com/auth/devstorage.full_control * https://www.googleapis.com/auth/genomics
          * https://www.googleapis.com/auth/logging.write * https://www.googleapis.com/auth/monitoring.write'
        items:
          type: string
      email?:
        type: string
        description: Email address of the service account. Defaults to `default`, which uses the compute service account associated with the project.
    description: A Google Cloud Service Account.
  SetOperationStatusRequest:
    type: object
    properties:
      timestampEvents?: TimestampEvent[]
      validationToken?:
        type: integer
        format: int64
      errorMessage?:
        type: string
      operationId?:
        type: string
      errorCode?:
        type: string
        enum:
        - OK
        - CANCELLED
        - UNKNOWN
        - INVALID_ARGUMENT
        - DEADLINE_EXCEEDED
        - NOT_FOUND
        - ALREADY_EXISTS
        - PERMISSION_DENIED
        - UNAUTHENTICATED
        - RESOURCE_EXHAUSTED
        - FAILED_PRECONDITION
        - ABORTED
        - OUT_OF_RANGE
        - UNIMPLEMENTED
        - INTERNAL
        - UNAVAILABLE
        - DATA_LOSS
    description: Request to set operation status. Should only be used by VMs created by the Pipelines Service and not by end users.
  Status:
    type: object
    properties:
      code?:
        type: integer
        format: int32
        description: The status code, which should be an enum value of google.rpc.Code.
      details?:
        type: array
        description: A list of messages that carry the error details. There will be a common set of message types for APIs to use.
        items:
          type: object
      message?:
        type: string
        description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
    description: 'The `Status` type defines a logical error model that is suitable
      for different programming environments, including REST APIs and RPC APIs. It
      is used by [gRPC](https://github.com/grpc). The error model is designed to be:
      - Simple to use and understand for most users - Flexible enough to meet unexpected
      needs # Overview The `Status` message contains three pieces of data: error code,
      error message, and error details. The error code should be an enum value of
      google.rpc.Code, but it may accept additional error codes if needed. The error
      message should be a developer-facing English message that helps developers *understand*
      and *resolve* the error. If a localized user-facing error message is needed,
      put the localized message in the error details or localize it in the client.
      The optional error details may contain arbitrary information about the error.
      There is a predefined set of error detail types in the package `google.rpc`
      which can be used for common error conditions. # Language mapping The `Status`
      message is the logical representation of the error model, but it is not necessarily
      the actual wire format. When the `Status` message is exposed in different client
      libraries and different wire protocols, it can be mapped differently. For example,
      it will likely be mapped to some exceptions in Java, but more likely mapped
      to some error codes in C. # Other uses The error model and the `Status` message
      can be used in a variety of environments, either with or without APIs, to provide
      a consistent developer experience across different environments. Example uses
      of this error model include: - Partial errors. If a service needs to return
      partial errors to the client, it may embed the `Status` in the normal response
      to indicate the partial errors. - Workflow errors. A typical workflow has multiple
      steps. Each step may have a `Status` message for error reporting purpose. -
      Batch operations. If a client uses batch request and batch response, the `Status`
      message should be used directly inside batch response, one for each error sub-response.
      - Asynchronous operations. If an API call embeds asynchronous operation results
      in its response, the status of those operations should be represented directly
      using the `Status` message. - Logging. If some API errors are stored in logs,
      the message `Status` could be used directly after any stripping needed for security/privacy
      reasons.'
  TimestampEvent:
    type: object
    properties:
      description?:
        type: string
        description: String indicating the type of event
      timestamp?:
        type: string
        description: The time this event occured.
    description: Stores the list of events and times they occured for major events in job execution.
/v1alpha2:
  /{name}:cancel:
    uriParameters:
      name:
        type: string
        pattern: ^operations/.+$
        description: The name of the operation resource to be cancelled.
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/cloud-platform
          - https://www.googleapis.com/auth/genomics
      description: Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients may use Operations.GetOperation or Operations.ListOperations to check whether the cancellation succeeded or the operation completed despite cancellation.
      displayName: Cancel Operations
      is:
      - hasParameters
      body:
        application/json: CancelOperationRequest
      responses:
        200:
          body:
            application/json: Empty
  /{name}:
    uriParameters:
      name:
        type: string
        pattern: ^operations/.+$
        description: The name of the operation resource.
    get:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/cloud-platform
          - https://www.googleapis.com/auth/genomics
      description: Lists operations that match the specified filter in the request.
      displayName: List Operations
      is:
      - hasParameters
      - hasParameters
      queryParameters:
        filter?:
          type: string
          description: 'A string for filtering Operations. The following filter fields
            are supported: * projectId: Required. Corresponds to OperationMetadata.projectId.
            * createTime: The time this job was created, in seconds from the [epoch](http://en.wikipedia.org/wiki/Unix_time).
            Can use `>=` and/or `= 1432140000` * `projectId = my-project AND createTime
            >= 1432140000 AND createTime <= 1432150000 AND status = RUNNING`'
        pageSize?:
          type: integer
          format: int32
          description: The maximum number of results to return. If unspecified, defaults to 256. The maximum value is 2048.
        pageToken?:
          type: string
          description: The standard list page token.
      responses:
        200:
          body:
            application/json: ListOperationsResponse
  /pipelines:setOperationStatus:
    put:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/cloud-platform
          - https://www.googleapis.com/auth/genomics
      description: Sets status of a given operation. Any new timestamps (as determined by description) are appended to TimestampEvents. Should only be called by VMs created by the Pipelines Service and not by end users.
      displayName: SetOperationStatus Pipelines
      is:
      - hasParameters
      body:
        application/json: SetOperationStatusRequest
      responses:
        200:
          body:
            application/json: Empty
  /pipelines:getControllerConfig:
    get:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/cloud-platform
          - https://www.googleapis.com/auth/genomics
      description: Gets controller configuration information. Should only be called by VMs created by the Pipelines Service and not by end users.
      displayName: GetControllerConfig Pipelines
      is:
      - hasParameters
      queryParameters:
        validationToken?:
          type: integer
          format: int64
        operationId?:
          type: string
          description: The operation to retrieve controller configuration for.
      responses:
        200:
          body:
            application/json: ControllerConfig
  /pipelines:
    /{pipelineId}:
      uriParameters:
        pipelineId:
          type: string
          description: Caller must have READ access to the project in which this pipeline is defined.
      get:
        securedBy:
          oath2:
            scopes:
            - https://www.googleapis.com/auth/cloud-platform
            - https://www.googleapis.com/auth/genomics
        description: Retrieves a pipeline based on ID. Caller must have READ permission to the project.
        displayName: Get Pipelines
        is:
        - hasParameters
        responses:
          200:
            body:
              application/json: Pipeline
      delete:
        securedBy:
          oath2:
            scopes:
            - https://www.googleapis.com/auth/cloud-platform
            - https://www.googleapis.com/auth/genomics
        description: Deletes a pipeline based on ID. Caller must have WRITE permission to the project.
        displayName: Delete Pipelines
        is:
        - hasParameters
        responses:
          200:
            body:
              application/json: Empty
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/cloud-platform
          - https://www.googleapis.com/auth/genomics
      description: Creates a pipeline that can be run later. Create takes a Pipeline that has all fields other than `pipelineId` populated, and then returns the same pipeline with `pipelineId` populated. This id can be used to run the pipeline. Caller must have WRITE permission to the project.
      displayName: Create Pipelines
      is:
      - hasParameters
      body:
        application/json: Pipeline
      responses:
        200:
          body:
            application/json: Pipeline
    get:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/cloud-platform
          - https://www.googleapis.com/auth/genomics
      description: Lists pipelines. Caller must have READ permission to the project.
      displayName: List Pipelines
      is:
      - hasParameters
      queryParameters:
        namePrefix?:
          type: string
          description: Pipelines with names that match this prefix should be returned. If unspecified, all pipelines in the project, up to `pageSize`, will be returned.
        pageSize?:
          type: integer
          format: int32
          description: Number of pipelines to return at once. Defaults to 256, and max is 2048.
        pageToken?:
          type: string
          description: Token to use to indicate where to start getting results. If unspecified, returns the first page of results.
        projectId?:
          type: string
          description: Required. The name of the project to search for pipelines. Caller must have READ access to this project.
      responses:
        200:
          body:
            application/json: ListPipelinesResponse
  /pipelines:run:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/cloud-platform
          - https://www.googleapis.com/auth/compute
          - https://www.googleapis.com/auth/genomics
      description: Runs a pipeline. If `pipelineId` is specified in the request, then run a saved pipeline. If `ephemeralPipeline` is specified, then run that pipeline once without saving a copy. The caller must have READ permission to the project where the pipeline is stored and WRITE permission to the project where the pipeline will be run, as VMs will be created and storage will be used.
      displayName: Run Pipelines
      is:
      - hasParameters
      body:
        application/json: RunPipelineRequest
      responses:
        200:
          body:
            application/json: Operation
