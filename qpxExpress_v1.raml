#%RAML 1.0
title: QPX Express API
version: v1
baseUri: https://www.googleapis.com/qpxExpress/v1/trips/
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
  extras: https://raw.githubusercontent.com/apiregistry/typesExtras/master/typeExtras.raml
(commons.Links):
- title: Developer Documentation
  url: http://developers.google.com/qpx-express
  role: documentation
(commons.Icons):
- url: http://www.google.com/images/icons/product/search-32.gif
  name: x32
- url: http://www.google.com/images/icons/product/search-16.gif
  name: x16
(commons.Id): qpxExpress:v1
traits:
  hasParameters:
    queryParameters:
      quotaUser?:
        type: string
        description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
      prettyPrint?:
        type: boolean
        default: true
        description: Returns response with indentations and line breaks.
      userIp?:
        type: string
        description: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
      fields?:
        type: string
        description: Selector specifying which fields to include in a partial response.
types:
  AircraftData:
    type: object
    properties:
      code?:
        type: string
        description: The aircraft code. For example, for a Boeing 777 the code would be 777.
      kind?:
        type: string
        default: qpxexpress#aircraftData
        description: 'Identifies this as an aircraftData object. Value: the fixed
          string qpxexpress#aircraftData'
      name?:
        type: string
        description: The name of an aircraft, for example Boeing 777.
    description: The make, model, and type of an aircraft.
  AirportData:
    type: object
    properties:
      code?:
        type: string
        description: An airport's code. For example, for Boston Logan airport, this is BOS.
      city?:
        type: string
        description: The city code an airport is located in. For example, for JFK airport, this is NYC.
      kind?:
        type: string
        default: qpxexpress#airportData
        description: 'Identifies this as an airport object. Value: the fixed string
          qpxexpress#airportData.'
      name?:
        type: string
        description: The name of an airport. For example, for airport BOS the name is "Boston Logan International".
    description: An airport.
  BagDescriptor:
    type: object
    properties:
      kind?:
        type: string
        default: qpxexpress#bagDescriptor
        description: 'Identifies this as a baggage object. Value: the fixed string
          qpxexpress#bagDescriptor.'
      count?:
        type: integer
        format: int32
        description: How many of this type of bag will be checked on this flight.
      description?:
        type: array
        description: A description of the baggage.
        items:
          type: string
      subcode?:
        type: string
        description: The standard IATA subcode used to identify this optional service.
      commercialName?:
        type: string
        description: Provides the commercial name for an optional service.
    description: Information about an item of baggage.
  CarrierData:
    type: object
    properties:
      code?:
        type: string
        description: The IATA designator of a carrier (airline, etc). For example, for American Airlines, the code is AA.
      kind?:
        type: string
        default: qpxexpress#carrierData
        description: 'Identifies this as a kind of carrier (ie. an airline, bus line,
          railroad, etc). Value: the fixed string qpxexpress#carrierData.'
      name?:
        type: string
        description: 'The long, full name of a carrier. For example: American Airlines.'
    description: Information about a carrier (ie. an airline, bus line, railroad, etc) that might be useful to display to an end-user.
  CityData:
    type: object
    properties:
      country?:
        type: string
        description: The two-character country code of the country the city is located in. For example, US for the United States of America.
      code?:
        type: string
        description: The IATA character ID of a city. For example, for Boston this is BOS.
      kind?:
        type: string
        default: qpxexpress#cityData
        description: 'Identifies this as a city, typically with one or more airports.
          Value: the fixed string qpxexpress#cityData.'
      name?:
        type: string
        description: 'The full name of a city. An example would be: New York.'
    description: Information about a city that might be useful to an end-user; typically the city of an airport.
  Data:
    type: object
    properties:
      carrier?:
        type: array
        description: The airline carrier of the aircraft flying between an origin and destination. Allowed values are IATA carrier codes.
        items: CarrierData
      city?:
        type: array
        description: The city that is either the origin or destination of part of a trip.
        items: CityData
      kind?:
        type: string
        default: qpxexpress#data
        description: 'Identifies this as QPX Express response resource, including
          a trip''s airport, city, taxes, airline, and aircraft. Value: the fixed
          string qpxexpress#data.'
      aircraft?:
        type: array
        description: The aircraft that is flying between an origin and destination.
        items: AircraftData
      tax?:
        type: array
        description: The taxes due for flying between an origin and a destination.
        items: TaxData
      airport?:
        type: array
        description: The airport of an origin or destination.
        items: AirportData
    description: Detailed information about components found in the solutions of this response, including a trip's airport, city, taxes, airline, and aircraft.
  FareInfo:
    type: object
    properties:
      carrier?:
        type: string
        description: The carrier of the aircraft or other vehicle commuting between two points.
      private?:
        type: boolean
        description: Whether this is a private fare, for example one offered only to select customers rather than the general public.
      kind?:
        type: string
        default: qpxexpress#fareInfo
        description: 'Identifies this as a fare object. Value: the fixed string qpxexpress#fareInfo.'
      origin?:
        type: string
        description: The city code of the city the trip begins at.
      destination?:
        type: string
        description: The city code of the city the trip ends at.
      basisCode?:
        type: string
      id?:
        type: string
        description: A unique identifier of the fare.
    description: Complete information about a fare used in the solution to a low-fare search query. In the airline industry a fare is a price an airline charges for one-way travel between two points. A fare typically contains a carrier code, two city codes, a price, and a fare basis. (A fare basis is a one-to-eight character alphanumeric code used to identify a fare.)
  FlightInfo:
    type: object
    properties:
      number?:
        type: string
        description: The flight number.
      carrier?:
        type: string
    description: A flight is a sequence of legs with the same airline carrier and flight number. (A leg is the smallest unit of travel, in the case of a flight a takeoff immediately followed by a landing at two set points on a particular carrier with a particular flight number.) The naive view is that a flight is scheduled travel of an aircraft between two points, with possibly intermediate stops, but carriers will frequently list flights that require a change of aircraft between legs.
  FreeBaggageAllowance:
    type: object
    properties:
      pieces?:
        type: integer
        format: int32
        description: The number of free pieces of baggage allowed.
      bagDescriptor?:
        type: array
        description: A representation of a type of bag, such as an ATPCo subcode, Commercial Name, or other description.
        items: BagDescriptor
      kilosPerPiece?:
        type: integer
        format: int32
        description: The maximum number of kilos any one piece of baggage may weigh.
      kind?:
        type: string
        default: qpxexpress#freeBaggageAllowance
        description: 'Identifies this as free baggage object, allowed on one segment
          of a trip. Value: the fixed string qpxexpress#freeBaggageAllowance.'
      pounds?:
        type: integer
        format: int32
        description: The number of pounds of free baggage allowed.
      kilos?:
        type: integer
        format: int32
        description: The maximum number of kilos all the free baggage together may weigh.
    description: Information about free baggage allowed on one segment of a trip.
  LegInfo:
    type: object
    properties:
      departureTime?:
        type: string
        description: The scheduled departure time of the leg, local to the point of departure.
      kind?:
        type: string
        default: qpxexpress#legInfo
        description: 'Identifies this as a leg object. A leg is the smallest unit
          of travel, in the case of a flight a takeoff immediately followed by a landing
          at two set points on a particular carrier with a particular flight number.
          Value: the fixed string qpxexpress#legInfo.'
      aircraft?:
        type: string
        description: The aircraft (or bus, ferry, railcar, etc) travelling between the two points of this leg.
      changePlane?:
        type: boolean
        description: Whether you have to change planes following this leg. Only applies to the next leg.
      origin?:
        type: string
        description: The leg origin as a city and airport.
      destination?:
        type: string
        description: The leg destination as a city and airport.
      operatingDisclosure?:
        type: string
        description: Department of Transportation disclosure information on the actual operator of a flight in a code share. (A code share refers to a marketing agreement between two carriers, where one carrier will list in its schedules (and take bookings for) flights that are actually operated by another carrier.)
      secure?:
        type: boolean
        description: Whether passenger information must be furnished to the United States Transportation Security Administration (TSA) prior to departure.
      connectionDuration?:
        type: integer
        format: int32
        description: Duration of a connection following this leg, in minutes.
      duration?:
        type: integer
        format: int32
        description: The scheduled travelling time from the origin to the destination.
      meal?:
        type: string
        description: 'A simple, general description of the meal(s) served on the flight,
          for example: "Hot meal".'
      onTimePerformance?:
        type: integer
        format: int32
        description: In percent, the published on time performance on this leg.
      arrivalTime?:
        type: string
        description: The scheduled time of arrival at the destination of the leg, local to the point of arrival.
      destinationTerminal?:
        type: string
        description: The terminal the flight is scheduled to arrive at.
      id?:
        type: string
        description: An identifier that uniquely identifies this leg in the solution.
      mileage?:
        type: integer
        format: int32
        description: The number of miles in this leg.
      originTerminal?:
        type: string
        description: The terminal the flight is scheduled to depart from.
    description: Information about a leg. (A leg is the smallest unit of travel, in the case of a flight a takeoff immediately followed by a landing at two set points on a particular carrier with a particular flight number.)
  PassengerCounts:
    type: object
    properties:
      adultCount?:
        type: integer
        format: int32
        description: The number of passengers that are adults.
      infantInSeatCount?:
        type: integer
        format: int32
        description: The number of passengers that are infants each assigned a seat.
      kind?:
        type: string
        default: qpxexpress#passengerCounts
        description: 'Identifies this as a passenger count object, representing the
          number of passengers. Value: the fixed string qpxexpress#passengerCounts.'
      seniorCount?:
        type: integer
        format: int32
        description: The number of passengers that are senior citizens.
      infantInLapCount?:
        type: integer
        format: int32
        description: The number of passengers that are infants travelling in the lap of an adult.
      childCount?:
        type: integer
        format: int32
        description: The number of passengers that are children.
    description: The number and type of passengers. Unfortunately the definition of an infant, child, adult, and senior citizen varies across carriers and reservation systems.
  PricingInfo:
    type: object
    properties:
      fare?:
        type: array
        description: The fare used to price one or more segments.
        items: FareInfo
      passengers?: PassengerCounts
      fareCalculation?:
        type: string
        description: The horizontal fare calculation. This is a field on a ticket that displays all of the relevant items that go into the calculation of the fare.
      saleTotal?:
        type: string
        description: Total per-passenger price (fare and tax) in the sale or equivalent currency.
      kind?:
        type: string
        default: qpxexpress#pricingInfo
        description: 'Identifies this as a pricing object, representing the price
          of one or more travel segments. Value: the fixed string qpxexpress#pricingInfo.'
      latestTicketingTime?:
        type: string
        description: The latest ticketing time for this pricing assuming the reservation occurs at ticketing time and there is no change in fares/rules. The time is local to the point of sale (POS).
      saleTaxTotal?:
        type: string
        description: The taxes in the sale or equivalent currency.
      tax?:
        type: array
        description: The taxes used to calculate the tax total per ticket.
        items: TaxInfo
      baseFareTotal?:
        type: string
        description: The total fare in the base fare currency (the currency of the country of origin). This element is only present when the sales currency and the currency of the country of commencement are different.
      saleFareTotal?:
        type: string
        description: The total fare in the sale or equivalent currency.
      segmentPricing?:
        type: array
        description: The per-segment price and baggage information.
        items: SegmentPricing
      refundable?:
        type: boolean
        description: Whether the fares on this pricing are refundable.
      ptc?:
        type: string
        description: The passenger type code for this pricing. An alphanumeric code used by a carrier to restrict fares to certain categories of passenger. For instance, a fare might be valid only for senior citizens.
    description: The price of one or more travel segments. The currency used to purchase tickets is usually determined by the sale/ticketing city or the sale/ticketing country, unless none are specified, in which case it defaults to that of the journey origin country.
  SegmentInfo:
    type: object
    properties:
      duration?:
        type: integer
        format: int32
        description: The duration of the flight segment in minutes.
      marriedSegmentGroup?:
        type: string
        description: The solution-based index of a segment in a married segment group. Married segments can only be booked together. For example, an airline might report a certain booking code as sold out from Boston to Pittsburgh, but as available as part of two married segments Boston to Chicago connecting through Pittsburgh. For example content of this field, consider the round-trip flight ZZ1 PHX-PHL ZZ2 PHL-CLT ZZ3 CLT-PHX. This has three segments, with the two outbound ones (ZZ1 ZZ2) married. In this case, the two outbound segments belong to married segment group 0, and the return segment belongs to married segment group 1.
      flight?: FlightInfo
      kind?:
        type: string
        default: qpxexpress#segmentInfo
        description: 'Identifies this as a segment object. A segment is one or more
          consecutive legs on the same flight. For example a hypothetical flight ZZ001,
          from DFW to OGG, could have one segment with two legs: DFW to HNL (leg 1),
          HNL to OGG (leg 2). Value: the fixed string qpxexpress#segmentInfo.'
      bookingCodeCount?:
        type: integer
        format: int32
        description: The number of seats available in this booking code on this segment.
      subjectToGovernmentApproval?:
        type: boolean
        description: Whether the operation of this segment remains subject to government approval.
      cabin?:
        type: string
        description: The cabin booked for this segment.
      bookingCode?:
        type: string
        description: The booking code or class for this segment.
      id?:
        type: string
        description: An id uniquely identifying the segment in the solution.
      connectionDuration?:
        type: integer
        format: int32
        description: In minutes, the duration of the connection following this segment.
      leg?:
        type: array
        description: The legs composing this segment.
        items: LegInfo
    description: 'Details of a segment of a flight; a segment is one or more consecutive
      legs on the same flight. For example a hypothetical flight ZZ001, from DFW to
      OGG, would have one segment with two legs: DFW to HNL (leg 1), HNL to OGG (leg
      2), and DFW to OGG (legs 1 and 2).'
  SegmentPricing:
    type: object
    properties:
      freeBaggageOption?:
        type: array
        description: Details of the free baggage allowance on this segment.
        items: FreeBaggageAllowance
      fareId?:
        type: string
        description: A segment identifier unique within a single solution. It is used to refer to different parts of the same solution.
      kind?:
        type: string
        default: qpxexpress#segmentPricing
        description: 'Identifies this as a segment pricing object, representing the
          price of this segment. Value: the fixed string qpxexpress#segmentPricing.'
      segmentId?:
        type: string
        description: Unique identifier in the response of this segment.
    description: The price of this segment.
  SliceInfo:
    type: object
    properties:
      duration?:
        type: integer
        format: int32
        description: The duration of the slice in minutes.
      kind?:
        type: string
        default: qpxexpress#sliceInfo
        description: 'Identifies this as a slice object. A slice represents a traveller''s
          intent, the portion of a low-fare search corresponding to a traveler''s
          request to get between two points. One-way journeys are generally expressed
          using 1 slice, round-trips using 2. Value: the fixed string qpxexpress#sliceInfo.'
      segment?:
        type: array
        description: The segment(s) constituting the slice.
        items: SegmentInfo
    description: |-
      Information about a slice. A slice represents a traveller's intent, the portion of a low-fare search corresponding to a traveler's request to get between two points. One-way journeys are generally expressed using 1 slice, round-trips using 2. For example, if a traveler specifies the following trip in a user interface:
      | Origin | Destination | Departure Date | | BOS | LAX | March 10, 2007 | | LAX | SYD | March 17, 2007 | | SYD | BOS | March 22, 2007 |
      then this is a three slice trip.
  SliceInput:
    type: object
    properties:
      date?:
        type: string
        description: Departure date in YYYY-MM-DD format.
      alliance?:
        type: string
        description: Slices with only the carriers in this alliance should be returned; do not use this field with permittedCarrier. Allowed values are ONEWORLD, SKYTEAM, and STAR.
      prohibitedCarrier?:
        type: array
        description: A list of 2-letter IATA airline designators. Exclude slices that use these carriers.
        items:
          type: string
      kind?:
        type: string
        default: qpxexpress#sliceInput
        description: 'Identifies this as a slice input object, representing the criteria
          a desired slice must satisfy. Value: the fixed string qpxexpress#sliceInput.'
      maxConnectionDuration?:
        type: integer
        format: int32
        description: The longest connection between two legs, in minutes, you are willing to accept.
      maxStops?:
        type: integer
        format: int32
        description: The maximum number of stops you are willing to accept in this slice.
      origin?:
        type: string
        description: Airport or city IATA designator of the origin.
      destination?:
        type: string
        description: Airport or city IATA designator of the destination.
      permittedDepartureTime?: TimeOfDayRange
      permittedCarrier?:
        type: array
        description: A list of 2-letter IATA airline designators. Slices with only these carriers should be returned.
        items:
          type: string
      preferredCabin?:
        type: string
        description: Prefer solutions that book in this cabin for this slice. Allowed values are COACH, PREMIUM_COACH, BUSINESS, and FIRST.
    description: Criteria a desired slice must satisfy.
  TaxData:
    type: object
    properties:
      kind?:
        type: string
        default: qpxexpress#taxData
        description: 'Identifies this as a tax data object, representing some tax.
          Value: the fixed string qpxexpress#taxData.'
      name?:
        type: string
        description: The name of a tax.
      id?:
        type: string
        description: An identifier uniquely identifying a tax in a response.
    description: Tax data.
  TaxInfo:
    type: object
    properties:
      country?:
        type: string
        description: For government charges, the country levying the charge.
      code?:
        type: string
        description: The code to enter in the ticket's tax box.
      salePrice?:
        type: string
        description: The price of the tax in the sales or equivalent currency.
      kind?:
        type: string
        default: qpxexpress#taxInfo
        description: 'Identifies this as a tax information object. Value: the fixed
          string qpxexpress#taxInfo.'
      chargeType?:
        type: string
        description: Whether this is a government charge or a carrier surcharge.
      id?:
        type: string
        description: Identifier uniquely identifying this tax in a response. Not present for unnamed carrier surcharges.
    description: Tax information.
  TimeOfDayRange:
    type: object
    properties:
      kind?:
        type: string
        default: qpxexpress#timeOfDayRange
        description: 'Identifies this as a time of day range object, representing
          two times in a single day defining a time range. Value: the fixed string
          qpxexpress#timeOfDayRange.'
      earliestTime?:
        type: string
        description: The earliest time of day in HH:MM format.
      latestTime?:
        type: string
        description: The latest time of day in HH:MM format.
    description: Two times in a single day defining a time range.
  TripOption:
    type: object
    properties:
      saleTotal?:
        type: string
        description: The total price for all passengers on the trip, in the form of a currency followed by an amount, e.g. USD253.35.
      slice?:
        type: array
        description: The slices that make up this trip's itinerary.
        items: SliceInfo
      kind?:
        type: string
        default: qpxexpress#tripOption
        description: 'Identifies this as a trip information object. Value: the fixed
          string qpxexpress#tripOption.'
      id?:
        type: string
        description: Identifier uniquely identifying this trip in a response.
      pricing?:
        type: array
        description: Per passenger pricing information.
        items: PricingInfo
    description: Trip information.
  TripOptionsRequest:
    type: object
    properties:
      passengers?: PassengerCounts
      slice?:
        type: array
        description: The slices that make up the itinerary of this trip. A slice represents a traveler's intent, the portion of a low-fare search corresponding to a traveler's request to get between two points. One-way journeys are generally expressed using one slice, round-trips using two. An example of a one slice trip with three segments might be BOS-SYD, SYD-LAX, LAX-BOS if the traveler only stopped in SYD and LAX just long enough to change planes.
        items: SliceInput
      solutions?:
        type: integer
        format: int32
        description: The number of solutions to return, maximum 500.
      ticketingCountry?:
        type: string
        description: IATA country code representing the point of ticketing.
      refundable?:
        type: boolean
        description: Return only solutions with refundable fares.
      saleCountry?:
        type: string
        description: IATA country code representing the point of sale. This determines the "equivalent amount paid" currency for the ticket.
      maxPrice?:
        type: string
        description: 'Do not return solutions that cost more than this price. The
          alphabetical part of the price is in ISO 4217. The format, in regex, is
          [A-Z]{3}\d+(\.\d+)? Example: $102.07'
    description: A QPX Express search request, which will yield one or more solutions.
  TripOptionsResponse:
    type: object
    properties:
      data?: Data
      kind?:
        type: string
        default: qpxexpress#tripOptions
        description: 'Identifies this as a QPX Express trip response object, which
          consists of zero or more solutions. Value: the fixed string qpxexpress#tripOptions.'
      requestId?:
        type: string
        description: An identifier uniquely identifying this response.
      tripOption?:
        type: array
        description: A list of priced itinerary solutions to the QPX Express query.
        items: TripOption
    description: A QPX Express search response.
  TripsSearchRequest:
    type: object
    properties:
      request?: TripOptionsRequest
    description: A QPX Express search request.
  TripsSearchResponse:
    type: object
    properties:
      kind?:
        type: string
        default: qpxExpress#tripsSearch
        description: 'Identifies this as a QPX Express API search response resource.
          Value: the fixed string qpxExpress#tripsSearch.'
      trips?: TripOptionsResponse
    description: A QPX Express search response.
/search:
  post:
    description: Returns a list of flights.
    displayName: Search
    is:
    - hasParameters
    body:
      application/json: TripsSearchRequest
    responses:
      200:
        body:
          application/json: TripsSearchResponse
    (commons.Id): qpxExpress.trips.search
    (commons.LogicalStructure):
    - Trips
