#%RAML 1.0
title: YouTube Data API
version: v3
baseUri: https://www.googleapis.com/youtube/v3/
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
(commons.Links):
- title: Developer Documentation
  url: https://developers.google.com/youtube/v3
  role: documentation
(commons.Icons):
- url: https://www.google.com/images/icons/product/youtube-32.png
  name: x32
- url: https://www.google.com/images/icons/product/youtube-16.png
  name: x16
(commons.Id): youtube:v3
securitySchemes:
  oath2:
    type: OAuth 2.0
    description: Google Oath2.0 authorization. Detailed documentation can be found at https://developers.google.com/identity/protocols/OAuth2
    settings:
      authorizationGrants:
      - authorization_code
      - implicit
      authorizationUri: https://accounts.google.com/o/oauth2/v2/auth
      accessTokenUri: https://accounts.google.com/o/oauth2/v2/auth
      scopes:
      - https://www.googleapis.com/auth/youtube.force-ssl
      - https://www.googleapis.com/auth/youtube.readonly
      - https://www.googleapis.com/auth/youtube
      - https://www.googleapis.com/auth/youtubepartner-channel-audit
      - https://www.googleapis.com/auth/youtubepartner
      - https://www.googleapis.com/auth/youtube.upload
traits:
  hasParameters:
    queryParameters:
      quotaUser?:
        type: string
        description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
      prettyPrint?:
        type: boolean
        default: true
        description: Returns response with indentations and line breaks.
      userIp?:
        type: string
        description: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
      fields?:
        type: string
        description: Selector specifying which fields to include in a partial response.
securedBy:
  oath2: 
types:
  AccessPolicy:
    type: object
    properties:
      exception?:
        type: array
        description: A list of region codes that identify countries where the default policy do not apply.
        items:
          type: string
      allowed?:
        type: boolean
        description: The value of allowed indicates whether the access to the policy is allowed or denied by default.
    description: Rights management policy for YouTube resources.
  Activity:
    type: object
    properties:
      snippet?: ActivitySnippet
      kind?:
        type: string
        default: youtube#activity
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#activity".'
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID that YouTube uses to uniquely identify the activity.
      contentDetails?: ActivityContentDetails
    description: An activity resource contains information about an action that a particular channel, or user, has taken on YouTube.The actions reported in activity feeds include rating a video, sharing a video, marking a video as a favorite, commenting on a video, uploading a video, and so forth. Each activity resource identifies the type of action, the channel associated with the action, and the resource(s) associated with the action, such as the video that was rated or uploaded.
  ActivityContentDetails:
    type: object
    properties:
      channelItem?: ActivityContentDetailsChannelItem
      like?: ActivityContentDetailsLike
      playlistItem?: ActivityContentDetailsPlaylistItem
      social?: ActivityContentDetailsSocial
      upload?: ActivityContentDetailsUpload
      promotedItem?: ActivityContentDetailsPromotedItem
      recommendation?: ActivityContentDetailsRecommendation
      comment?: ActivityContentDetailsComment
      subscription?: ActivityContentDetailsSubscription
      favorite?: ActivityContentDetailsFavorite
      bulletin?: ActivityContentDetailsBulletin
    description: 'Details about the content of an activity: the video that was shared,
      the channel that was subscribed to, etc.'
  ActivityContentDetailsBulletin:
    type: object
    properties:
      resourceId?: ResourceId
    description: Details about a channel bulletin post.
  ActivityContentDetailsChannelItem:
    type: object
    properties:
      resourceId?: ResourceId
    description: Details about a resource which was added to a channel.
  ActivityContentDetailsComment:
    type: object
    properties:
      resourceId?: ResourceId
    description: Information about a resource that received a comment.
  ActivityContentDetailsFavorite:
    type: object
    properties:
      resourceId?: ResourceId
    description: Information about a video that was marked as a favorite video.
  ActivityContentDetailsLike:
    type: object
    properties:
      resourceId?: ResourceId
    description: Information about a resource that received a positive (like) rating.
  ActivityContentDetailsPlaylistItem:
    type: object
    properties:
      playlistId?:
        type: string
        description: The value that YouTube uses to uniquely identify the playlist.
      playlistItemId?:
        type: string
        description: ID of the item within the playlist.
      resourceId?: ResourceId
    description: Information about a new playlist item.
  ActivityContentDetailsPromotedItem:
    type: object
    properties:
      adTag?:
        type: string
        description: The URL the client should fetch to request a promoted item.
      ctaType?:
        type: string
        description: The type of call-to-action, a message to the user indicating action that can be taken.
        enum:
        - unspecified
        - visitAdvertiserSite
      clickTrackingUrl?:
        type: string
        description: The URL the client should ping to indicate that the user clicked through on this promoted item.
      customCtaButtonText?:
        type: string
        description: The custom call-to-action button text. If specified, it will override the default button text for the cta_type.
      impressionUrl?:
        type: array
        description: The list of impression URLs. The client should ping all of these URLs to indicate that the user was shown this promoted item.
        items:
          type: string
      forecastingUrl?:
        type: array
        description: The list of forecasting URLs. The client should ping all of these URLs when a promoted item is not available, to indicate that a promoted item could have been shown.
        items:
          type: string
      creativeViewUrl?:
        type: string
        description: The URL the client should ping to indicate that the user was shown this promoted item.
      videoId?:
        type: string
        description: The ID that YouTube uses to uniquely identify the promoted video.
      descriptionText?:
        type: string
        description: The text description to accompany the promoted item.
      destinationUrl?:
        type: string
        description: The URL the client should direct the user to, if the user chooses to visit the advertiser's website.
    description: Details about a resource which is being promoted.
  ActivityContentDetailsRecommendation:
    type: object
    properties:
      reason?:
        type: string
        description: The reason that the resource is recommended to the user.
        enum:
        - unspecified
        - videoFavorited
        - videoLiked
        - videoWatched
      resourceId?: ResourceId
      seedResourceId?: ResourceId
    description: Information that identifies the recommended resource.
  ActivityContentDetailsSocial:
    type: object
    properties:
      resourceId?: ResourceId
      author?:
        type: string
        description: The author of the social network post.
      imageUrl?:
        type: string
        description: An image of the post's author.
      type?:
        type: string
        description: The name of the social network.
        enum:
        - facebook
        - googlePlus
        - twitter
        - unspecified
      referenceUrl?:
        type: string
        description: The URL of the social network post.
    description: Details about a social network post.
  ActivityContentDetailsSubscription:
    type: object
    properties:
      resourceId?: ResourceId
    description: Information about a channel that a user subscribed to.
  ActivityContentDetailsUpload:
    type: object
    properties:
      videoId?:
        type: string
        description: The ID that YouTube uses to uniquely identify the uploaded video.
    description: Information about the uploaded video.
  ActivityListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      prevPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
      tokenPagination?: TokenPagination
      kind?:
        type: string
        default: youtube#activityListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#activityListResponse".'
      nextPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
      pageInfo?: PageInfo
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of activities, or events, that match the request criteria.
        items: Activity
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  ActivitySnippet:
    type: object
    properties:
      publishedAt?:
        type: string
        description: The date and time that the video was uploaded. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      groupId?:
        type: string
        description: The group ID associated with the activity. A group ID identifies user events that are associated with the same user and resource. For example, if a user rates a video and marks the same video as a favorite, the entries for those events would have the same group ID in the user's activity feed. In your user interface, you can avoid repetition by grouping events with the same groupId value.
      description?:
        type: string
        description: The description of the resource primarily associated with the activity.
      thumbnails?: ThumbnailDetails
      title?:
        type: string
        description: The title of the resource primarily associated with the activity.
      type?:
        type: string
        description: The type of activity that the resource describes.
        enum:
        - bulletin
        - channelItem
        - comment
        - favorite
        - like
        - playlistItem
        - promotedItem
        - recommendation
        - social
        - subscription
        - upload
      channelId?:
        type: string
        description: The ID that YouTube uses to uniquely identify the channel associated with the activity.
      channelTitle?:
        type: string
        description: Channel title for the channel responsible for this activity
    description: Basic details about an activity, including title, description, thumbnails, activity type and group.
  Caption:
    type: object
    properties:
      snippet?: CaptionSnippet
      kind?:
        type: string
        default: youtube#caption
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#caption".'
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID that YouTube uses to uniquely identify the caption track.
    description: A caption resource represents a YouTube caption track. A caption track is associated with exactly one YouTube video.
  CaptionListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      kind?:
        type: string
        default: youtube#captionListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#captionListResponse".'
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of captions that match the request criteria.
        items: Caption
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  CaptionSnippet:
    type: object
    properties:
      trackKind?:
        type: string
        description: The caption track's type.
        enum:
        - ASR
        - forced
        - standard
      audioTrackType?:
        type: string
        description: The type of audio track associated with the caption track.
        enum:
        - commentary
        - descriptive
        - primary
        - unknown
      isDraft?:
        type: boolean
        description: Indicates whether the caption track is a draft. If the value is true, then the track is not publicly visible. The default value is false.
      language?:
        type: string
        description: The language of the caption track. The property value is a BCP-47 language tag.
      videoId?:
        type: string
        description: The ID that YouTube uses to uniquely identify the video associated with the caption track.
      lastUpdated?:
        type: string
        description: The date and time when the caption track was last updated. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      isAutoSynced?:
        type: boolean
        description: Indicates whether YouTube synchronized the caption track to the audio track in the video. The value will be true if a sync was explicitly requested when the caption track was uploaded. For example, when calling the captions.insert or captions.update methods, you can set the sync parameter to true to instruct YouTube to sync the uploaded track to the video. If the value is false, YouTube uses the time codes in the uploaded caption track to determine when to display captions.
      failureReason?:
        type: string
        description: The reason that YouTube failed to process the caption track. This property is only present if the state property's value is failed.
        enum:
        - processingFailed
        - unknownFormat
        - unsupportedFormat
      name?:
        type: string
        description: The name of the caption track. The name is intended to be visible to the user as an option during playback.
      isEasyReader?:
        type: boolean
        description: Indicates whether caption track is formatted for "easy reader," meaning it is at a third-grade level for language learners. The default value is false.
      isLarge?:
        type: boolean
        description: Indicates whether the caption track uses large text for the vision-impaired. The default value is false.
      isCC?:
        type: boolean
        description: Indicates whether the track contains closed captions for the deaf and hard of hearing. The default value is false.
      status?:
        type: string
        description: The caption track's status.
        enum:
        - failed
        - serving
        - syncing
    description: Basic details about a caption track, such as its language and name.
  CdnSettings:
    type: object
    properties:
      frameRate?:
        type: string
        description: The frame rate of the inbound video data.
        enum:
        - 30fps
        - 60fps
      format?:
        type: string
        description: The format of the video stream that you are sending to Youtube.
      ingestionType?:
        type: string
        description: The method or protocol used to transmit the video stream.
        enum:
        - dash
        - rtmp
      ingestionInfo?: IngestionInfo
      resolution?:
        type: string
        description: The resolution of the inbound video data.
        enum:
        - 1080p
        - 1440p
        - 240p
        - 360p
        - 480p
        - 720p
    description: Brief description of the live stream cdn settings.
  Channel:
    type: object
    properties:
      snippet?: ChannelSnippet
      localizations?:
        type: object
        description: Localizations for different languages
      kind?:
        type: string
        default: youtube#channel
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#channel".'
      contentDetails?: ChannelContentDetails
      topicDetails?: ChannelTopicDetails
      brandingSettings?: ChannelBrandingSettings
      contentOwnerDetails?: ChannelContentOwnerDetails
      conversionPings?: ChannelConversionPings
      auditDetails?: ChannelAuditDetails
      invideoPromotion?: InvideoPromotion
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID that YouTube uses to uniquely identify the channel.
      statistics?: ChannelStatistics
      status?: ChannelStatus
    description: A channel resource contains information about a YouTube channel.
  ChannelAuditDetails:
    type: object
    properties:
      contentIdClaimsGoodStanding?:
        type: boolean
        description: Whether or not the channel has any unresolved claims.
      copyrightStrikesGoodStanding?:
        type: boolean
        description: Whether or not the channel has any copyright strikes.
      communityGuidelinesGoodStanding?:
        type: boolean
        description: Whether or not the channel respects the community guidelines.
      overallGoodStanding?:
        type: boolean
        description: Describes the general state of the channel. This field will always show if there are any issues whatsoever with the channel. Currently this field represents the result of the logical and operation over the community guidelines good standing, the copyright strikes good standing and the content ID claims good standing, but this may change in the future.
    description: The auditDetails object encapsulates channel data that is relevant for YouTube Partners during the audit process.
  ChannelBannerResource:
    type: object
    properties:
      kind?:
        type: string
        default: youtube#channelBannerResource
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#channelBannerResource".'
      etag?:
        type: string
        description: Etag of this resource.
      url?:
        type: string
        description: The URL of this banner image.
    description: A channel banner returned as the response to a channel_banner.insert call.
  ChannelBrandingSettings:
    type: object
    properties:
      image?: ImageSettings
      watch?: WatchSettings
      hints?:
        type: array
        description: Additional experimental branding properties.
        items: PropertyValue
      channel?: ChannelSettings
    description: Branding properties of a YouTube channel.
  ChannelContentDetails:
    type: object
    properties:
      relatedPlaylists?:
        type: object
        properties:
          favorites?:
            type: string
            description: The ID of the playlist that contains the channel"s favorite videos. Use the  playlistItems.insert and  playlistItems.delete to add or remove items from that list.
          watchHistory?:
            type: string
            description: The ID of the playlist that contains the channel"s watch history. Use the  playlistItems.insert and  playlistItems.delete to add or remove items from that list.
          watchLater?:
            type: string
            description: The ID of the playlist that contains the channel"s watch later playlist. Use the playlistItems.insert and  playlistItems.delete to add or remove items from that list.
          likes?:
            type: string
            description: The ID of the playlist that contains the channel"s liked videos. Use the   playlistItems.insert and  playlistItems.delete to add or remove items from that list.
          uploads?:
            type: string
            description: The ID of the playlist that contains the channel"s uploaded videos. Use the  videos.insert method to upload new videos and the videos.delete method to delete previously uploaded videos.
    description: Details about the content of a channel.
  ChannelContentOwnerDetails:
    type: object
    properties:
      contentOwner?:
        type: string
        description: The ID of the content owner linked to the channel.
      timeLinked?:
        type: string
        description: The date and time of when the channel was linked to the content owner. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
    description: The contentOwnerDetails object encapsulates channel data that is relevant for YouTube Partners linked with the channel.
  ChannelConversionPing:
    type: object
    properties:
      conversionUrl?:
        type: string
        description: 'The url (without the schema) that the player shall send the
          ping to. It''s at caller''s descretion to decide which schema to use (http
          vs https) Example of a returned url: //googleads.g.doubleclick.net/pagead/
          viewthroughconversion/962985656/?data=path%3DtHe_path%3Btype%3D cview%3Butuid%3DGISQtTNGYqaYl4sKxoVvKA&labe=default
          The caller must append biscotti authentication (ms param in case of mobile,
          for example) to this ping.'
      context?:
        type: string
        description: Defines the context of the ping.
        enum:
        - cview
        - subscribe
        - unsubscribe
    description: Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.
  ChannelConversionPings:
    type: object
    properties:
      pings?:
        type: array
        description: Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.
        items: ChannelConversionPing
    description: The conversionPings object encapsulates information about conversion pings that need to be respected by the channel.
  ChannelListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      prevPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
      tokenPagination?: TokenPagination
      kind?:
        type: string
        default: youtube#channelListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#channelListResponse".'
      nextPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
      pageInfo?: PageInfo
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of channels that match the request criteria.
        items: Channel
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  ChannelLocalization:
    type: object
    properties:
      description?:
        type: string
        description: The localized strings for channel's description.
      title?:
        type: string
        description: The localized strings for channel's title.
    description: Channel localization setting
  ChannelProfileDetails:
    type: object
    properties:
      channelUrl?:
        type: string
        description: The channel's URL.
      displayName?:
        type: string
        description: The channel's display name.
      profileImageUrl?:
        type: string
        description: The channels's avatar URL.
      channelId?:
        type: string
        description: The YouTube channel ID.
  ChannelSection:
    type: object
    properties:
      snippet?: ChannelSectionSnippet
      targeting?: ChannelSectionTargeting
      localizations?:
        type: object
        description: Localizations for different languages
      kind?:
        type: string
        default: youtube#channelSection
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#channelSection".'
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID that YouTube uses to uniquely identify the channel section.
      contentDetails?: ChannelSectionContentDetails
  ChannelSectionContentDetails:
    type: object
    properties:
      channels?:
        type: array
        description: The channel ids for type multiple_channels.
        items:
          type: string
      playlists?:
        type: array
        description: The playlist ids for type single_playlist and multiple_playlists. For singlePlaylist, only one playlistId is allowed.
        items:
          type: string
    description: Details about a channelsection, including playlists and channels.
  ChannelSectionListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      kind?:
        type: string
        default: youtube#channelSectionListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#channelSectionListResponse".'
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of ChannelSections that match the request criteria.
        items: ChannelSection
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  ChannelSectionLocalization:
    type: object
    properties:
      title?:
        type: string
        description: The localized strings for channel section's title.
    description: ChannelSection localization setting
  ChannelSectionSnippet:
    type: object
    properties:
      defaultLanguage?:
        type: string
        description: The language of the channel section's default title and description.
      localized?: ChannelSectionLocalization
      style?:
        type: string
        description: The style of the channel section.
        enum:
        - channelsectionStyleUndefined
        - horizontalRow
        - verticalList
      position?:
        type: integer
        format: int32
        description: The position of the channel section in the channel.
      title?:
        type: string
        description: The channel section's title for multiple_playlists and multiple_channels.
      type?:
        type: string
        description: The type of the channel section.
        enum:
        - allPlaylists
        - channelsectionTypeUndefined
        - completedEvents
        - likedPlaylists
        - likes
        - liveEvents
        - multipleChannels
        - multiplePlaylists
        - popularUploads
        - postedPlaylists
        - postedVideos
        - recentActivity
        - recentPosts
        - recentUploads
        - singlePlaylist
        - subscriptions
        - upcomingEvents
      channelId?:
        type: string
        description: The ID that YouTube uses to uniquely identify the channel that published the channel section.
    description: Basic details about a channel section, including title, style and position.
  ChannelSectionTargeting:
    type: object
    properties:
      regions?:
        type: array
        description: The region the channel section is targeting.
        items:
          type: string
      languages?:
        type: array
        description: The language the channel section is targeting.
        items:
          type: string
      countries?:
        type: array
        description: The country the channel section is targeting.
        items:
          type: string
    description: ChannelSection targeting setting.
  ChannelSettings:
    type: object
    properties:
      country?:
        type: string
        description: The country of the channel.
      featuredChannelsUrls?:
        type: array
        description: The list of featured channels.
        items:
          type: string
      featuredChannelsTitle?:
        type: string
        description: Title for the featured channels tab.
      keywords?:
        type: string
        description: Lists keywords associated with the channel, comma-separated.
      defaultTab?:
        type: string
        description: Which content tab users should see when viewing the channel.
      showRelatedChannels?:
        type: boolean
        description: Whether related channels should be proposed.
      description?:
        type: string
        description: Specifies the channel description.
      unsubscribedTrailer?:
        type: string
        description: The trailer of the channel, for users that are not subscribers.
      title?:
        type: string
        description: Specifies the channel title.
      defaultLanguage?:
        type: string
      moderateComments?:
        type: boolean
        description: Whether user-submitted comments left on the channel page need to be approved by the channel owner to be publicly visible.
      trackingAnalyticsAccountId?:
        type: string
        description: The ID for a Google Analytics account to track and measure traffic to the channels.
      showBrowseView?:
        type: boolean
        description: Whether the tab to browse the videos should be displayed.
      profileColor?:
        type: string
        description: A prominent color that can be rendered on this channel page.
    description: Branding properties for the channel view.
  ChannelSnippet:
    type: object
    properties:
      customUrl?:
        type: string
        description: The custom url of the channel.
      country?:
        type: string
        description: The country of the channel.
      defaultLanguage?:
        type: string
        description: The language of the channel's default title and description.
      publishedAt?:
        type: datetime
        description: The date and time that the channel was created. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      localized?: ChannelLocalization
      description?:
        type: string
        description: The description of the channel.
      thumbnails?: ThumbnailDetails
      title?:
        type: string
        description: The channel's title.
    description: 'Basic details about a channel, including title, description and
      thumbnails. Next available id: 15.'
  ChannelStatistics:
    type: object
    properties:
      videoCount?:
        type: integer
        format: int64
        description: The number of videos uploaded to the channel.
      subscriberCount?:
        type: integer
        format: int64
        description: The number of subscribers that the channel has.
      viewCount?:
        type: integer
        format: int64
        description: The number of times the channel has been viewed.
      hiddenSubscriberCount?:
        type: boolean
        description: Whether or not the number of subscribers is shown for this user.
      commentCount?:
        type: integer
        format: int64
        description: The number of comments for the channel.
    description: 'Statistics about a channel: number of subscribers, number of videos
      in the channel, etc.'
  ChannelStatus:
    type: object
    properties:
      isLinked?:
        type: boolean
        description: If true, then the user is linked to either a YouTube username or G+ account. Otherwise, the user doesn't have a public YouTube identity.
      longUploadsStatus?:
        type: string
        description: The long uploads status of this channel. See
        enum:
        - allowed
        - disallowed
        - eligible
        - longUploadsUnspecified
      privacyStatus?:
        type: string
        description: Privacy status of the channel.
        enum:
        - private
        - public
        - unlisted
    description: JSON template for the status part of a channel.
  ChannelTopicDetails:
    type: object
    properties:
      topicIds?:
        type: array
        description: A list of Freebase topic IDs associated with the channel. You can retrieve information about each topic using the Freebase Topic API.
        items:
          type: string
    description: Freebase topic information related to the channel.
  Comment:
    type: object
    properties:
      snippet?: CommentSnippet
      kind?:
        type: string
        default: youtube#comment
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#comment".'
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID that YouTube uses to uniquely identify the comment.
    description: A comment represents a single YouTube comment.
  CommentListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      tokenPagination?: TokenPagination
      kind?:
        type: string
        default: youtube#commentListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#commentListResponse".'
      nextPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
      pageInfo?: PageInfo
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of comments that match the request criteria.
        items: Comment
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  CommentSnippet:
    type: object
    properties:
      authorProfileImageUrl?:
        type: string
        description: The URL for the avatar of the user who posted the comment.
      textDisplay?:
        type: string
        description: The comment's text. The format is either plain text or HTML dependent on what has been requested. Even the plain text representation may differ from the text originally posted in that it may replace video links with video titles etc.
      publishedAt?:
        type: datetime
        description: The date and time when the comment was orignally published. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      authorChannelId?:
        type: any
        description: The id of the author's YouTube channel, if any.
      moderationStatus?:
        type: string
        description: The comment's moderation status. Will not be set if the comments were requested through the id filter.
        enum:
        - heldForReview
        - likelySpam
        - published
        - rejected
      likeCount?:
        type: integer
        format: int32
        description: The total number of likes this comment has received.
      videoId?:
        type: string
        description: The ID of the video the comment refers to, if any.
      textOriginal?:
        type: string
        description: The comment's original raw text as initially posted or last updated. The original text will only be returned if it is accessible to the viewer, which is only guaranteed if the viewer is the comment's author.
      authorDisplayName?:
        type: string
        description: The name of the user who posted the comment.
      parentId?:
        type: string
        description: The unique id of the parent comment, only set for replies.
      canRate?:
        type: boolean
        description: Whether the current viewer can rate this comment.
      authorChannelUrl?:
        type: string
        description: Link to the author's YouTube channel, if any.
      channelId?:
        type: string
        description: The id of the corresponding YouTube channel. In case of a channel comment this is the channel the comment refers to. In case of a video comment it's the video's channel.
      updatedAt?:
        type: datetime
        description: The date and time when was last updated . The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      viewerRating?:
        type: string
        description: The rating the viewer has given to this comment. For the time being this will never return RATE_TYPE_DISLIKE and instead return RATE_TYPE_NONE. This may change in the future.
        enum:
        - dislike
        - like
        - none
        - unspecified
    description: Basic details about a comment, such as its author and text.
  CommentThread:
    type: object
    properties:
      snippet?: CommentThreadSnippet
      replies?: CommentThreadReplies
      kind?:
        type: string
        default: youtube#commentThread
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#commentThread".'
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID that YouTube uses to uniquely identify the comment thread.
    description: A comment thread represents information that applies to a top level comment and all its replies. It can also include the top level comment itself and some of the replies.
  CommentThreadListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      tokenPagination?: TokenPagination
      kind?:
        type: string
        default: youtube#commentThreadListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#commentThreadListResponse".'
      nextPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
      pageInfo?: PageInfo
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of comment threads that match the request criteria.
        items: CommentThread
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  CommentThreadReplies:
    type: object
    properties:
      comments?:
        type: array
        description: A limited number of replies. Unless the number of replies returned equals total_reply_count in the snippet the returned replies are only a subset of the total number of replies.
        items: Comment
    description: Comments written in (direct or indirect) reply to the top level comment.
  CommentThreadSnippet:
    type: object
    properties:
      canReply?:
        type: boolean
        description: Whether the current viewer of the thread can reply to it. This is viewer specific - other viewers may see a different value for this field.
      totalReplyCount?:
        type: integer
        format: int32
        description: The total number of replies (not including the top level comment).
      topLevelComment?: Comment
      isPublic?:
        type: boolean
        description: Whether the thread (and therefore all its comments) is visible to all YouTube users.
      videoId?:
        type: string
        description: The ID of the video the comments refer to, if any. No video_id implies a channel discussion comment.
      channelId?:
        type: string
        description: The YouTube channel the comments in the thread refer to or the channel with the video the comments refer to. If video_id isn't set the comments refer to the channel itself.
    description: Basic details about a comment thread.
  ContentRating:
    type: object
    properties:
      ifcoRating?:
        type: string
        description: The video's Irish Film Classification Office (IFCO - Ireland) rating. See the IFCO website for more information.
        enum:
        - ifco12
        - ifco12a
        - ifco15
        - ifco15a
        - ifco16
        - ifco18
        - ifcoG
        - ifcoPg
        - ifcoUnrated
      lsfRating?:
        type: string
        description: The video's rating from Indonesia's Lembaga Sensor Film.
        enum:
        - lsf13
        - lsf17
        - lsf21
        - lsfA
        - lsfBo
        - lsfD
        - lsfR
        - lsfSu
        - lsfUnrated
      cicfRating?:
        type: string
        description: The video's rating from the Commission de Contrôle des Films (Belgium).
        enum:
        - cicfE
        - cicfKntEna
        - cicfKtEa
        - cicfUnrated
      tvpgRating?:
        type: string
        description: The video's TV Parental Guidelines (TVPG) rating.
        enum:
        - pg14
        - tvpgG
        - tvpgMa
        - tvpgPg
        - tvpgUnrated
        - tvpgY
        - tvpgY7
        - tvpgY7Fv
      ilfilmRating?:
        type: string
        description: The video's rating in Israel.
        enum:
        - ilfilm12
        - ilfilm16
        - ilfilm18
        - ilfilmAa
        - ilfilmUnrated
      nkclvRating?:
        type: string
        description: The video's rating from the Nacionãlais Kino centrs (National Film Centre of Latvia).
        enum:
        - nkclv12plus
        - nkclv18plus
        - nkclv7plus
        - nkclvU
        - nkclvUnrated
      catvfrRating?:
        type: string
        description: The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian French-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.
        enum:
        - catvfr13plus
        - catvfr16plus
        - catvfr18plus
        - catvfr8plus
        - catvfrG
        - catvfrUnrated
      egfilmRating?:
        type: string
        description: The video's rating in Egypt.
        enum:
        - egfilm18
        - egfilmBn
        - egfilmGn
        - egfilmUnrated
      cccRating?:
        type: string
        description: The video's Consejo de Calificación Cinematográfica (Chile) rating.
        enum:
        - ccc14
        - ccc18
        - ccc18s
        - ccc18v
        - ccc6
        - cccTe
        - cccUnrated
      resorteviolenciaRating?:
        type: string
        description: The video's rating in Venezuela.
        enum:
        - resorteviolenciaA
        - resorteviolenciaB
        - resorteviolenciaC
        - resorteviolenciaD
        - resorteviolenciaE
        - resorteviolenciaUnrated
      chvrsRating?:
        type: string
        description: The video's Canadian Home Video Rating System (CHVRS) rating.
        enum:
        - chvrs14a
        - chvrs18a
        - chvrsE
        - chvrsG
        - chvrsPg
        - chvrsR
        - chvrsUnrated
      nbcplRating?:
        type: string
        description: The video's rating in Poland.
        enum:
        - nbcpl18plus
        - nbcplI
        - nbcplIi
        - nbcplIii
        - nbcplIv
        - nbcplUnrated
      chfilmRating?:
        type: string
        description: The video's rating in Switzerland.
        enum:
        - chfilm0
        - chfilm12
        - chfilm16
        - chfilm18
        - chfilm6
        - chfilmUnrated
      anatelRating?:
        type: string
        description: The video's Anatel (Asociación Nacional de Televisión) rating for Chilean television.
        enum:
        - anatelA
        - anatelF
        - anatelI
        - anatelI10
        - anatelI12
        - anatelI7
        - anatelR
        - anatelUnrated
      smsaRating?:
        type: string
        description: The video's rating from Statens medieråd (Sweden's National Media Council).
        enum:
        - smsa11
        - smsa15
        - smsa7
        - smsaA
        - smsaUnrated
      smaisRating?:
        type: string
        description: The video's rating in Iceland.
        enum:
        - smais12
        - smais14
        - smais16
        - smais18
        - smais7
        - smaisL
        - smaisUnrated
      kfcbRating?:
        type: string
        description: The video's rating from the Kenya Film Classification Board.
        enum:
        - kfcb16plus
        - kfcbG
        - kfcbPg
        - kfcbR
        - kfcbUnrated
      skfilmRating?:
        type: string
        description: The video's rating in Slovakia.
        enum:
        - skfilmG
        - skfilmP2
        - skfilmP5
        - skfilmP8
        - skfilmUnrated
      acbRating?:
        type: string
        description: The video's Australian Classification Board (ACB) or Australian Communications and Media Authority (ACMA) rating. ACMA ratings are used to classify children's television programming.
        enum:
        - acbC
        - acbE
        - acbG
        - acbM
        - acbMa15plus
        - acbP
        - acbPg
        - acbR18plus
        - acbUnrated
      mibacRating?:
        type: string
        description: The video's rating from the Ministero dei Beni e delle Attività Culturali e del Turismo (Italy).
        enum:
        - mibacT
        - mibacUnrated
        - mibacVap
        - mibacVm12
        - mibacVm14
        - mibacVm18
      djctqRatingReasons?:
        type: array
        description: Reasons that explain why the video received its DJCQT (Brazil) rating.
        items:
          type: string
          enum:
          - djctqCriminalActs
          - djctqDrugs
          - djctqExplicitSex
          - djctqExtremeViolence
          - djctqIllegalDrugs
          - djctqImpactingContent
          - djctqInappropriateLanguage
          - djctqLegalDrugs
          - djctqNudity
          - djctqSex
          - djctqSexualContent
          - djctqViolence
      ytRating?:
        type: string
        description: A rating that YouTube uses to identify age-restricted content.
        enum:
        - ytAgeRestricted
      kijkwijzerRating?:
        type: string
        description: voor de Classificatie van Audiovisuele Media (Netherlands).
        enum:
        - kijkwijzer12
        - kijkwijzer16
        - kijkwijzer18
        - kijkwijzer6
        - kijkwijzer9
        - kijkwijzerAl
        - kijkwijzerUnrated
      mdaRating?:
        type: string
        description: The video's rating from Singapore's Media Development Authority (MDA) and, specifically, it's Board of Film Censors (BFC).
        enum:
        - mdaG
        - mdaM18
        - mdaNc16
        - mdaPg
        - mdaPg13
        - mdaR21
        - mdaUnrated
      fcoRating?:
        type: string
        description: The video's rating from Hong Kong's Office for Film, Newspaper and Article Administration.
        enum:
        - fcoI
        - fcoIi
        - fcoIia
        - fcoIib
        - fcoIii
        - fcoUnrated
      mekuRating?:
        type: string
        description: The video's rating from Finland's Kansallinen Audiovisuaalinen Instituutti (National Audiovisual Institute).
        enum:
        - meku12
        - meku16
        - meku18
        - meku7
        - mekuS
        - mekuUnrated
      mccaaRating?:
        type: string
        description: The video's rating from Malta's Film Age-Classification Board.
        enum:
        - mccaa12
        - mccaa12a
        - mccaa14
        - mccaa15
        - mccaa16
        - mccaa18
        - mccaaPg
        - mccaaU
        - mccaaUnrated
      cncRating?:
        type: string
        description: Rating system in France - Commission de classification cinematographique
        enum:
        - cnc10
        - cnc12
        - cnc16
        - cnc18
        - cncE
        - cncT
        - cncUnrated
      rteRating?:
        type: string
        description: The video's rating from Ireland's Raidió Teilifís Éireann.
        enum:
        - rteCh
        - rteGa
        - rteMa
        - rtePs
        - rteUnrated
      nbcRating?:
        type: string
        description: The video's rating from the Maldives National Bureau of Classification.
        enum:
        - nbc12plus
        - nbc15plus
        - nbc18plus
        - nbc18plusr
        - nbcG
        - nbcPg
        - nbcPu
        - nbcUnrated
      moctwRating?:
        type: string
        description: The video's rating from Taiwan's Ministry of Culture (文化部).
        enum:
        - moctwG
        - moctwP
        - moctwPg
        - moctwR
        - moctwR12
        - moctwR15
        - moctwUnrated
      mocRating?:
        type: string
        description: The video's Ministerio de Cultura (Colombia) rating.
        enum:
        - moc12
        - moc15
        - moc18
        - moc7
        - mocBanned
        - mocE
        - mocT
        - mocUnrated
        - mocX
      csaRating?:
        type: string
        description: The video's rating from France's Conseil supérieur de l?audiovisuel, which rates broadcast content.
        enum:
        - csa10
        - csa12
        - csa16
        - csa18
        - csaInterdiction
        - csaT
        - csaUnrated
      mpaaRating?:
        type: string
        description: The video's Motion Picture Association of America (MPAA) rating.
        enum:
        - mpaaG
        - mpaaNc17
        - mpaaPg
        - mpaaPg13
        - mpaaR
        - mpaaUnrated
      pefilmRating?:
        type: string
        description: The video's rating in Peru.
        enum:
        - pefilm14
        - pefilm18
        - pefilmPg
        - pefilmPt
        - pefilmUnrated
      cscfRating?:
        type: string
        description: The video's rating from Luxembourg's Commission de surveillance de la classification des films (CSCF).
        enum:
        - cscf12
        - cscf16
        - cscf18
        - cscf6
        - cscf9
        - cscfA
        - cscfAl
        - cscfUnrated
      bfvcRating?:
        type: string
        description: The video's rating from Thailand's Board of Film and Video Censors.
        enum:
        - bfvc13
        - bfvc15
        - bfvc18
        - bfvc20
        - bfvcB
        - bfvcE
        - bfvcG
        - bfvcUnrated
      mccypRating?:
        type: string
        description: The video's rating from the Danish Film Institute's (Det Danske Filminstitut) Media Council for Children and Young People.
        enum:
        - mccyp11
        - mccyp15
        - mccyp7
        - mccypA
        - mccypUnrated
      eefilmRating?:
        type: string
        description: The video's rating in Estonia.
        enum:
        - eefilmK12
        - eefilmK14
        - eefilmK16
        - eefilmK6
        - eefilmL
        - eefilmMs12
        - eefilmMs6
        - eefilmPere
        - eefilmUnrated
      grfilmRating?:
        type: string
        description: The video's rating in Greece.
        enum:
        - grfilmE
        - grfilmK
        - grfilmK12
        - grfilmK13
        - grfilmK15
        - grfilmK17
        - grfilmK18
        - grfilmUnrated
      bmukkRating?:
        type: string
        description: The video's rating from the Austrian Board of Media Classification (Bundesministerium für Unterricht, Kunst und Kultur).
        enum:
        - bmukk10
        - bmukk12
        - bmukk14
        - bmukk16
        - bmukk6
        - bmukk8
        - bmukkAa
        - bmukkUnrated
      cbfcRating?:
        type: string
        description: The video's Central Board of Film Certification (CBFC - India) rating.
        enum:
        - cbfcA
        - cbfcS
        - cbfcU
        - cbfcUA
        - cbfcUnrated
      djctqRating?:
        type: string
        description: The video's Departamento de Justiça, Classificação, Qualificação e Títulos (DJCQT - Brazil) rating.
        enum:
        - djctq10
        - djctq12
        - djctq14
        - djctq16
        - djctq18
        - djctqL
        - djctqUnrated
      rcnofRating?:
        type: string
        description: The video's rating from the Hungarian Nemzeti Filmiroda, the Rating Committee of the National Office of Film.
        enum:
        - rcnofI
        - rcnofIi
        - rcnofIii
        - rcnofIv
        - rcnofUnrated
        - rcnofV
        - rcnofVi
      fmocRating?:
        type: string
        description: This property has been deprecated. Use the contentDetails.contentRating.cncRating instead.
        enum:
        - fmoc10
        - fmoc12
        - fmoc16
        - fmoc18
        - fmocE
        - fmocU
        - fmocUnrated
      mtrcbRating?:
        type: string
        description: The video's rating from the Movie and Television Review and Classification Board (Philippines).
        enum:
        - mtrcbG
        - mtrcbPg
        - mtrcbR13
        - mtrcbR16
        - mtrcbR18
        - mtrcbUnrated
        - mtrcbX
      oflcRating?:
        type: string
        description: The video's Office of Film and Literature Classification (OFLC - New Zealand) rating.
        enum:
        - oflcG
        - oflcM
        - oflcPg
        - oflcR13
        - oflcR15
        - oflcR16
        - oflcR18
        - oflcRp13
        - oflcRp16
        - oflcUnrated
      agcomRating?:
        type: string
        description: The video's rating from Italy's Autorità per le Garanzie nelle Comunicazioni (AGCOM).
        enum:
        - agcomT
        - agcomUnrated
        - agcomVm14
        - agcomVm18
      russiaRating?:
        type: string
        description: The video's National Film Registry of the Russian Federation (MKRF - Russia) rating.
        enum:
        - russia0
        - russia12
        - russia16
        - russia18
        - russia6
        - russiaUnrated
      cceRating?:
        type: string
        description: The video's rating from Portugal's Comissão de Classificação de Espect´culos.
        enum:
        - cceM12
        - cceM14
        - cceM16
        - cceM18
        - cceM4
        - cceM6
        - cceUnrated
      fskRating?:
        type: string
        description: The video's Freiwillige Selbstkontrolle der Filmwirtschaft (FSK - Germany) rating.
        enum:
        - fsk0
        - fsk12
        - fsk16
        - fsk18
        - fsk6
        - fskUnrated
      rtcRating?:
        type: string
        description: The video's General Directorate of Radio, Television and Cinematography (Mexico) rating.
        enum:
        - rtcA
        - rtcAa
        - rtcB
        - rtcB15
        - rtcC
        - rtcD
        - rtcUnrated
      nfvcbRating?:
        type: string
        description: The video's rating from Nigeria's National Film and Video Censors Board.
        enum:
        - nfvcb12
        - nfvcb12a
        - nfvcb15
        - nfvcb18
        - nfvcbG
        - nfvcbPg
        - nfvcbRe
        - nfvcbUnrated
      incaaRating?:
        type: string
        description: The video's INCAA (Instituto Nacional de Cine y Artes Audiovisuales - Argentina) rating.
        enum:
        - incaaAtp
        - incaaC
        - incaaSam13
        - incaaSam16
        - incaaSam18
        - incaaUnrated
      medietilsynetRating?:
        type: string
        description: The video's rating from Medietilsynet, the Norwegian Media Authority.
        enum:
        - medietilsynet11
        - medietilsynet12
        - medietilsynet15
        - medietilsynet18
        - medietilsynet6
        - medietilsynet7
        - medietilsynet9
        - medietilsynetA
        - medietilsynetUnrated
      eirinRating?:
        type: string
        description: The video's Eirin (映倫) rating. Eirin is the Japanese rating system.
        enum:
        - eirinG
        - eirinPg12
        - eirinR15plus
        - eirinR18plus
        - eirinUnrated
      fpbRatingReasons?:
        type: array
        description: Reasons that explain why the video received its FPB (South Africa) rating.
        items:
          type: string
          enum:
          - fpbBlasphemy
          - fpbCriminalTechniques
          - fpbDrugs
          - fpbHorror
          - fpbImitativeActsTechniques
          - fpbLanguage
          - fpbNudity
          - fpbPrejudice
          - fpbSex
          - fpbSexualViolence
          - fpbViolence
      icaaRating?:
        type: string
        description: The video's Instituto de la Cinematografía y de las Artes Audiovisuales (ICAA - Spain) rating.
        enum:
        - icaa12
        - icaa13
        - icaa16
        - icaa18
        - icaa7
        - icaaApta
        - icaaUnrated
        - icaaX
      catvRating?:
        type: string
        description: Rating system for Canadian TV - Canadian TV Classification System The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian English-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.
        enum:
        - catv14plus
        - catv18plus
        - catvC
        - catvC8
        - catvG
        - catvPg
        - catvUnrated
      fcbmRating?:
        type: string
        description: The video's rating from Malaysia's Film Censorship Board.
        enum:
        - fcbm18
        - fcbm18pa
        - fcbm18pl
        - fcbm18sg
        - fcbm18sx
        - fcbmP13
        - fcbmPg13
        - fcbmU
        - fcbmUnrated
      fpbRating?:
        type: string
        description: The video's rating from South Africa's Film and Publication Board.
        enum:
        - fpb10
        - fpb1012Pg
        - fpb13
        - fpb16
        - fpb18
        - fpb79Pg
        - fpbA
        - fpbPg
        - fpbUnrated
        - fpbX18
        - fpbXx
      bbfcRating?:
        type: string
        description: The video's British Board of Film Classification (BBFC) rating.
        enum:
        - bbfc12
        - bbfc12a
        - bbfc15
        - bbfc18
        - bbfcPg
        - bbfcR18
        - bbfcU
        - bbfcUnrated
      kmrbRating?:
        type: string
        description: The video's Korea Media Rating Board (영상물등급위원회) rating. The KMRB rates videos in South Korea.
        enum:
        - kmrb12plus
        - kmrb15plus
        - kmrbAll
        - kmrbR
        - kmrbTeenr
        - kmrbUnrated
      nfrcRating?:
        type: string
        description: The video's rating from the Bulgarian National Film Center.
        enum:
        - nfrcA
        - nfrcB
        - nfrcC
        - nfrcD
        - nfrcUnrated
        - nfrcX
      cnaRating?:
        type: string
        description: The video's rating from Romania's CONSILIUL NATIONAL AL AUDIOVIZUALULUI (CNA).
        enum:
        - cna12
        - cna15
        - cna18
        - cna18plus
        - cnaAp
        - cnaUnrated
      czfilmRating?:
        type: string
        description: The video's rating in the Czech Republic.
        enum:
        - czfilm12
        - czfilm14
        - czfilm18
        - czfilmU
        - czfilmUnrated
      ecbmctRating?:
        type: string
        description: Rating system in Turkey - Evaluation and Classification Board of the Ministry of Culture and Tourism
        enum:
        - ecbmct13a
        - ecbmct13plus
        - ecbmct15a
        - ecbmct15plus
        - ecbmct18plus
        - ecbmct7a
        - ecbmct7plus
        - ecbmctG
        - ecbmctUnrated
    description: 'Ratings schemes. The country-specific ratings are mostly for movies
      and shows. NEXT_ID: 68'
  FanFundingEvent:
    type: object
    properties:
      snippet?: FanFundingEventSnippet
      kind?:
        type: string
        default: youtube#fanFundingEvent
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#fanFundingEvent".'
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID that YouTube assigns to uniquely identify the fan funding event.
    description: A fanFundingEvent resource represents a fan funding event on a YouTube channel. Fan funding events occur when a user gives one-time monetary support to the channel owner.
  FanFundingEventListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      tokenPagination?: TokenPagination
      kind?:
        type: string
        default: youtube#fanFundingEventListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#fanFundingEventListResponse".'
      nextPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
      pageInfo?: PageInfo
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of fan funding events that match the request criteria.
        items: FanFundingEvent
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  FanFundingEventSnippet:
    type: object
    properties:
      supporterDetails?: ChannelProfileDetails
      createdAt?:
        type: string
        description: The date and time when the funding occurred. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      displayString?:
        type: string
        description: A rendered string that displays the fund amount and currency (e.g., "$1.00"). The string is rendered for the given language.
      amountMicros?:
        type: integer
        format: int64
        description: The amount of funding in micros of fund_currency. e.g., 1 is represented
      currency?:
        type: string
        description: The currency in which the fund was made. ISO 4217.
      commentText?:
        type: string
        description: The text contents of the comment left by the user.
      channelId?:
        type: string
        description: Channel id where the funding event occurred.
  GeoPoint:
    type: object
    properties:
      altitude?:
        type: number
        format: double
        description: Altitude above the reference ellipsoid, in meters.
      latitude?:
        type: number
        format: double
        description: Latitude in degrees.
      longitude?:
        type: number
        format: double
        description: Longitude in degrees.
    description: Geographical coordinates of a point, in WGS84.
  GuideCategory:
    type: object
    properties:
      snippet?: GuideCategorySnippet
      kind?:
        type: string
        default: youtube#guideCategory
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#guideCategory".'
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID that YouTube uses to uniquely identify the guide category.
    description: A guideCategory resource identifies a category that YouTube algorithmically assigns based on a channel's content or other indicators, such as the channel's popularity. The list is similar to video categories, with the difference being that a video's uploader can assign a video category but only YouTube can assign a channel category.
  GuideCategoryListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      prevPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
      tokenPagination?: TokenPagination
      kind?:
        type: string
        default: youtube#guideCategoryListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#guideCategoryListResponse".'
      nextPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
      pageInfo?: PageInfo
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of categories that can be associated with YouTube channels. In this map, the category ID is the map key, and its value is the corresponding guideCategory resource.
        items: GuideCategory
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  GuideCategorySnippet:
    type: object
    properties:
      title?:
        type: string
        description: Description of the guide category.
      channelId?:
        type: string
        default: UCBR8-60-B28hp2BmDPdntcQ
    description: Basic details about a guide category.
  I18nLanguage:
    type: object
    properties:
      snippet?: I18nLanguageSnippet
      kind?:
        type: string
        default: youtube#i18nLanguage
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#i18nLanguage".'
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID that YouTube uses to uniquely identify the i18n language.
    description: An i18nLanguage resource identifies a UI language currently supported by YouTube.
  I18nLanguageListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      kind?:
        type: string
        default: youtube#i18nLanguageListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#i18nLanguageListResponse".'
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of supported i18n languages. In this map, the i18n language ID is the map key, and its value is the corresponding i18nLanguage resource.
        items: I18nLanguage
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  I18nLanguageSnippet:
    type: object
    properties:
      hl?:
        type: string
        description: A short BCP-47 code that uniquely identifies a language.
      name?:
        type: string
        description: The human-readable name of the language in the language itself.
    description: Basic details about an i18n language, such as language code and human-readable name.
  I18nRegion:
    type: object
    properties:
      snippet?: I18nRegionSnippet
      kind?:
        type: string
        default: youtube#i18nRegion
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#i18nRegion".'
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID that YouTube uses to uniquely identify the i18n region.
    description: A i18nRegion resource identifies a region where YouTube is available.
  I18nRegionListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      kind?:
        type: string
        default: youtube#i18nRegionListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#i18nRegionListResponse".'
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of regions where YouTube is available. In this map, the i18n region ID is the map key, and its value is the corresponding i18nRegion resource.
        items: I18nRegion
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  I18nRegionSnippet:
    type: object
    properties:
      gl?:
        type: string
        description: The region code as a 2-letter ISO country code.
      name?:
        type: string
        description: The human-readable name of the region.
    description: Basic details about an i18n region, such as region code and human-readable name.
  ImageSettings:
    type: object
    properties:
      bannerTabletExtraHdImageUrl?:
        type: string
        description: Banner image. Tablet size extra high resolution (2560x424).
      bannerTvImageUrl?:
        type: string
        description: Banner image. TV size extra high resolution (2120x1192).
      watchIconImageUrl?:
        type: string
        description: The URL for the image that appears above the top-left corner of the video player. This is a 25-pixel-high image with a flexible width that cannot exceed 170 pixels.
      bannerExternalUrl?:
        type: string
        description: This is used only in update requests; if it's set, we use this URL to generate all of the above banner URLs.
      smallBrandedBannerImageUrl?: LocalizedProperty
      bannerMobileLowImageUrl?:
        type: string
        description: Banner image. Mobile size low resolution (320x88).
      bannerMobileExtraHdImageUrl?:
        type: string
        description: Banner image. Mobile size high resolution (1440x395).
      trackingImageUrl?:
        type: string
        description: The URL for a 1px by 1px tracking pixel that can be used to collect statistics for views of the channel or video pages.
      bannerMobileHdImageUrl?:
        type: string
        description: Banner image. Mobile size high resolution (1280x360).
      bannerTvLowImageUrl?:
        type: string
        description: Banner image. TV size low resolution (854x480).
      bannerTabletLowImageUrl?:
        type: string
        description: Banner image. Tablet size low resolution (1138x188).
      bannerTvHighImageUrl?:
        type: string
        description: Banner image. TV size high resolution (1920x1080).
      bannerTvMediumImageUrl?:
        type: string
        description: Banner image. TV size medium resolution (1280x720).
      bannerMobileMediumHdImageUrl?:
        type: string
        description: Banner image. Mobile size medium/high resolution (960x263).
      largeBrandedBannerImageUrl?: LocalizedProperty
      bannerTabletImageUrl?:
        type: string
        description: Banner image. Tablet size (1707x283).
      smallBrandedBannerImageImapScript?: LocalizedProperty
      bannerImageUrl?:
        type: string
        description: Banner image. Desktop size (1060x175).
      largeBrandedBannerImageImapScript?: LocalizedProperty
      bannerMobileImageUrl?:
        type: string
        description: Banner image. Mobile size (640x175).
      bannerTabletHdImageUrl?:
        type: string
        description: Banner image. Tablet size high resolution (2276x377).
      backgroundImageUrl?: LocalizedProperty
    description: Branding properties for images associated with the channel.
  IngestionInfo:
    type: object
    properties:
      ingestionAddress?:
        type: string
        description: |-
          The primary ingestion URL that you should use to stream video to YouTube. You must stream video to this URL.

          Depending on which application or tool you use to encode your video stream, you may need to enter the stream URL and stream name separately or you may need to concatenate them in the following format:

          STREAM_URL/STREAM_NAME
      backupIngestionAddress?:
        type: string
        description: The backup ingestion URL that you should use to stream video to YouTube. You have the option of simultaneously streaming the content that you are sending to the ingestionAddress to this URL.
      streamName?:
        type: string
        description: The HTTP or RTMP stream name that YouTube assigns to the video stream.
    description: Describes information necessary for ingesting an RTMP or an HTTP stream.
  InvideoBranding:
    type: object
    properties:
      targetChannelId?:
        type: string
      timing?: InvideoTiming
      imageUrl?:
        type: string
      imageBytes?:
        type: string
      position?: InvideoPosition
  InvideoPosition:
    type: object
    properties:
      cornerPosition?:
        type: string
        description: Describes in which corner of the video the visual widget will appear.
        enum:
        - bottomLeft
        - bottomRight
        - topLeft
        - topRight
      type?:
        type: string
        description: Defines the position type.
        enum:
        - corner
    description: Describes the spatial position of a visual widget inside a video. It is a union of various position types, out of which only will be set one.
  InvideoPromotion:
    type: object
    properties:
      defaultTiming?: InvideoTiming
      position?: InvideoPosition
      items?:
        type: array
        description: List of promoted items in decreasing priority.
        items: PromotedItem
      useSmartTiming?:
        type: boolean
        description: Indicates whether the channel's promotional campaign uses "smart timing." This feature attempts to show promotions at a point in the video when they are more likely to be clicked and less likely to disrupt the viewing experience. This feature also picks up a single promotion to show on each video.
    description: Describes an invideo promotion campaign consisting of multiple promoted items. A campaign belongs to a single channel_id.
  InvideoTiming:
    type: object
    properties:
      offsetMs?:
        type: integer
        format: int64
        description: Defines the time at which the promotion will appear. Depending on the value of type the value of the offsetMs field will represent a time offset from the start or from the end of the video, expressed in milliseconds.
      type?:
        type: string
        description: Describes a timing type. If the value is offsetFromStart, then the offsetMs field represents an offset from the start of the video. If the value is offsetFromEnd, then the offsetMs field represents an offset from the end of the video.
        enum:
        - offsetFromEnd
        - offsetFromStart
      durationMs?:
        type: integer
        format: int64
        description: Defines the duration in milliseconds for which the promotion should be displayed. If missing, the client should use the default.
    description: Describes a temporal position of a visual widget inside a video.
  LanguageTag:
    type: object
    properties:
      value?:
        type: string
  LiveBroadcast:
    type: object
    properties:
      snippet?: LiveBroadcastSnippet
      topicDetails?: LiveBroadcastTopicDetails
      kind?:
        type: string
        default: youtube#liveBroadcast
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#liveBroadcast".'
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID that YouTube assigns to uniquely identify the broadcast.
      contentDetails?: LiveBroadcastContentDetails
      statistics?: LiveBroadcastStatistics
      status?: LiveBroadcastStatus
    description: A liveBroadcast resource represents an event that will be streamed, via live video, on YouTube.
  LiveBroadcastContentDetails:
    type: object
    properties:
      monitorStream?: MonitorStreamInfo
      recordFromStart?:
        type: boolean
        description: |-
          Automatically start recording after the event goes live. The default value for this property is true.



          Important: You must also set the enableDvr property's value to true if you want the playback to be available immediately after the broadcast ends. If you set this property's value to true but do not also set the enableDvr property to true, there may be a delay of around one day before the archived video will be available for playback.
      boundStreamId?:
        type: string
        description: This value uniquely identifies the live stream bound to the broadcast.
      enableEmbed?:
        type: boolean
        description: This setting indicates whether the broadcast video can be played in an embedded player. If you choose to archive the video (using the enableArchive property), this setting will also apply to the archived video.
      enableDvr?:
        type: boolean
        description: |-
          This setting determines whether viewers can access DVR controls while watching the video. DVR controls enable the viewer to control the video playback experience by pausing, rewinding, or fast forwarding content. The default value for this property is true.



          Important: You must set the value to true and also set the enableArchive property's value to true if you want to make playback available immediately after the broadcast ends.
      enableLowLatency?:
        type: boolean
        description: Indicates whether this broadcast has low latency enabled.
      enableContentEncryption?:
        type: boolean
        description: This setting indicates whether YouTube should enable content encryption for the broadcast.
      boundStreamLastUpdateTimeMs?:
        type: string
        description: The date and time that the live stream referenced by boundStreamId was last updated.
      startWithSlate?:
        type: boolean
        description: This setting indicates whether the broadcast should automatically begin with an in-stream slate when you update the broadcast's status to live. After updating the status, you then need to send a liveCuepoints.insert request that sets the cuepoint's eventState to end to remove the in-stream slate and make your broadcast stream visible to viewers.
      projection?:
        type: string
        description: The projection format of this broadcast. This defaults to rectangular.
        enum:
        - '360'
        - rectangular
      enableClosedCaptions?:
        type: boolean
        description: This setting indicates whether HTTP POST closed captioning is enabled for this broadcast. The ingestion URL of the closed captions is returned through the liveStreams API. This is mutually exclusive with using the closed_captions_type property, and is equivalent to setting closed_captions_type to CLOSED_CAPTIONS_HTTP_POST.
      closedCaptionsType?:
        type: string
        enum:
        - closedCaptionsDisabled
        - closedCaptionsEmbedded
        - closedCaptionsHttpPost
    description: Detailed settings of a broadcast.
  LiveBroadcastListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      prevPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
      tokenPagination?: TokenPagination
      kind?:
        type: string
        default: youtube#liveBroadcastListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#liveBroadcastListResponse".'
      nextPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
      pageInfo?: PageInfo
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of broadcasts that match the request criteria.
        items: LiveBroadcast
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  LiveBroadcastSnippet:
    type: object
    properties:
      actualStartTime?:
        type: string
        description: The date and time that the broadcast actually started. This information is only available once the broadcast's state is live. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      isDefaultBroadcast?:
        type: boolean
      publishedAt?:
        type: string
        description: The date and time that the broadcast was added to YouTube's live broadcast schedule. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      liveChatId?:
        type: string
        description: The id of the live chat for this broadcast.
      scheduledStartTime?:
        type: string
        description: The date and time that the broadcast is scheduled to start. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      scheduledEndTime?:
        type: string
        description: The date and time that the broadcast is scheduled to end. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      actualEndTime?:
        type: string
        description: The date and time that the broadcast actually ended. This information is only available once the broadcast's state is complete. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      description?:
        type: string
        description: The broadcast's description. As with the title, you can set this field by modifying the broadcast resource or by setting the description field of the corresponding video resource.
      thumbnails?: ThumbnailDetails
      title?:
        type: string
        description: The broadcast's title. Note that the broadcast represents exactly one YouTube video. You can set this field by modifying the broadcast resource or by setting the title field of the corresponding video resource.
      channelId?:
        type: string
        description: The ID that YouTube uses to uniquely identify the channel that is publishing the broadcast.
  LiveBroadcastStatistics:
    type: object
    properties:
      totalChatCount?:
        type: integer
        format: int64
        description: The total number of live chat messages currently on the broadcast. The property and its value will be present if the broadcast is public, has the live chat feature enabled, and has at least one message. Note that this field will not be filled after the broadcast ends. So this property would not identify the number of chat messages for an archived video of a completed live broadcast.
      concurrentViewers?:
        type: integer
        format: int64
        description: The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.
    description: Statistics about the live broadcast. These represent a snapshot of the values at the time of the request. Statistics are only returned for live broadcasts.
  LiveBroadcastStatus:
    type: object
    properties:
      liveBroadcastPriority?:
        type: string
        description: Priority of the live broadcast event (internal state).
        enum:
        - high
        - low
        - normal
      recordingStatus?:
        type: string
        description: The broadcast's recording status.
        enum:
        - notRecording
        - recorded
        - recording
      privacyStatus?:
        type: string
        description: The broadcast's privacy status. Note that the broadcast represents exactly one YouTube video, so the privacy settings are identical to those supported for videos. In addition, you can set this field by modifying the broadcast resource or by setting the privacyStatus field of the corresponding video resource.
        enum:
        - private
        - public
        - unlisted
      lifeCycleStatus?:
        type: string
        description: The broadcast's status. The status can be updated using the API's liveBroadcasts.transition method.
        enum:
        - abandoned
        - complete
        - completeStarting
        - created
        - live
        - liveStarting
        - ready
        - reclaimed
        - revoked
        - testStarting
        - testing
  LiveBroadcastTopic:
    type: object
    properties:
      snippet?: LiveBroadcastTopicSnippet
      type?:
        type: string
        description: The type of the topic.
        enum:
        - videoGame
      unmatched?:
        type: boolean
        description: If this flag is set it means that we have not been able to match the topic title and type provided to a known entity.
  LiveBroadcastTopicDetails:
    type: object
    properties:
      topics?: LiveBroadcastTopic[]
  LiveBroadcastTopicSnippet:
    type: object
    properties:
      releaseDate?:
        type: string
        description: 'The date at which the topic was released. Filled for types:
          videoGame'
      name?:
        type: string
        description: The name of the topic.
  LiveChatBan:
    type: object
    properties:
      snippet?: LiveChatBanSnippet
      kind?:
        type: string
        default: youtube#liveChatBan
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#liveChatBan".'
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID that YouTube assigns to uniquely identify the ban.
    description: A liveChatBan resource represents a ban for a YouTube live chat.
  LiveChatBanSnippet:
    type: object
    properties:
      bannedUserDetails?: ChannelProfileDetails
      liveChatId?:
        type: string
        description: The chat this ban is pertinent to.
      banDurationSeconds?:
        type: integer
        format: int64
        description: The duration of a ban, only filled if the ban has type TEMPORARY.
      type?:
        type: string
        description: The type of ban.
        enum:
        - permanent
        - temporary
  LiveChatFanFundingEventDetails:
    type: object
    properties:
      amountDisplayString?:
        type: string
        description: A rendered string that displays the fund amount and currency to the user.
      userComment?:
        type: string
        description: The comment added by the user to this fan funding event.
      amountMicros?:
        type: integer
        format: int64
        description: The amount of the fund.
      currency?:
        type: string
        description: The currency in which the fund was made.
  LiveChatMessage:
    type: object
    properties:
      snippet?: LiveChatMessageSnippet
      kind?:
        type: string
        default: youtube#liveChatMessage
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#liveChatMessage".'
      authorDetails?: LiveChatMessageAuthorDetails
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID that YouTube assigns to uniquely identify the message.
    description: A liveChatMessage resource represents a chat message in a YouTube Live Chat.
  LiveChatMessageAuthorDetails:
    type: object
    properties:
      isVerified?:
        type: boolean
        description: Whether the author's identity has been verified by YouTube.
      channelUrl?:
        type: string
        description: The channel's URL.
      displayName?:
        type: string
        description: The channel's display name.
      isChatModerator?:
        type: boolean
        description: Whether the author is a moderator of the live chat.
      profileImageUrl?:
        type: string
        description: The channels's avatar URL.
      channelId?:
        type: string
        description: The YouTube channel ID.
      isChatSponsor?:
        type: boolean
        description: Whether the author is a sponsor of the live chat.
      isChatOwner?:
        type: boolean
        description: Whether the author is the owner of the live chat.
  LiveChatMessageDeletedDetails:
    type: object
    properties:
      deletedMessageId?:
        type: string
  LiveChatMessageListResponse:
    type: object
    properties:
      offlineAt?:
        type: datetime
        description: The date and time when the underlying stream went offline. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      tokenPagination?: TokenPagination
      pollingIntervalMillis?:
        type: integer
        format: int32
        description: The amount of time the client should wait before polling again.
      kind?:
        type: string
        default: youtube#liveChatMessageListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#liveChatMessageListResponse".'
      nextPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
      pageInfo?: PageInfo
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of live chat messages.
        items: LiveChatMessage
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  LiveChatMessageRetractedDetails:
    type: object
    properties:
      retractedMessageId?:
        type: string
  LiveChatMessageSnippet:
    type: object
    properties:
      publishedAt?:
        type: datetime
        description: The date and time when the message was orignally published. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      messageRetractedDetails?: LiveChatMessageRetractedDetails
      textMessageDetails?: LiveChatTextMessageDetails
      authorChannelId?:
        type: string
        description: The ID of the user that authored this message, this field is not always filled. textMessageEvent - the user that wrote the message fanFundingEvent - the user that funded the broadcast newSponsorEvent - the user that just became a sponsor messageDeletedEvent - the moderator that took the action messageRetractedEvent - the author that retracted their message userBannedEvent - the moderator that took the action
      pollClosedDetails?: LiveChatPollClosedDetails
      type?:
        type: string
        description: The type of message, this will always be present, it determines the contents of the message as well as which fields will be present.
        enum:
        - chatEndedEvent
        - fanFundingEvent
        - messageDeletedEvent
        - messageRetractedEvent
        - newSponsorEvent
        - pollClosedEvent
        - pollEditedEvent
        - pollOpenedEvent
        - pollVotedEvent
        - sponsorOnlyModeEndedEvent
        - sponsorOnlyModeStartedEvent
        - textMessageEvent
        - tombstone
        - userBannedEvent
      messageDeletedDetails?: LiveChatMessageDeletedDetails
      displayMessage?:
        type: string
        description: Contains a string that can be displayed to the user. If this field is not present the message is silent, at the moment only messages of type TOMBSTONE and CHAT_ENDED_EVENT are silent.
      hasDisplayContent?:
        type: boolean
        description: Whether the message has display content that should be displayed to users.
      pollOpenedDetails?: LiveChatPollOpenedDetails
      liveChatId?:
        type: string
      pollVotedDetails?: LiveChatPollVotedDetails
      userBannedDetails?: LiveChatUserBannedMessageDetails
      pollEditedDetails?: LiveChatPollEditedDetails
      fanFundingEventDetails?: LiveChatFanFundingEventDetails
  LiveChatModerator:
    type: object
    properties:
      snippet?: LiveChatModeratorSnippet
      kind?:
        type: string
        default: youtube#liveChatModerator
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#liveChatModerator".'
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID that YouTube assigns to uniquely identify the moderator.
    description: A liveChatModerator resource represents a moderator for a YouTube live chat. A chat moderator has the ability to ban/unban users from a chat, remove message, etc.
  LiveChatModeratorListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      prevPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
      tokenPagination?: TokenPagination
      kind?:
        type: string
        default: youtube#liveChatModeratorListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#liveChatModeratorListResponse".'
      nextPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
      pageInfo?: PageInfo
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of moderators that match the request criteria.
        items: LiveChatModerator
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  LiveChatModeratorSnippet:
    type: object
    properties:
      liveChatId?:
        type: string
        description: The ID of the live chat this moderator can act on.
      moderatorDetails?: ChannelProfileDetails
  LiveChatPollClosedDetails:
    type: object
    properties:
      pollId?:
        type: string
        description: The id of the poll that was closed.
  LiveChatPollEditedDetails:
    type: object
    properties:
      id?:
        type: string
      items?: LiveChatPollItem[]
      prompt?:
        type: string
  LiveChatPollItem:
    type: object
    properties:
      itemId?:
        type: string
      description?:
        type: string
        description: Plain text description of the item.
  LiveChatPollOpenedDetails:
    type: object
    properties:
      id?:
        type: string
      items?: LiveChatPollItem[]
      prompt?:
        type: string
  LiveChatPollVotedDetails:
    type: object
    properties:
      itemId?:
        type: string
        description: The poll item the user chose.
      pollId?:
        type: string
        description: The poll the user voted on.
  LiveChatTextMessageDetails:
    type: object
    properties:
      messageText?:
        type: string
        description: The user's message.
  LiveChatUserBannedMessageDetails:
    type: object
    properties:
      bannedUserDetails?: ChannelProfileDetails
      banType?:
        type: string
        description: The type of ban.
        enum:
        - permanent
        - temporary
      banDurationSeconds?:
        type: integer
        format: int64
        description: The duration of the ban. This property is only present if the banType is temporary.
  LiveStream:
    type: object
    properties:
      snippet?: LiveStreamSnippet
      kind?:
        type: string
        default: youtube#liveStream
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#liveStream".'
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID that YouTube assigns to uniquely identify the stream.
      cdn?: CdnSettings
      contentDetails?: LiveStreamContentDetails
      status?: LiveStreamStatus
    description: A live stream describes a live ingestion point.
  LiveStreamConfigurationIssue:
    type: object
    properties:
      severity?:
        type: string
        description: How severe this issue is to the stream.
        enum:
        - error
        - info
        - warning
      reason?:
        type: string
        description: The short-form reason for this issue.
      description?:
        type: string
        description: The long-form description of the issue and how to resolve it.
      type?:
        type: string
        description: The kind of error happening.
        enum:
        - audioBitrateHigh
        - audioBitrateLow
        - audioBitrateMismatch
        - audioCodec
        - audioCodecMismatch
        - audioSampleRate
        - audioSampleRateMismatch
        - audioStereoMismatch
        - audioTooManyChannels
        - badContainer
        - bitrateHigh
        - bitrateLow
        - frameRateHigh
        - framerateMismatch
        - gopMismatch
        - gopSizeLong
        - gopSizeOver
        - gopSizeShort
        - interlacedVideo
        - multipleAudioStreams
        - multipleVideoStreams
        - noAudioStream
        - noVideoStream
        - openGop
        - resolutionMismatch
        - videoBitrateMismatch
        - videoCodec
        - videoCodecMismatch
        - videoIngestionStarved
        - videoInterlaceMismatch
        - videoProfileMismatch
        - videoResolutionSuboptimal
        - videoResolutionUnsupported
  LiveStreamContentDetails:
    type: object
    properties:
      closedCaptionsIngestionUrl?:
        type: string
        description: The ingestion URL where the closed captions of this stream are sent.
      isReusable?:
        type: boolean
        description: "Indicates whether the stream is reusable, which means that it\
          \ can be bound to multiple broadcasts. It is common for broadcasters to\
          \ reuse the same stream for many different broadcasts if those broadcasts\
          \ occur at different times.\n\nIf you set this value to false, then the\
          \ stream will not be reusable, which means that it can only be bound to\
          \ one broadcast. Non-reusable streams differ from reusable streams in the\
          \ following ways:  \n- A non-reusable stream can only be bound to one broadcast.\
          \ \n- A non-reusable stream might be deleted by an automated process after\
          \ the broadcast ends. \n- The  liveStreams.list method does not list non-reusable\
          \ streams if you call the method and set the mine parameter to true. The\
          \ only way to use that method to retrieve the resource for a non-reusable\
          \ stream is to use the id parameter to identify the stream."
    description: Detailed settings of a stream.
  LiveStreamHealthStatus:
    type: object
    properties:
      lastUpdateTimeSeconds?:
        type: integer
        format: int64
        description: The last time this status was updated (in seconds)
      configurationIssues?:
        type: array
        description: The configurations issues on this stream
        items: LiveStreamConfigurationIssue
      status?:
        type: string
        description: The status code of this stream
        enum:
        - bad
        - good
        - noData
        - ok
        - revoked
  LiveStreamListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      prevPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
      tokenPagination?: TokenPagination
      kind?:
        type: string
        default: youtube#liveStreamListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#liveStreamListResponse".'
      nextPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
      pageInfo?: PageInfo
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of live streams that match the request criteria.
        items: LiveStream
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  LiveStreamSnippet:
    type: object
    properties:
      publishedAt?:
        type: datetime
        description: The date and time that the stream was created. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      description?:
        type: string
        description: The stream's description. The value cannot be longer than 10000 characters.
      title?:
        type: string
        description: The stream's title. The value must be between 1 and 128 characters long.
      channelId?:
        type: string
        description: The ID that YouTube uses to uniquely identify the channel that is transmitting the stream.
      isDefaultStream?:
        type: boolean
  LiveStreamStatus:
    type: object
    properties:
      healthStatus?: LiveStreamHealthStatus
      streamStatus?:
        type: string
        enum:
        - active
        - created
        - error
        - inactive
        - ready
    description: Brief description of the live stream status.
  LocalizedProperty:
    type: object
    properties:
      default?:
        type: string
      defaultLanguage?: LanguageTag
      localized?: LocalizedString[]
  LocalizedString:
    type: object
    properties:
      language?:
        type: string
      value?:
        type: string
  MonitorStreamInfo:
    type: object
    properties:
      enableMonitorStream?:
        type: boolean
        description: |-
          This value determines whether the monitor stream is enabled for the broadcast. If the monitor stream is enabled, then YouTube will broadcast the event content on a special stream intended only for the broadcaster's consumption. The broadcaster can use the stream to review the event content and also to identify the optimal times to insert cuepoints.

          You need to set this value to true if you intend to have a broadcast delay for your event.

          Note: This property cannot be updated once the broadcast is in the testing or live state.
      embedHtml?:
        type: string
        description: HTML code that embeds a player that plays the monitor stream.
      broadcastStreamDelayMs?:
        type: integer
        format: int32
        description: If you have set the enableMonitorStream property to true, then this property determines the length of the live broadcast delay.
    description: Settings and Info of the monitor stream
  PageInfo:
    type: object
    properties:
      totalResults?:
        type: integer
        format: int32
        description: The total number of results in the result set.
      resultsPerPage?:
        type: integer
        format: int32
        description: The number of results included in the API response.
    description: Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
  Playlist:
    type: object
    properties:
      snippet?: PlaylistSnippet
      localizations?:
        type: object
        description: Localizations for different languages
      kind?:
        type: string
        default: youtube#playlist
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#playlist".'
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID that YouTube uses to uniquely identify the playlist.
      contentDetails?: PlaylistContentDetails
      player?: PlaylistPlayer
      status?: PlaylistStatus
    description: "A playlist resource represents a YouTube playlist. A playlist is\
      \ a collection of videos that can be viewed sequentially and shared with other\
      \ users. A playlist can contain up to 200 videos, and YouTube does not limit\
      \ the number of playlists that each user creates. By default, playlists are\
      \ publicly visible to other users, but playlists can be public or private.\n\
      \nYouTube also uses playlists to identify special collections of videos for\
      \ a channel, such as:  \n- uploaded videos \n- favorite videos \n- positively\
      \ rated (liked) videos \n- watch history \n- watch later  To be more specific,\
      \ these lists are associated with a channel, which is a collection of a person,\
      \ group, or company's videos, playlists, and other YouTube information. You\
      \ can retrieve the playlist IDs for each of these lists from the  channel resource\
      \ for a given channel.\n\nYou can then use the   playlistItems.list method to\
      \ retrieve any of those lists. You can also add or remove items from those lists\
      \ by calling the   playlistItems.insert and   playlistItems.delete methods."
  PlaylistContentDetails:
    type: object
    properties:
      itemCount?:
        type: integer
        format: int32
        description: The number of videos in the playlist.
  PlaylistItem:
    type: object
    properties:
      snippet?: PlaylistItemSnippet
      kind?:
        type: string
        default: youtube#playlistItem
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#playlistItem".'
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID that YouTube uses to uniquely identify the playlist item.
      contentDetails?: PlaylistItemContentDetails
      status?: PlaylistItemStatus
    description: "A playlistItem resource identifies another resource, such as a video,\
      \ that is included in a playlist. In addition, the playlistItem  resource contains\
      \ details about the included resource that pertain specifically to how that\
      \ resource is used in that playlist.\n\nYouTube uses playlists to identify special\
      \ collections of videos for a channel, such as:  \n- uploaded videos \n- favorite\
      \ videos \n- positively rated (liked) videos \n- watch history \n- watch later\
      \  To be more specific, these lists are associated with a channel, which is\
      \ a collection of a person, group, or company's videos, playlists, and other\
      \ YouTube information.\n\nYou can retrieve the playlist IDs for each of these\
      \ lists from the  channel resource  for a given channel. You can then use the\
      \   playlistItems.list method to retrieve any of those lists. You can also add\
      \ or remove items from those lists by calling the   playlistItems.insert and\
      \   playlistItems.delete methods. For example, if a user gives a positive rating\
      \ to a video, you would insert that video into the liked videos playlist for\
      \ that user's channel."
  PlaylistItemContentDetails:
    type: object
    properties:
      note?:
        type: string
        description: A user-generated note for this item.
      videoId?:
        type: string
        description: The ID that YouTube uses to uniquely identify a video. To retrieve the video resource, set the id query parameter to this value in your API request.
      endAt?:
        type: string
        description: The time, measured in seconds from the start of the video, when the video should stop playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) By default, assume that the video.endTime is the end of the video.
      startAt?:
        type: string
        description: The time, measured in seconds from the start of the video, when the video should start playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) The default value is 0.
  PlaylistItemListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      prevPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
      tokenPagination?: TokenPagination
      kind?:
        type: string
        default: youtube#playlistItemListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#playlistItemListResponse".'
      nextPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
      pageInfo?: PageInfo
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of playlist items that match the request criteria.
        items: PlaylistItem
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  PlaylistItemSnippet:
    type: object
    properties:
      playlistId?:
        type: string
        description: The ID that YouTube uses to uniquely identify the playlist that the playlist item is in.
      resourceId?: ResourceId
      publishedAt?:
        type: string
        description: The date and time that the item was added to the playlist. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      description?:
        type: string
        description: The item's description.
      position?:
        type: integer
        format: int32
        description: The order in which the item appears in the playlist. The value uses a zero-based index, so the first item has a position of 0, the second item has a position of 1, and so forth.
      thumbnails?: ThumbnailDetails
      title?:
        type: string
        description: The item's title.
      channelId?:
        type: string
        description: The ID that YouTube uses to uniquely identify the user that added the item to the playlist.
      channelTitle?:
        type: string
        description: Channel title for the channel that the playlist item belongs to.
    description: Basic details about a playlist, including title, description and thumbnails.
  PlaylistItemStatus:
    type: object
    properties:
      privacyStatus?:
        type: string
        description: This resource's privacy status.
        enum:
        - private
        - public
        - unlisted
    description: Information about the playlist item's privacy status.
  PlaylistListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      prevPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
      tokenPagination?: TokenPagination
      kind?:
        type: string
        default: youtube#playlistListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#playlistListResponse".'
      nextPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
      pageInfo?: PageInfo
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of playlists that match the request criteria.
        items: Playlist
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  PlaylistLocalization:
    type: object
    properties:
      description?:
        type: string
        description: The localized strings for playlist's description.
      title?:
        type: string
        description: The localized strings for playlist's title.
    description: Playlist localization setting
  PlaylistPlayer:
    type: object
    properties:
      embedHtml?:
        type: string
        description: An <iframe> tag that embeds a player that will play the playlist.
  PlaylistSnippet:
    type: object
    properties:
      defaultLanguage?:
        type: string
        description: The language of the playlist's default title and description.
      publishedAt?:
        type: string
        description: The date and time that the playlist was created. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      localized?: PlaylistLocalization
      description?:
        type: string
        description: The playlist's description.
      thumbnails?: ThumbnailDetails
      title?:
        type: string
        description: The playlist's title.
      channelId?:
        type: string
        description: The ID that YouTube uses to uniquely identify the channel that published the playlist.
      channelTitle?:
        type: string
        description: The channel title of the channel that the video belongs to.
      tags?:
        type: array
        description: Keyword tags associated with the playlist.
        items:
          type: string
    description: Basic details about a playlist, including title, description and thumbnails.
  PlaylistStatus:
    type: object
    properties:
      privacyStatus?:
        type: string
        description: The playlist's privacy status.
        enum:
        - private
        - public
        - unlisted
  PromotedItem:
    type: object
    properties:
      timing?: InvideoTiming
      customMessage?:
        type: string
        description: A custom message to display for this promotion. This field is currently ignored unless the promoted item is a website.
      id?: PromotedItemId
      promotedByContentOwner?:
        type: boolean
        description: If true, the content owner's name will be used when displaying the promotion. This field can only be set when the update is made on behalf of the content owner.
    description: Describes a single promoted item.
  PromotedItemId:
    type: object
    properties:
      websiteUrl?:
        type: string
        description: If the promoted item represents a website, this field represents the url pointing to the website. This field will be present only if type has the value website.
      recentlyUploadedBy?:
        type: string
        description: If type is recentUpload, this field identifies the channel from which to take the recent upload. If missing, the channel is assumed to be the same channel for which the invideoPromotion is set.
      videoId?:
        type: string
        description: If the promoted item represents a video, this field represents the unique YouTube ID identifying it. This field will be present only if type has the value video.
      type?:
        type: string
        description: Describes the type of the promoted item.
        enum:
        - recentUpload
        - video
        - website
    description: Describes a single promoted item id. It is a union of various possible types.
  PropertyValue:
    type: object
    properties:
      property?:
        type: string
        description: A property.
      value?:
        type: string
        description: The property's value.
    description: A pair Property / Value.
  ResourceId:
    type: object
    properties:
      playlistId?:
        type: string
        description: The ID that YouTube uses to uniquely identify the referred resource, if that resource is a playlist. This property is only present if the resourceId.kind value is youtube#playlist.
      kind?:
        type: string
        description: The type of the API resource.
      videoId?:
        type: string
        description: The ID that YouTube uses to uniquely identify the referred resource, if that resource is a video. This property is only present if the resourceId.kind value is youtube#video.
      channelId?:
        type: string
        description: The ID that YouTube uses to uniquely identify the referred resource, if that resource is a channel. This property is only present if the resourceId.kind value is youtube#channel.
    description: A resource id is a generic reference that points to another YouTube resource.
  SearchListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      prevPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
      regionCode?:
        type: string
      tokenPagination?: TokenPagination
      kind?:
        type: string
        default: youtube#searchListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#searchListResponse".'
      nextPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
      pageInfo?: PageInfo
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of results that match the search criteria.
        items: SearchResult
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  SearchResult:
    type: object
    properties:
      snippet?: SearchResultSnippet
      kind?:
        type: string
        default: youtube#searchResult
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#searchResult".'
      etag?:
        type: string
        description: Etag of this resource.
      id?: ResourceId
    description: A search result contains information about a YouTube video, channel, or playlist that matches the search parameters specified in an API request. While a search result points to a uniquely identifiable resource, like a video, it does not have its own persistent data.
  SearchResultSnippet:
    type: object
    properties:
      publishedAt?:
        type: string
        description: The creation date and time of the resource that the search result identifies. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      description?:
        type: string
        description: A description of the search result.
      thumbnails?: ThumbnailDetails
      title?:
        type: string
        description: The title of the search result.
      channelId?:
        type: string
        description: The value that YouTube uses to uniquely identify the channel that published the resource that the search result identifies.
      channelTitle?:
        type: string
        description: The title of the channel that published the resource that the search result identifies.
      liveBroadcastContent?:
        type: string
        description: It indicates if the resource (video or channel) has upcoming/active live broadcast content. Or it's "none" if there is not any upcoming/active live broadcasts.
        enum:
        - live
        - none
        - upcoming
    description: Basic details about a search result, including title, description and thumbnails of the item referenced by the search result.
  Sponsor:
    type: object
    properties:
      snippet?: SponsorSnippet
      kind?:
        type: string
        default: youtube#sponsor
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#sponsor".'
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID that YouTube assigns to uniquely identify the sponsor.
    description: A sponsor resource represents a sponsor for a YouTube channel. A sponsor provides recurring monetary support to a creator and receives special benefits.
  SponsorListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      tokenPagination?: TokenPagination
      kind?:
        type: string
        default: youtube#sponsorListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#sponsorListResponse".'
      nextPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
      pageInfo?: PageInfo
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of sponsors that match the request criteria.
        items: Sponsor
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  SponsorSnippet:
    type: object
    properties:
      sponsorSince?:
        type: datetime
        description: The date and time when the user became a sponsor. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      sponsorDetails?: ChannelProfileDetails
      channelId?:
        type: string
        description: The id of the channel being sponsored.
  Subscription:
    type: object
    properties:
      snippet?: SubscriptionSnippet
      subscriberSnippet?: SubscriptionSubscriberSnippet
      kind?:
        type: string
        default: youtube#subscription
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#subscription".'
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID that YouTube uses to uniquely identify the subscription.
      contentDetails?: SubscriptionContentDetails
    description: A subscription resource contains information about a YouTube user subscription. A subscription notifies a user when new videos are added to a channel or when another user takes one of several actions on YouTube, such as uploading a video, rating a video, or commenting on a video.
  SubscriptionContentDetails:
    type: object
    properties:
      newItemCount?:
        type: integer
        format: int32
        description: The number of new items in the subscription since its content was last read.
      activityType?:
        type: string
        description: The type of activity this subscription is for (only uploads, everything).
        enum:
        - all
        - uploads
      totalItemCount?:
        type: integer
        format: int32
        description: The approximate number of items that the subscription points to.
    description: Details about the content to witch a subscription refers.
  SubscriptionListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      prevPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
      tokenPagination?: TokenPagination
      kind?:
        type: string
        default: youtube#subscriptionListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#subscriptionListResponse".'
      nextPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
      pageInfo?: PageInfo
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of subscriptions that match the request criteria.
        items: Subscription
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  SubscriptionSnippet:
    type: object
    properties:
      resourceId?: ResourceId
      publishedAt?:
        type: string
        description: The date and time that the subscription was created. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      description?:
        type: string
        description: The subscription's details.
      thumbnails?: ThumbnailDetails
      title?:
        type: string
        description: The subscription's title.
      channelId?:
        type: string
        description: The ID that YouTube uses to uniquely identify the subscriber's channel.
      channelTitle?:
        type: string
        description: Channel title for the channel that the subscription belongs to.
    description: Basic details about a subscription, including title, description and thumbnails of the subscribed item.
  SubscriptionSubscriberSnippet:
    type: object
    properties:
      description?:
        type: string
        description: The description of the subscriber.
      thumbnails?: ThumbnailDetails
      title?:
        type: string
        description: The title of the subscriber.
      channelId?:
        type: string
        description: The channel ID of the subscriber.
    description: Basic details about a subscription's subscriber including title, description, channel ID and thumbnails.
  Thumbnail:
    type: object
    properties:
      width?:
        type: integer
        format: int32
        description: (Optional) Width of the thumbnail image.
      url?:
        type: string
        description: The thumbnail image's URL.
      height?:
        type: integer
        format: int32
        description: (Optional) Height of the thumbnail image.
    description: A thumbnail is an image representing a YouTube resource.
  ThumbnailDetails:
    type: object
    properties:
      standard?: Thumbnail
      default?: Thumbnail
      high?: Thumbnail
      maxres?: Thumbnail
      medium?: Thumbnail
    description: Internal representation of thumbnails for a YouTube resource.
  ThumbnailSetResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      kind?:
        type: string
        default: youtube#thumbnailSetResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#thumbnailSetResponse".'
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of thumbnails.
        items: ThumbnailDetails
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  TokenPagination:
    type: object
    description: Stub token pagination template to suppress results.
  Video:
    type: object
    properties:
      snippet?: VideoSnippet
      fileDetails?: VideoFileDetails
      monetizationDetails?: VideoMonetizationDetails
      localizations?:
        type: object
        description: List with all localizations.
      kind?:
        type: string
        default: youtube#video
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#video".'
      recordingDetails?: VideoRecordingDetails
      projectDetails?: VideoProjectDetails
      contentDetails?: VideoContentDetails
      topicDetails?: VideoTopicDetails
      liveStreamingDetails?: VideoLiveStreamingDetails
      processingDetails?: VideoProcessingDetails
      ageGating?: VideoAgeGating
      etag?:
        type: string
        description: Etag of this resource.
      suggestions?: VideoSuggestions
      id?:
        type: string
        description: The ID that YouTube uses to uniquely identify the video.
      player?: VideoPlayer
      statistics?: VideoStatistics
      status?: VideoStatus
    description: A video resource represents a YouTube video.
  VideoAbuseReport:
    type: object
    properties:
      comments?:
        type: string
        description: Additional comments regarding the abuse report.
      reasonId?:
        type: string
        description: The high-level, or primary, reason that the content is abusive. The value is an abuse report reason ID.
      secondaryReasonId?:
        type: string
        description: The specific, or secondary, reason that this content is abusive (if available). The value is an abuse report reason ID that is a valid secondary reason for the primary reason.
      language?:
        type: string
        description: The language that the content was viewed in.
      videoId?:
        type: string
        description: The ID that YouTube uses to uniquely identify the video.
  VideoAbuseReportReason:
    type: object
    properties:
      snippet?: VideoAbuseReportReasonSnippet
      kind?:
        type: string
        default: youtube#videoAbuseReportReason
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#videoAbuseReportReason".'
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID of this abuse report reason.
    description: A videoAbuseReportReason resource identifies a reason that a video could be reported as abusive. Video abuse report reasons are used with video.ReportAbuse.
  VideoAbuseReportReasonListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      kind?:
        type: string
        default: youtube#videoAbuseReportReasonListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#videoAbuseReportReasonListResponse".'
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of valid abuse reasons that are used with video.ReportAbuse.
        items: VideoAbuseReportReason
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  VideoAbuseReportReasonSnippet:
    type: object
    properties:
      secondaryReasons?:
        type: array
        description: The secondary reasons associated with this reason, if any are available. (There might be 0 or more.)
        items: VideoAbuseReportSecondaryReason
      label?:
        type: string
        description: The localized label belonging to this abuse report reason.
    description: Basic details about a video category, such as its localized title.
  VideoAbuseReportSecondaryReason:
    type: object
    properties:
      id?:
        type: string
        description: The ID of this abuse report secondary reason.
      label?:
        type: string
        description: The localized label for this abuse report secondary reason.
  VideoAgeGating:
    type: object
    properties:
      alcoholContent?:
        type: boolean
        description: Indicates whether or not the video has alcoholic beverage content. Only users of legal purchasing age in a particular country, as identified by ICAP, can view the content.
      restricted?:
        type: boolean
        description: Age-restricted trailers. For redband trailers and adult-rated video-games. Only users aged 18+ can view the content. The the field is true the content is restricted to viewers aged 18+. Otherwise The field won't be present.
      videoGameRating?:
        type: string
        description: Video game rating, if any.
        enum:
        - anyone
        - m15Plus
        - m16Plus
        - m17Plus
  VideoCategory:
    type: object
    properties:
      snippet?: VideoCategorySnippet
      kind?:
        type: string
        default: youtube#videoCategory
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#videoCategory".'
      etag?:
        type: string
        description: Etag of this resource.
      id?:
        type: string
        description: The ID that YouTube uses to uniquely identify the video category.
    description: A videoCategory resource identifies a category that has been or could be associated with uploaded videos.
  VideoCategoryListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      prevPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
      tokenPagination?: TokenPagination
      kind?:
        type: string
        default: youtube#videoCategoryListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#videoCategoryListResponse".'
      nextPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
      pageInfo?: PageInfo
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of video categories that can be associated with YouTube videos. In this map, the video category ID is the map key, and its value is the corresponding videoCategory resource.
        items: VideoCategory
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  VideoCategorySnippet:
    type: object
    properties:
      title?:
        type: string
        description: The video category's title.
      channelId?:
        type: string
        default: UCBR8-60-B28hp2BmDPdntcQ
        description: The YouTube channel that created the video category.
      assignable?:
        type: boolean
    description: Basic details about a video category, such as its localized title.
  VideoContentDetails:
    type: object
    properties:
      duration?:
        type: string
        description: 'The length of the video. The tag value is an ISO 8601 duration
          in the format PT#M#S, in which the letters PT indicate that the value specifies
          a period of time, and the letters M and S refer to length in minutes and
          seconds, respectively. The # characters preceding the M and S letters are
          both integers that specify the number of minutes (or seconds) of the video.
          For example, a value of PT15M51S indicates that the video is 15 minutes
          and 51 seconds long.'
      licensedContent?:
        type: boolean
        description: The value of is_license_content indicates whether the video is licensed content.
      countryRestriction?: AccessPolicy
      caption?:
        type: string
        description: The value of captions indicates whether the video has captions or not.
        enum:
        - 'false'
        - 'true'
      contentRating?: ContentRating
      definition?:
        type: string
        description: The value of definition indicates whether the video is available in high definition or only in standard definition.
        enum:
        - hd
        - sd
      hasCustomThumbnail?:
        type: boolean
        description: Indicates whether the video uploader has provided a custom thumbnail image for the video. This property is only visible to the video uploader.
      projection?:
        type: string
        description: Specifies the projection format of the video.
        enum:
        - '360'
        - rectangular
      regionRestriction?: VideoContentDetailsRegionRestriction
      dimension?:
        type: string
        description: The value of dimension indicates whether the video is available in 3D or in 2D.
    description: Details about the content of a YouTube Video.
  VideoContentDetailsRegionRestriction:
    type: object
    properties:
      blocked?:
        type: array
        description: A list of region codes that identify countries where the video is blocked. If this property is present and a country is not listed in its value, then the video is viewable in that country. If this property is present and contains an empty list, the video is viewable in all countries.
        items:
          type: string
      allowed?:
        type: array
        description: A list of region codes that identify countries where the video is viewable. If this property is present and a country is not listed in its value, then the video is blocked from appearing in that country. If this property is present and contains an empty list, the video is blocked in all countries.
        items:
          type: string
    description: DEPRECATED Region restriction of the video.
  VideoFileDetails:
    type: object
    properties:
      container?:
        type: string
        description: The uploaded video file's container format.
      fileName?:
        type: string
        description: The uploaded file's name. This field is present whether a video file or another type of file was uploaded.
      creationTime?:
        type: string
        description: "The date and time when the uploaded video file was created.\
          \ The value is specified in ISO 8601 format. Currently, the following ISO\
          \ 8601 formats are supported:  \n- Date only: YYYY-MM-DD \n- Naive time:\
          \ YYYY-MM-DDTHH:MM:SS \n- Time with timezone: YYYY-MM-DDTHH:MM:SS+HH:MM"
      fileSize?:
        type: integer
        format: int64
        description: The uploaded file's size in bytes. This field is present whether a video file or another type of file was uploaded.
      videoStreams?:
        type: array
        description: A list of video streams contained in the uploaded video file. Each item in the list contains detailed metadata about a video stream.
        items: VideoFileDetailsVideoStream
      audioStreams?:
        type: array
        description: A list of audio streams contained in the uploaded video file. Each item in the list contains detailed metadata about an audio stream.
        items: VideoFileDetailsAudioStream
      bitrateBps?:
        type: integer
        format: int64
        description: The uploaded video file's combined (video and audio) bitrate in bits per second.
      durationMs?:
        type: integer
        format: int64
        description: The length of the uploaded video in milliseconds.
      fileType?:
        type: string
        description: The uploaded file's type as detected by YouTube's video processing engine. Currently, YouTube only processes video files, but this field is present whether a video file or another type of file was uploaded.
        enum:
        - archive
        - audio
        - document
        - image
        - other
        - project
        - video
    description: Describes original video file properties, including technical details about audio and video streams, but also metadata information like content length, digitization time, or geotagging information.
  VideoFileDetailsAudioStream:
    type: object
    properties:
      channelCount?:
        type: integer
        format: int32
        description: The number of audio channels that the stream contains.
      codec?:
        type: string
        description: The audio codec that the stream uses.
      vendor?:
        type: string
        description: A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.
      bitrateBps?:
        type: integer
        format: int64
        description: The audio stream's bitrate, in bits per second.
    description: Information about an audio stream.
  VideoFileDetailsVideoStream:
    type: object
    properties:
      codec?:
        type: string
        description: The video codec that the stream uses.
      vendor?:
        type: string
        description: A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.
      rotation?:
        type: string
        description: The amount that YouTube needs to rotate the original source content to properly display the video.
        enum:
        - clockwise
        - counterClockwise
        - none
        - other
        - upsideDown
      frameRateFps?:
        type: number
        format: double
        description: The video stream's frame rate, in frames per second.
      aspectRatio?:
        type: number
        format: double
        description: The video content's display aspect ratio, which specifies the aspect ratio in which the video should be displayed.
      heightPixels?:
        type: integer
        format: int32
        description: The encoded video content's height in pixels.
      bitrateBps?:
        type: integer
        format: int64
        description: The video stream's bitrate, in bits per second.
      widthPixels?:
        type: integer
        format: int32
        description: The encoded video content's width in pixels. You can calculate the video's encoding aspect ratio as width_pixels / height_pixels.
    description: Information about a video stream.
  VideoGetRatingResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      kind?:
        type: string
        default: youtube#videoGetRatingResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#videoGetRatingResponse".'
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of ratings that match the request criteria.
        items: VideoRating
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  VideoListResponse:
    type: object
    properties:
      eventId?:
        type: string
        description: Serialized EventId of the request which produced this response.
      prevPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
      tokenPagination?: TokenPagination
      kind?:
        type: string
        default: youtube#videoListResponse
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "youtube#videoListResponse".'
      nextPageToken?:
        type: string
        description: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
      pageInfo?: PageInfo
      etag?:
        type: string
        description: Etag of this resource.
      items?:
        type: array
        description: A list of videos that match the request criteria.
        items: Video
      visitorId?:
        type: string
        description: The visitorId identifies the visitor.
  VideoLiveStreamingDetails:
    type: object
    properties:
      activeLiveChatId?:
        type: string
        description: The ID of the currently active live chat attached to this video. This field is filled only if the video is a currently live broadcast that has live chat. Once the broadcast transitions to complete this field will be removed and the live chat closed down. For persistent broadcasts that live chat id will no longer be tied to this video but rather to the new video being displayed at the persistent page.
      actualStartTime?:
        type: datetime
        description: The time that the broadcast actually started. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. This value will not be available until the broadcast begins.
      scheduledStartTime?:
        type: datetime
        description: The time that the broadcast is scheduled to begin. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      scheduledEndTime?:
        type: datetime
        description: The time that the broadcast is scheduled to end. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. If the value is empty or the property is not present, then the broadcast is scheduled to continue indefinitely.
      actualEndTime?:
        type: datetime
        description: The time that the broadcast actually ended. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. This value will not be available until the broadcast is over.
      concurrentViewers?:
        type: integer
        format: int64
        description: The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.
    description: Details about the live streaming metadata.
  VideoLocalization:
    type: object
    properties:
      description?:
        type: string
        description: Localized version of the video's description.
      title?:
        type: string
        description: Localized version of the video's title.
    description: Localized versions of certain video properties (e.g. title).
  VideoMonetizationDetails:
    type: object
    properties:
      access?: AccessPolicy
    description: Details about monetization of a YouTube Video.
  VideoPlayer:
    type: object
    properties:
      embedHeight?:
        type: integer
        format: int64
      embedWidth?:
        type: integer
        format: int64
        description: The embed width
      embedHtml?:
        type: string
        description: An <iframe> tag that embeds a player that will play the video.
    description: Player to be used for a video playback.
  VideoProcessingDetails:
    type: object
    properties:
      processingStatus?:
        type: string
        description: The video's processing status. This value indicates whether YouTube was able to process the video or if the video is still being processed.
        enum:
        - failed
        - processing
        - succeeded
        - terminated
      processingFailureReason?:
        type: string
        description: The reason that YouTube failed to process the video. This property will only have a value if the processingStatus property's value is failed.
        enum:
        - other
        - streamingFailed
        - transcodeFailed
        - uploadFailed
      thumbnailsAvailability?:
        type: string
        description: This value indicates whether thumbnail images have been generated for the video.
      fileDetailsAvailability?:
        type: string
        description: This value indicates whether file details are available for the uploaded video. You can retrieve a video's file details by requesting the fileDetails part in your videos.list() request.
      editorSuggestionsAvailability?:
        type: string
        description: This value indicates whether video editing suggestions, which might improve video quality or the playback experience, are available for the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
      tagSuggestionsAvailability?:
        type: string
        description: This value indicates whether keyword (tag) suggestions are available for the video. Tags can be added to a video's metadata to make it easier for other users to find the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
      processingIssuesAvailability?:
        type: string
        description: This value indicates whether the video processing engine has generated suggestions that might improve YouTube's ability to process the the video, warnings that explain video processing problems, or errors that cause video processing problems. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
      processingProgress?: VideoProcessingDetailsProcessingProgress
    description: Describes processing status and progress and availability of some other Video resource parts.
  VideoProcessingDetailsProcessingProgress:
    type: object
    properties:
      partsProcessed?:
        type: integer
        format: int64
        description: |-
          The number of parts of the video that YouTube has already processed. You can estimate the percentage of the video that YouTube has already processed by calculating:
          100 * parts_processed / parts_total

          Note that since the estimated number of parts could increase without a corresponding increase in the number of parts that have already been processed, it is possible that the calculated progress could periodically decrease while YouTube processes a video.
      timeLeftMs?:
        type: integer
        format: int64
        description: An estimate of the amount of time, in millseconds, that YouTube needs to finish processing the video.
      partsTotal?:
        type: integer
        format: int64
        description: An estimate of the total number of parts that need to be processed for the video. The number may be updated with more precise estimates while YouTube processes the video.
    description: Video processing progress and completion time estimate.
  VideoProjectDetails:
    type: object
    properties:
      tags?:
        type: array
        description: A list of project tags associated with the video during the upload.
        items:
          type: string
    description: Project specific details about the content of a YouTube Video.
  VideoRating:
    type: object
    properties:
      rating?:
        type: string
        enum:
        - dislike
        - like
        - none
        - unspecified
      videoId?:
        type: string
  VideoRecordingDetails:
    type: object
    properties:
      locationDescription?:
        type: string
        description: The text description of the location where the video was recorded.
      recordingDate?:
        type: datetime
        description: The date and time when the video was recorded. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sssZ) format.
      location?: GeoPoint
    description: Recording information associated with the video.
  VideoSnippet:
    type: object
    properties:
      defaultLanguage?:
        type: string
        description: The language of the videos's default snippet.
      publishedAt?:
        type: datetime
        description: The date and time that the video was uploaded. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      defaultAudioLanguage?:
        type: string
        description: The default_audio_language property specifies the language spoken in the video's default audio track.
      localized?: VideoLocalization
      description?:
        type: string
        description: The video's description.
      thumbnails?: ThumbnailDetails
      title?:
        type: string
        description: The video's title.
      categoryId?:
        type: string
        description: The YouTube video category associated with the video.
      channelId?:
        type: string
        description: The ID that YouTube uses to uniquely identify the channel that the video was uploaded to.
      channelTitle?:
        type: string
        description: Channel title for the channel that the video belongs to.
      liveBroadcastContent?:
        type: string
        description: Indicates if the video is an upcoming/active live broadcast. Or it's "none" if the video is not an upcoming/active live broadcast.
        enum:
        - live
        - none
        - upcoming
      tags?:
        type: array
        description: A list of keyword tags associated with the video. Tags may contain spaces.
        items:
          type: string
    description: Basic details about a video, including title, description, uploader, thumbnails and category.
  VideoStatistics:
    type: object
    properties:
      dislikeCount?:
        type: integer
        format: int64
        description: The number of users who have indicated that they disliked the video by giving it a negative rating.
      likeCount?:
        type: integer
        format: int64
        description: The number of users who have indicated that they liked the video by giving it a positive rating.
      viewCount?:
        type: integer
        format: int64
        description: The number of times the video has been viewed.
      commentCount?:
        type: integer
        format: int64
        description: The number of comments for the video.
      favoriteCount?:
        type: integer
        format: int64
        description: The number of users who currently have the video marked as a favorite video.
    description: Statistics about the video, such as the number of times the video was viewed or liked.
  VideoStatus:
    type: object
    properties:
      license?:
        type: string
        description: The video's license.
        enum:
        - creativeCommon
        - youtube
      failureReason?:
        type: string
        description: This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed.
        enum:
        - codec
        - conversion
        - emptyFile
        - invalidFile
        - tooSmall
        - uploadAborted
      privacyStatus?:
        type: string
        description: The video's privacy status.
        enum:
        - private
        - public
        - unlisted
      publishAt?:
        type: datetime
        description: The date and time when the video is scheduled to publish. It can be set only if the privacy status of the video is private. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      uploadStatus?:
        type: string
        description: The status of the uploaded video.
        enum:
        - deleted
        - failed
        - processed
        - rejected
        - uploaded
      publicStatsViewable?:
        type: boolean
        description: This value indicates if the extended video statistics on the watch page can be viewed by everyone. Note that the view count, likes, etc will still be visible if this is disabled.
      rejectionReason?:
        type: string
        description: This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected.
        enum:
        - claim
        - copyright
        - duplicate
        - inappropriate
        - legal
        - length
        - termsOfUse
        - trademark
        - uploaderAccountClosed
        - uploaderAccountSuspended
      embeddable?:
        type: boolean
        description: This value indicates if the video can be embedded on another website.
    description: Basic details about a video category, such as its localized title.
  VideoSuggestions:
    type: object
    properties:
      processingWarnings?:
        type: array
        description: A list of reasons why YouTube may have difficulty transcoding the uploaded video or that might result in an erroneous transcoding. These warnings are generated before YouTube actually processes the uploaded video file. In addition, they identify issues that are unlikely to cause the video processing to fail but that might cause problems such as sync issues, video artifacts, or a missing audio track.
        items:
          type: string
          enum:
          - hasEditlist
          - inconsistentResolution
          - problematicAudioCodec
          - problematicVideoCodec
          - unknownAudioCodec
          - unknownContainer
          - unknownVideoCodec
      editorSuggestions?:
        type: array
        description: A list of video editing operations that might improve the video quality or playback experience of the uploaded video.
        items:
          type: string
          enum:
          - audioQuietAudioSwap
          - videoAutoLevels
          - videoCrop
          - videoStabilize
      processingErrors?:
        type: array
        description: A list of errors that will prevent YouTube from successfully processing the uploaded video video. These errors indicate that, regardless of the video's current processing status, eventually, that status will almost certainly be failed.
        items:
          type: string
          enum:
          - archiveFile
          - audioFile
          - docFile
          - imageFile
          - notAVideoFile
          - projectFile
      processingHints?:
        type: array
        description: A list of suggestions that may improve YouTube's ability to process the video.
        items:
          type: string
          enum:
          - nonStreamableMov
          - sendBestQualityVideo
      tagSuggestions?:
        type: array
        description: A list of keyword tags that could be added to the video's metadata to increase the likelihood that users will locate your video when searching or browsing on YouTube.
        items: VideoSuggestionsTagSuggestion
    description: Specifies suggestions on how to improve video content, including encoding hints, tag suggestions, and editor suggestions.
  VideoSuggestionsTagSuggestion:
    type: object
    properties:
      tag?:
        type: string
        description: The keyword tag suggested for the video.
      categoryRestricts?:
        type: array
        description: A set of video categories for which the tag is relevant. You can use this information to display appropriate tag suggestions based on the video category that the video uploader associates with the video. By default, tag suggestions are relevant for all categories if there are no restricts defined for the keyword.
        items:
          type: string
    description: A single tag suggestion with it's relevance information.
  VideoTopicDetails:
    type: object
    properties:
      relevantTopicIds?:
        type: array
        description: Similar to topic_id, except that these topics are merely relevant to the video. These are topics that may be mentioned in, or appear in the video. You can retrieve information about each topic using Freebase Topic API.
        items:
          type: string
      topicIds?:
        type: array
        description: A list of Freebase topic IDs that are centrally associated with the video. These are topics that are centrally featured in the video, and it can be said that the video is mainly about each of these. You can retrieve information about each topic using the Freebase Topic API.
        items:
          type: string
    description: Freebase topic information related to the video.
  WatchSettings:
    type: object
    properties:
      backgroundColor?:
        type: string
        description: The text color for the video watch page's branded area.
      featuredPlaylistId?:
        type: string
        description: An ID that uniquely identifies a playlist that displays next to the video player.
      textColor?:
        type: string
        description: The background color for the video watch page's branded area.
    description: Branding properties for the watch. All deprecated.
/channelBanners:
  /insert:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube
          - https://www.googleapis.com/auth/youtube.force-ssl
          - https://www.googleapis.com/auth/youtube.upload
      description: |-
        Uploads a channel banner image to YouTube. This method represents the first two steps in a three-step process to update the banner image for a channel:

        - Call the channelBanners.insert method to upload the binary image data to YouTube. The image must have a 16:9 aspect ratio and be at least 2120x1192 pixels.
        - Extract the url property's value from the response that the API returns for step 1.
        - Call the channels.update method to update the channel's branding settings. Set the brandingSettings.image.bannerExternalUrl property's value to the URL obtained in step 2.
      displayName: Insert
      is:
      - hasParameters
      queryParameters:
        onBehalfOfContentOwner?:
          type: string
          description: |-
            Note: This parameter is intended exclusively for YouTube content partners.

            The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      body:
        application/json: ChannelBannerResource
      responses:
        200:
          body:
            application/json: ChannelBannerResource
      (commons.Id): youtube.channelBanners.insert
      (commons.LogicalStructure):
      - Channel Banners
/subscriptions:
  post:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtubepartner
    description: Adds a subscription for the authenticated user's channel.
    displayName: Insert
    is:
    - hasParameters
    queryParameters:
      part:
        type: string
        description: The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    body:
      application/json: Subscription
    responses:
      200:
        body:
          application/json: Subscription
    (commons.Id): youtube.subscriptions.insert
    (commons.LogicalStructure):
    - Subscriptions
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtube.readonly
        - https://www.googleapis.com/auth/youtubepartner
    description: Returns subscription resources that match the API request criteria.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      mine?:
        type: boolean
        description: Set this parameter's value to true to retrieve a feed of the authenticated user's subscriptions.
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      onBehalfOfContentOwnerChannel?:
        type: string
        description: |-
          This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.

          This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
      maxResults?:
        type: integer
        default: 5
        format: int32
        description: The maxResults parameter specifies the maximum number of items that should be returned in the result set.
        maximum: 50
        minimum: 0
      myRecentSubscribers?:
        type: boolean
        description: Set this parameter's value to true to retrieve a feed of the subscribers of the authenticated user in reverse chronological order (newest first).
      mySubscribers?:
        type: boolean
        description: Set this parameter's value to true to retrieve a feed of the subscribers of the authenticated user in no particular order.
      part:
        type: string
        description: |-
          The part parameter specifies a comma-separated list of one or more subscription resource properties that the API response will include.

          If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a subscription resource, the snippet property contains other properties, such as a display title for the subscription. If you set part=snippet, the API response will also contain all of those nested properties.
      id?:
        type: string
        description: The id parameter specifies a comma-separated list of the YouTube subscription ID(s) for the resource(s) that are being retrieved. In a subscription resource, the id property specifies the YouTube subscription ID.
      pageToken?:
        type: string
        description: The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
      forChannelId?:
        type: string
        description: The forChannelId parameter specifies a comma-separated list of channel IDs. The API response will then only contain subscriptions matching those channels.
      channelId?:
        type: string
        description: The channelId parameter specifies a YouTube channel ID. The API will only return that channel's subscriptions.
      order?:
        type: string
        default: SUBSCRIPTION_ORDER_RELEVANCE
        description: The order parameter specifies the method that will be used to sort resources in the API response.
        (commons.EnumDescriptions):
        - Sort alphabetically.
        - Sort by relevance.
        - Sort by order of activity.
        enum:
        - alphabetical
        - relevance
        - unread
    responses:
      200:
        body:
          application/json: SubscriptionListResponse
    (commons.Id): youtube.subscriptions.list
    (commons.LogicalStructure):
    - Subscriptions
  delete:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtubepartner
    description: Deletes a subscription.
    displayName: Delete
    is:
    - hasParameters
    queryParameters:
      id:
        type: string
        description: The id parameter specifies the YouTube subscription ID for the resource that is being deleted. In a subscription resource, the id property specifies the YouTube subscription ID.
    (commons.Id): youtube.subscriptions.delete
    (commons.LogicalStructure):
    - Subscriptions
/videoAbuseReportReasons:
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtube.readonly
    description: Returns a list of abuse reasons that can be used for reporting abusive videos.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      hl?:
        type: string
        default: en_US
        description: The hl parameter specifies the language that should be used for text values in the API response.
      part:
        type: string
        description: The part parameter specifies the videoCategory resource parts that the API response will include. Supported values are id and snippet.
    responses:
      200:
        body:
          application/json: VideoAbuseReportReasonListResponse
    (commons.Id): youtube.videoAbuseReportReasons.list
    (commons.LogicalStructure):
    - Video Abuse Report Reasons
/fanFundingEvents:
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtube.readonly
    description: Lists fan funding events for a channel.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      hl?:
        type: string
        description: |-
          The hl parameter instructs the API to retrieve localized resource metadata for a specific application language that the YouTube website supports. The parameter value must be a language code included in the list returned by the i18nLanguages.list method.

          If localized resource details are available in that language, the resource's snippet.localized object will contain the localized values. However, if localized details are not available, the snippet.localized object will contain resource details in the resource's default language.
      maxResults?:
        type: integer
        default: 5
        format: int32
        description: The maxResults parameter specifies the maximum number of items that should be returned in the result set.
        maximum: 50
        minimum: 0
      part:
        type: string
        description: The part parameter specifies the fanFundingEvent resource parts that the API response will include. Supported values are id and snippet.
      pageToken?:
        type: string
        description: The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    responses:
      200:
        body:
          application/json: FanFundingEventListResponse
    (commons.Id): youtube.fanFundingEvents.list
    (commons.LogicalStructure):
    - Fan Funding Events
/videos:
  /rate:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube
          - https://www.googleapis.com/auth/youtube.force-ssl
          - https://www.googleapis.com/auth/youtubepartner
      description: Add a like or dislike rating to a video or remove a rating from a video.
      displayName: Rate
      is:
      - hasParameters
      queryParameters:
        rating:
          type: string
          description: Specifies the rating to record.
          (commons.EnumDescriptions):
          - Records that the authenticated user disliked the video.
          - Records that the authenticated user liked the video.
          - Removes any rating that the authenticated user had previously set for the video.
          enum:
          - dislike
          - like
          - none
        id:
          type: string
          description: The id parameter specifies the YouTube video ID of the video that is being rated or having its rating removed.
      (commons.Id): youtube.videos.rate
      (commons.LogicalStructure):
      - Videos
  /reportAbuse:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube
          - https://www.googleapis.com/auth/youtube.force-ssl
          - https://www.googleapis.com/auth/youtubepartner
      description: Report abuse for a video.
      displayName: Report Abuse
      is:
      - hasParameters
      queryParameters:
        onBehalfOfContentOwner?:
          type: string
          description: |-
            Note: This parameter is intended exclusively for YouTube content partners.

            The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      body:
        application/json: VideoAbuseReport
      (commons.Id): youtube.videos.reportAbuse
      (commons.LogicalStructure):
      - Videos
  /getRating:
    get:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube
          - https://www.googleapis.com/auth/youtube.force-ssl
          - https://www.googleapis.com/auth/youtubepartner
      description: Retrieves the ratings that the authorized user gave to a list of specified videos.
      displayName: Get Rating
      is:
      - hasParameters
      queryParameters:
        onBehalfOfContentOwner?:
          type: string
          description: |-
            Note: This parameter is intended exclusively for YouTube content partners.

            The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
        id:
          type: string
          description: The id parameter specifies a comma-separated list of the YouTube video ID(s) for the resource(s) for which you are retrieving rating data. In a video resource, the id property specifies the video's ID.
      responses:
        200:
          body:
            application/json: VideoGetRatingResponse
      (commons.Id): youtube.videos.getRating
      (commons.LogicalStructure):
      - Videos
  post:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtube.upload
        - https://www.googleapis.com/auth/youtubepartner
    description: Uploads a video to YouTube and optionally sets the video's metadata.
    displayName: Insert
    is:
    - hasParameters
    queryParameters:
      notifySubscribers?:
        type: boolean
        default: true
        description: The notifySubscribers parameter indicates whether YouTube should send a notification about the new video to users who subscribe to the video's channel. A parameter value of True indicates that subscribers will be notified of newly uploaded videos. However, a channel owner who is uploading many videos might prefer to set the value to False to avoid sending a notification about each new video to the channel's subscribers.
      autoLevels?:
        type: boolean
        description: The autoLevels parameter indicates whether YouTube should automatically enhance the video's lighting and color.
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      onBehalfOfContentOwnerChannel?:
        type: string
        description: |-
          This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.

          This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
      part:
        type: string
        description: |-
          The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.

          Note that not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response.
      stabilize?:
        type: boolean
        description: The stabilize parameter indicates whether YouTube should adjust the video to remove shaky camera motions.
    body:
      application/json: Video
    responses:
      200:
        body:
          application/json: Video
    (commons.Id): youtube.videos.insert
    (commons.LogicalStructure):
    - Videos
  put:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtubepartner
    description: Updates a video's metadata.
    displayName: Update
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      part:
        type: string
        description: |-
          The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.

          Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a video's privacy setting is contained in the status part. As such, if your request is updating a private video, and the request's part parameter value includes the status part, the video's privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the video will revert to the default privacy setting.

          In addition, not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response.
    body:
      application/json: Video
    responses:
      200:
        body:
          application/json: Video
    (commons.Id): youtube.videos.update
    (commons.LogicalStructure):
    - Videos
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtube.readonly
        - https://www.googleapis.com/auth/youtubepartner
    description: Returns a list of videos that match the API request parameters.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      hl?:
        type: string
        description: |-
          The hl parameter instructs the API to retrieve localized resource metadata for a specific application language that the YouTube website supports. The parameter value must be a language code included in the list returned by the i18nLanguages.list method.

          If localized resource details are available in that language, the resource's snippet.localized object will contain the localized values. However, if localized details are not available, the snippet.localized object will contain resource details in the resource's default language.
      myRating?:
        type: string
        description: Set this parameter's value to like or dislike to instruct the API to only return videos liked or disliked by the authenticated user.
        (commons.EnumDescriptions):
        - Returns only videos disliked by the authenticated user.
        - Returns only video liked by the authenticated user.
        enum:
        - dislike
        - like
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      part:
        type: string
        description: |-
          The part parameter specifies a comma-separated list of one or more video resource properties that the API response will include.

          If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a video resource, the snippet property contains the channelId, title, description, tags, and categoryId properties. As such, if you set part=snippet, the API response will contain all of those properties.
      locale?:
        type: string
        description: DEPRECATED
      regionCode?:
        type: string
        description: The regionCode parameter instructs the API to select a video chart available in the specified region. This parameter can only be used in conjunction with the chart parameter. The parameter value is an ISO 3166-1 alpha-2 country code.
      maxHeight?:
        type: integer
        format: int32
        description: The maxHeight parameter specifies a maximum height of the embedded player. If maxWidth is provided, maxHeight may not be reached in order to not violate the width request.
        maximum: 8192
        minimum: 72
      maxResults?:
        type: integer
        default: 5
        format: int32
        description: |-
          The maxResults parameter specifies the maximum number of items that should be returned in the result set.

          Note: This parameter is supported for use in conjunction with the myRating parameter, but it is not supported for use in conjunction with the id parameter.
        maximum: 50
        minimum: 1
      videoCategoryId?:
        type: string
        default: '0'
        description: The videoCategoryId parameter identifies the video category for which the chart should be retrieved. This parameter can only be used in conjunction with the chart parameter. By default, charts are not restricted to a particular category.
      id?:
        type: string
        description: The id parameter specifies a comma-separated list of the YouTube video ID(s) for the resource(s) that are being retrieved. In a video resource, the id property specifies the video's ID.
      pageToken?:
        type: string
        description: |-
          The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.

          Note: This parameter is supported for use in conjunction with the myRating parameter, but it is not supported for use in conjunction with the id parameter.
      chart?:
        type: string
        description: The chart parameter identifies the chart that you want to retrieve.
        (commons.EnumDescriptions):
        - Return the most popular videos for the specified content region and video category.
        enum:
        - mostPopular
      maxWidth?:
        type: integer
        format: int32
        description: The maxWidth parameter specifies a maximum width of the embedded player. If maxHeight is provided, maxWidth may not be reached in order to not violate the height request.
        maximum: 8192
        minimum: 72
    responses:
      200:
        body:
          application/json: VideoListResponse
    (commons.Id): youtube.videos.list
    (commons.LogicalStructure):
    - Videos
  delete:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtubepartner
    description: Deletes a YouTube video.
    displayName: Delete
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      id:
        type: string
        description: The id parameter specifies the YouTube video ID for the resource that is being deleted. In a video resource, the id property specifies the video's ID.
    (commons.Id): youtube.videos.delete
    (commons.LogicalStructure):
    - Videos
/i18nRegions:
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtube.readonly
        - https://www.googleapis.com/auth/youtubepartner
    description: Returns a list of content regions that the YouTube website supports.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      hl?:
        type: string
        default: en_US
        description: The hl parameter specifies the language that should be used for text values in the API response.
      part:
        type: string
        description: The part parameter specifies the i18nRegion resource properties that the API response will include. Set the parameter value to snippet.
    responses:
      200:
        body:
          application/json: I18nRegionListResponse
    (commons.Id): youtube.i18nRegions.list
    (commons.LogicalStructure):
    - I18n Regions
/liveChat:
  /moderators:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube
          - https://www.googleapis.com/auth/youtube.force-ssl
      description: Adds a new moderator for the chat.
      displayName: Insert
      is:
      - hasParameters
      queryParameters:
        part:
          type: string
          description: The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response returns. Set the parameter value to snippet.
      body:
        application/json: LiveChatModerator
      responses:
        200:
          body:
            application/json: LiveChatModerator
      (commons.Id): youtube.liveChatModerators.insert
      (commons.LogicalStructure):
      - Live Chat Moderators
    get:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube
          - https://www.googleapis.com/auth/youtube.force-ssl
          - https://www.googleapis.com/auth/youtube.readonly
      description: Lists moderators for a live chat.
      displayName: List
      is:
      - hasParameters
      queryParameters:
        liveChatId:
          type: string
          description: The liveChatId parameter specifies the YouTube live chat for which the API should return moderators.
        maxResults?:
          type: integer
          default: 5
          format: int32
          description: The maxResults parameter specifies the maximum number of items that should be returned in the result set.
          maximum: 50
          minimum: 0
        part:
          type: string
          description: The part parameter specifies the liveChatModerator resource parts that the API response will include. Supported values are id and snippet.
        pageToken?:
          type: string
          description: The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
      responses:
        200:
          body:
            application/json: LiveChatModeratorListResponse
      (commons.Id): youtube.liveChatModerators.list
      (commons.LogicalStructure):
      - Live Chat Moderators
    delete:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube
          - https://www.googleapis.com/auth/youtube.force-ssl
      description: Removes a chat moderator.
      displayName: Delete
      is:
      - hasParameters
      queryParameters:
        id:
          type: string
          description: The id parameter identifies the chat moderator to remove. The value uniquely identifies both the moderator and the chat.
      (commons.Id): youtube.liveChatModerators.delete
      (commons.LogicalStructure):
      - Live Chat Moderators
  /bans:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube
          - https://www.googleapis.com/auth/youtube.force-ssl
      description: Adds a new ban to the chat.
      displayName: Insert
      is:
      - hasParameters
      queryParameters:
        part:
          type: string
          description: The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response returns. Set the parameter value to snippet.
      body:
        application/json: LiveChatBan
      responses:
        200:
          body:
            application/json: LiveChatBan
      (commons.Id): youtube.liveChatBans.insert
      (commons.LogicalStructure):
      - Live Chat Bans
    delete:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube
          - https://www.googleapis.com/auth/youtube.force-ssl
      description: Removes a chat ban.
      displayName: Delete
      is:
      - hasParameters
      queryParameters:
        id:
          type: string
          description: The id parameter identifies the chat ban to remove. The value uniquely identifies both the ban and the chat.
      (commons.Id): youtube.liveChatBans.delete
      (commons.LogicalStructure):
      - Live Chat Bans
  /messages:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube
          - https://www.googleapis.com/auth/youtube.force-ssl
      description: Adds a message to a live chat.
      displayName: Insert
      is:
      - hasParameters
      queryParameters:
        part:
          type: string
          description: The part parameter serves two purposes. It identifies the properties that the write operation will set as well as the properties that the API response will include. Set the parameter value to snippet.
      body:
        application/json: LiveChatMessage
      responses:
        200:
          body:
            application/json: LiveChatMessage
      (commons.Id): youtube.liveChatMessages.insert
      (commons.LogicalStructure):
      - Live Chat Messages
    get:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube
          - https://www.googleapis.com/auth/youtube.force-ssl
          - https://www.googleapis.com/auth/youtube.readonly
      description: Lists live chat messages for a specific chat.
      displayName: List
      is:
      - hasParameters
      queryParameters:
        profileImageSize?:
          type: integer
          format: int32
          description: 'The profileImageSize parameter specifies the size of the user
            profile pictures that should be returned in the result set. Default: 88.'
          maximum: 720
          minimum: 16
        hl?:
          type: string
          description: |-
            The hl parameter instructs the API to retrieve localized resource metadata for a specific application language that the YouTube website supports. The parameter value must be a language code included in the list returned by the i18nLanguages.list method.

            If localized resource details are available in that language, the resource's snippet.localized object will contain the localized values. However, if localized details are not available, the snippet.localized object will contain resource details in the resource's default language.
        liveChatId:
          type: string
          description: The liveChatId parameter specifies the ID of the chat whose messages will be returned.
        maxResults?:
          type: integer
          default: 500
          format: int32
          description: The maxResults parameter specifies the maximum number of messages that should be returned in the result set.
          maximum: 2000
          minimum: 200
        part:
          type: string
          description: The part parameter specifies the liveChatComment resource parts that the API response will include. Supported values are id and snippet.
        pageToken?:
          type: string
          description: The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken property identify other pages that could be retrieved.
      responses:
        200:
          body:
            application/json: LiveChatMessageListResponse
      (commons.Id): youtube.liveChatMessages.list
      (commons.LogicalStructure):
      - Live Chat Messages
    delete:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube
          - https://www.googleapis.com/auth/youtube.force-ssl
      description: Deletes a chat message.
      displayName: Delete
      is:
      - hasParameters
      queryParameters:
        id:
          type: string
          description: The id parameter specifies the YouTube chat message ID of the resource that is being deleted.
      (commons.Id): youtube.liveChatMessages.delete
      (commons.LogicalStructure):
      - Live Chat Messages
/captions:
  /{id}:
    uriParameters:
      id:
        type: string
        description: The id parameter identifies the caption track that is being retrieved. The value is a caption track ID as identified by the id property in a caption resource.
    get:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube.force-ssl
          - https://www.googleapis.com/auth/youtubepartner
      description: Downloads a caption track. The caption track is returned in its original format unless the request specifies a value for the tfmt parameter and in its original language unless the request specifies a value for the tlang parameter.
      displayName: Download
      is:
      - hasParameters
      queryParameters:
        onBehalfOfContentOwner?:
          type: string
          description: |-
            Note: This parameter is intended exclusively for YouTube content partners.

            The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
        tlang?:
          type: string
          description: The tlang parameter specifies that the API response should return a translation of the specified caption track. The parameter value is an ISO 639-1 two-letter language code that identifies the desired caption language. The translation is generated by using machine translation, such as Google Translate.
        onBehalfOf?:
          type: string
          description: ID of the Google+ Page for the channel that the request is be on behalf of
        tfmt?:
          type: string
          description: The tfmt parameter specifies that the caption track should be returned in a specific format. If the parameter is not included in the request, the track is returned in its original format.
          (commons.EnumDescriptions):
          - SubViewer subtitle.
          - Scenarist Closed Caption format.
          - SubRip subtitle.
          - Timed Text Markup Language caption.
          - Web Video Text Tracks caption.
          enum:
          - sbv
          - scc
          - srt
          - ttml
          - vtt
      (commons.Id): youtube.captions.download
      (commons.LogicalStructure):
      - Captions
  post:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtubepartner
    description: Uploads a caption track.
    displayName: Insert
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      part:
        type: string
        description: The part parameter specifies the caption resource parts that the API response will include. Set the parameter value to snippet.
      onBehalfOf?:
        type: string
        description: ID of the Google+ Page for the channel that the request is be on behalf of
      sync?:
        type: boolean
        description: |-
          The sync parameter indicates whether YouTube should automatically synchronize the caption file with the audio track of the video. If you set the value to true, YouTube will disregard any time codes that are in the uploaded caption file and generate new time codes for the captions.

          You should set the sync parameter to true if you are uploading a transcript, which has no time codes, or if you suspect the time codes in your file are incorrect and want YouTube to try to fix them.
    body:
      application/json: Caption
    responses:
      200:
        body:
          application/json: Caption
    (commons.Id): youtube.captions.insert
    (commons.LogicalStructure):
    - Captions
  put:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtubepartner
    description: Updates a caption track. When updating a caption track, you can change the track's draft status, upload a new caption file for the track, or both.
    displayName: Update
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      part:
        type: string
        description: The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Set the property value to snippet if you are updating the track's draft status. Otherwise, set the property value to id.
      onBehalfOf?:
        type: string
        description: ID of the Google+ Page for the channel that the request is be on behalf of
      sync?:
        type: boolean
        description: |-
          Note: The API server only processes the parameter value if the request contains an updated caption file.

          The sync parameter indicates whether YouTube should automatically synchronize the caption file with the audio track of the video. If you set the value to true, YouTube will automatically synchronize the caption track with the audio track.
    body:
      application/json: Caption
    responses:
      200:
        body:
          application/json: Caption
    (commons.Id): youtube.captions.update
    (commons.LogicalStructure):
    - Captions
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtubepartner
    description: Returns a list of caption tracks that are associated with a specified video. Note that the API response does not contain the actual captions and that the captions.download method provides the ability to retrieve a caption track.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      part:
        type: string
        description: The part parameter specifies a comma-separated list of one or more caption resource parts that the API response will include. The part names that you can include in the parameter value are id and snippet.
      onBehalfOf?:
        type: string
        description: ID of the Google+ Page for the channel that the request is on behalf of.
      videoId:
        type: string
        description: The videoId parameter specifies the YouTube video ID of the video for which the API should return caption tracks.
      id?:
        type: string
        description: The id parameter specifies a comma-separated list of IDs that identify the caption resources that should be retrieved. Each ID must identify a caption track associated with the specified video.
    responses:
      200:
        body:
          application/json: CaptionListResponse
    (commons.Id): youtube.captions.list
    (commons.LogicalStructure):
    - Captions
  delete:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtubepartner
    description: Deletes a specified caption track.
    displayName: Delete
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      onBehalfOf?:
        type: string
        description: ID of the Google+ Page for the channel that the request is be on behalf of
      id:
        type: string
        description: The id parameter identifies the caption track that is being deleted. The value is a caption track ID as identified by the id property in a caption resource.
    (commons.Id): youtube.captions.delete
    (commons.LogicalStructure):
    - Captions
/search:
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtube.readonly
        - https://www.googleapis.com/auth/youtubepartner
    description: Returns a collection of search results that match the query parameters specified in the API request. By default, a search result set identifies matching video, channel, and playlist resources, but you can also configure queries to only retrieve a specific type of resource.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      videoCaption?:
        type: string
        description: The videoCaption parameter indicates whether the API should filter video search results based on whether they have captions. If you specify a value for this parameter, you must also set the type parameter's value to video.
        (commons.EnumDescriptions):
        - Do not filter results based on caption availability.
        - Only include videos that have captions.
        - Only include videos that do not have captions.
        enum:
        - any
        - closedCaption
        - none
      part:
        type: string
        description: The part parameter specifies a comma-separated list of one or more search resource properties that the API response will include. Set the parameter value to snippet.
      forDeveloper?:
        type: boolean
        description: The forDeveloper parameter restricts the search to only retrieve videos uploaded via the developer's application or website. The API server uses the request's authorization credentials to identify the developer. Therefore, a developer can restrict results to videos uploaded through the developer's own app or website but not to videos uploaded through other apps or sites.
      channelType?:
        type: string
        description: The channelType parameter lets you restrict a search to a particular type of channel.
        (commons.EnumDescriptions):
        - Return all channels.
        - Only retrieve shows.
        enum:
        - any
        - show
      videoDefinition?:
        type: string
        description: The videoDefinition parameter lets you restrict a search to only include either high definition (HD) or standard definition (SD) videos. HD videos are available for playback in at least 720p, though higher resolutions, like 1080p, might also be available. If you specify a value for this parameter, you must also set the type parameter's value to video.
        (commons.EnumDescriptions):
        - Return all videos, regardless of their resolution.
        - Only retrieve HD videos.
        - Only retrieve videos in standard definition.
        enum:
        - any
        - high
        - standard
      forContentOwner?:
        type: boolean
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The forContentOwner parameter restricts the search to only retrieve resources owned by the content owner specified by the onBehalfOfContentOwner parameter. The user must be authenticated using a CMS account linked to the specified content owner and onBehalfOfContentOwner must be provided.
      type?:
        type: string
        default: video,channel,playlist
        description: The type parameter restricts a search query to only retrieve a particular type of resource. The value is a comma-separated list of resource types.
      videoSyndicated?:
        type: string
        description: The videoSyndicated parameter lets you to restrict a search to only videos that can be played outside youtube.com. If you specify a value for this parameter, you must also set the type parameter's value to video.
        (commons.EnumDescriptions):
        - Return all videos, syndicated or not.
        - Only retrieve syndicated videos.
        enum:
        - any
        - 'true'
      safeSearch?:
        type: string
        description: The safeSearch parameter indicates whether the search results should include restricted content as well as standard content.
        (commons.EnumDescriptions):
        - YouTube will filter some content from search results and, at the least, will filter content that is restricted in your locale. Based on their content, search results could be removed from search results or demoted in search results. This is the default parameter value.
        - YouTube will not filter the search result set.
        - YouTube will try to exclude all restricted content from the search result set. Based on their content, search results could be removed from search results or demoted in search results.
        enum:
        - moderate
        - none
        - strict
      regionCode?:
        type: string
        description: The regionCode parameter instructs the API to return search results for the specified country. The parameter value is an ISO 3166-1 alpha-2 country code.
      maxResults?:
        type: integer
        default: 5
        format: int32
        description: The maxResults parameter specifies the maximum number of items that should be returned in the result set.
        maximum: 50
        minimum: 0
      channelId?:
        type: string
        description: The channelId parameter indicates that the API response should only contain resources created by the channel
      relevanceLanguage?:
        type: string
        description: The relevanceLanguage parameter instructs the API to return search results that are most relevant to the specified language. The parameter value is typically an ISO 639-1 two-letter language code. However, you should use the values zh-Hans for simplified Chinese and zh-Hant for traditional Chinese. Please note that results in other languages will still be returned if they are highly relevant to the search query term.
      order?:
        type: string
        default: SEARCH_SORT_RELEVANCE
        description: The order parameter specifies the method that will be used to order resources in the API response.
        (commons.EnumDescriptions):
        - Resources are sorted in reverse chronological order based on the date they were created.
        - Resources are sorted from highest to lowest rating.
        - Resources are sorted based on their relevance to the search query. This is the default value for this parameter.
        - Resources are sorted alphabetically by title.
        - Channels are sorted in descending order of their number of uploaded videos.
        - Resources are sorted from highest to lowest number of views.
        enum:
        - date
        - rating
        - relevance
        - title
        - videoCount
        - viewCount
      relatedToVideoId?:
        type: string
        description: The relatedToVideoId parameter retrieves a list of videos that are related to the video that the parameter value identifies. The parameter value must be set to a YouTube video ID and, if you are using this parameter, the type parameter must be set to video.
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      videoType?:
        type: string
        description: The videoType parameter lets you restrict a search to a particular type of videos. If you specify a value for this parameter, you must also set the type parameter's value to video.
        (commons.EnumDescriptions):
        - Return all videos.
        - Only retrieve episodes of shows.
        - Only retrieve movies.
        enum:
        - any
        - episode
        - movie
      eventType?:
        type: string
        description: The eventType parameter restricts a search to broadcast events. If you specify a value for this parameter, you must also set the type parameter's value to video.
        (commons.EnumDescriptions):
        - Only include completed broadcasts.
        - Only include active broadcasts.
        - Only include upcoming broadcasts.
        enum:
        - completed
        - live
        - upcoming
      forMine?:
        type: boolean
        description: The forMine parameter restricts the search to only retrieve videos owned by the authenticated user. If you set this parameter to true, then the type parameter's value must also be set to video.
      videoLicense?:
        type: string
        description: The videoLicense parameter filters search results to only include videos with a particular license. YouTube lets video uploaders choose to attach either the Creative Commons license or the standard YouTube license to each of their videos. If you specify a value for this parameter, you must also set the type parameter's value to video.
        (commons.EnumDescriptions):
        - Return all videos, regardless of which license they have, that match the query parameters.
        - Only return videos that have a Creative Commons license. Users can reuse videos with this license in other videos that they create. Learn more.
        - Only return videos that have the standard YouTube license.
        enum:
        - any
        - creativeCommon
        - youtube
      locationRadius?:
        type: string
        description: |-
          The locationRadius parameter, in conjunction with the location parameter, defines a circular geographic area.

          The parameter value must be a floating point number followed by a measurement unit. Valid measurement units are m, km, ft, and mi. For example, valid parameter values include 1500m, 5km, 10000ft, and 0.75mi. The API does not support locationRadius parameter values larger than 1000 kilometers.

          Note: See the definition of the location parameter for more information.
      q?:
        type: string
        description: |-
          The q parameter specifies the query term to search for.

          Your request can also use the Boolean NOT (-) and OR (|) operators to exclude videos or to find videos that are associated with one of several search terms. For example, to search for videos matching either "boating" or "sailing", set the q parameter value to boating|sailing. Similarly, to search for videos matching either "boating" or "sailing" but not "fishing", set the q parameter value to boating|sailing -fishing. Note that the pipe character must be URL-escaped when it is sent in your API request. The URL-escaped value for the pipe character is %7C.
      publishedAfter?:
        type: datetime
        description: The publishedAfter parameter indicates that the API response should only contain resources created after the specified time. The value is an RFC 3339 formatted date-time value (1970-01-01T00:00:00Z).
      topicId?:
        type: string
        description: The topicId parameter indicates that the API response should only contain resources associated with the specified topic. The value identifies a Freebase topic ID.
      videoDuration?:
        type: string
        description: The videoDuration parameter filters video search results based on their duration. If you specify a value for this parameter, you must also set the type parameter's value to video.
        (commons.EnumDescriptions):
        - Do not filter video search results based on their duration. This is the default value.
        - Only include videos longer than 20 minutes.
        - Only include videos that are between four and 20 minutes long (inclusive).
        - Only include videos that are less than four minutes long.
        enum:
        - any
        - long
        - medium
        - short
      videoEmbeddable?:
        type: string
        description: The videoEmbeddable parameter lets you to restrict a search to only videos that can be embedded into a webpage. If you specify a value for this parameter, you must also set the type parameter's value to video.
        (commons.EnumDescriptions):
        - Return all videos, embeddable or not.
        - Only retrieve embeddable videos.
        enum:
        - any
        - 'true'
      videoCategoryId?:
        type: string
        description: The videoCategoryId parameter filters video search results based on their category. If you specify a value for this parameter, you must also set the type parameter's value to video.
      videoDimension?:
        type: string
        description: The videoDimension parameter lets you restrict a search to only retrieve 2D or 3D videos. If you specify a value for this parameter, you must also set the type parameter's value to video.
        (commons.EnumDescriptions):
        - Restrict search results to exclude 3D videos.
        - Restrict search results to only include 3D videos.
        - Include both 3D and non-3D videos in returned results. This is the default value.
        enum:
        - 2d
        - 3d
        - any
      location?:
        type: string
        description: |-
          The location parameter, in conjunction with the locationRadius parameter, defines a circular geographic area and also restricts a search to videos that specify, in their metadata, a geographic location that falls within that area. The parameter value is a string that specifies latitude/longitude coordinates e.g. (37.42307,-122.08427).


          - The location parameter value identifies the point at the center of the area.
          - The locationRadius parameter specifies the maximum distance that the location associated with a video can be from that point for the video to still be included in the search results.The API returns an error if your request specifies a value for the location parameter but does not also specify a value for the locationRadius parameter.
      pageToken?:
        type: string
        description: The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
      publishedBefore?:
        type: datetime
        description: The publishedBefore parameter indicates that the API response should only contain resources created before the specified time. The value is an RFC 3339 formatted date-time value (1970-01-01T00:00:00Z).
    responses:
      200:
        body:
          application/json: SearchListResponse
    (commons.Id): youtube.search.list
    (commons.LogicalStructure):
    - Search
/videoCategories:
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtube.readonly
        - https://www.googleapis.com/auth/youtubepartner
    description: Returns a list of categories that can be associated with YouTube videos.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      regionCode?:
        type: string
        description: The regionCode parameter instructs the API to return the list of video categories available in the specified country. The parameter value is an ISO 3166-1 alpha-2 country code.
      hl?:
        type: string
        default: en_US
        description: The hl parameter specifies the language that should be used for text values in the API response.
      part:
        type: string
        description: The part parameter specifies the videoCategory resource properties that the API response will include. Set the parameter value to snippet.
      id?:
        type: string
        description: The id parameter specifies a comma-separated list of video category IDs for the resources that you are retrieving.
    responses:
      200:
        body:
          application/json: VideoCategoryListResponse
    (commons.Id): youtube.videoCategories.list
    (commons.LogicalStructure):
    - Video Categories
/sponsors:
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtube.readonly
    description: Lists sponsors for a channel.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      filter?:
        type: string
        default: POLL_NEWEST
        description: The filter parameter specifies which channel sponsors to return.
        (commons.EnumDescriptions):
        - Return all sponsors, from newest to oldest.
        - Return the most recent sponsors, from newest to oldest.
        enum:
        - all
        - newest
      maxResults?:
        type: integer
        default: 5
        format: int32
        description: The maxResults parameter specifies the maximum number of items that should be returned in the result set.
        maximum: 50
        minimum: 0
      part:
        type: string
        description: The part parameter specifies the sponsor resource parts that the API response will include. Supported values are id and snippet.
      pageToken?:
        type: string
        description: The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    responses:
      200:
        body:
          application/json: SponsorListResponse
    (commons.Id): youtube.sponsors.list
    (commons.LogicalStructure):
    - Sponsors
/i18nLanguages:
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtube.readonly
        - https://www.googleapis.com/auth/youtubepartner
    description: Returns a list of application languages that the YouTube website supports.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      hl?:
        type: string
        default: en_US
        description: The hl parameter specifies the language that should be used for text values in the API response.
      part:
        type: string
        description: The part parameter specifies the i18nLanguage resource properties that the API response will include. Set the parameter value to snippet.
    responses:
      200:
        body:
          application/json: I18nLanguageListResponse
    (commons.Id): youtube.i18nLanguages.list
    (commons.LogicalStructure):
    - I18n Languages
/guideCategories:
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtube.readonly
        - https://www.googleapis.com/auth/youtubepartner
    description: Returns a list of categories that can be associated with YouTube channels.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      regionCode?:
        type: string
        description: The regionCode parameter instructs the API to return the list of guide categories available in the specified country. The parameter value is an ISO 3166-1 alpha-2 country code.
      hl?:
        type: string
        default: en-US
        description: The hl parameter specifies the language that will be used for text values in the API response.
      part:
        type: string
        description: The part parameter specifies the guideCategory resource properties that the API response will include. Set the parameter value to snippet.
      id?:
        type: string
        description: The id parameter specifies a comma-separated list of the YouTube channel category ID(s) for the resource(s) that are being retrieved. In a guideCategory resource, the id property specifies the YouTube channel category ID.
    responses:
      200:
        body:
          application/json: GuideCategoryListResponse
    (commons.Id): youtube.guideCategories.list
    (commons.LogicalStructure):
    - Guide Categories
/comments:
  /markAsSpam:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube.force-ssl
      description: Expresses the caller's opinion that one or more comments should be flagged as spam.
      displayName: Mark AsSpam
      is:
      - hasParameters
      queryParameters:
        id:
          type: string
          description: The id parameter specifies a comma-separated list of IDs of comments that the caller believes should be classified as spam.
      (commons.Id): youtube.comments.markAsSpam
      (commons.LogicalStructure):
      - Comments
  /setModerationStatus:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube.force-ssl
      description: Sets the moderation status of one or more comments. The API request must be authorized by the owner of the channel or video associated with the comments.
      displayName: Set Moderation Status
      is:
      - hasParameters
      queryParameters:
        moderationStatus:
          type: string
          description: Identifies the new moderation status of the specified comments.
          (commons.EnumDescriptions):
          - Marks a comment as awaiting review by a moderator.
          - Clears a comment for public display.
          - |-
            Rejects a comment as being unfit for display. This action also effectively hides all replies to the rejected comment.

            Note: The API does not currently provide a way to list or otherwise discover rejected comments. However, you can change the moderation status of a rejected comment if you still know its ID. If you were to change the moderation status of a rejected comment, the comment replies would subsequently be discoverable again as well.
          enum:
          - heldForReview
          - published
          - rejected
        id:
          type: string
          description: The id parameter specifies a comma-separated list of IDs that identify the comments for which you are updating the moderation status.
        banAuthor?:
          type: boolean
          default: false
          description: |-
            The banAuthor parameter lets you indicate that you want to automatically reject any additional comments written by the comment's author. Set the parameter value to true to ban the author.

            Note: This parameter is only valid if the moderationStatus parameter is also set to rejected.
      (commons.Id): youtube.comments.setModerationStatus
      (commons.LogicalStructure):
      - Comments
  post:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube.force-ssl
    description: 'Creates a reply to an existing comment. Note: To create a top-level
      comment, use the commentThreads.insert method.'
    displayName: Insert
    is:
    - hasParameters
    queryParameters:
      part:
        type: string
        description: The part parameter identifies the properties that the API response will include. Set the parameter value to snippet. The snippet part has a quota cost of 2 units.
    body:
      application/json: Comment
    responses:
      200:
        body:
          application/json: Comment
    (commons.Id): youtube.comments.insert
    (commons.LogicalStructure):
    - Comments
  put:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube.force-ssl
    description: Modifies a comment.
    displayName: Update
    is:
    - hasParameters
    queryParameters:
      part:
        type: string
        description: The part parameter identifies the properties that the API response will include. You must at least include the snippet part in the parameter value since that part contains all of the properties that the API request can update.
    body:
      application/json: Comment
    responses:
      200:
        body:
          application/json: Comment
    (commons.Id): youtube.comments.update
    (commons.LogicalStructure):
    - Comments
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube.force-ssl
    description: Returns a list of comments that match the API request parameters.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      maxResults?:
        type: integer
        default: 20
        format: int32
        description: |-
          The maxResults parameter specifies the maximum number of items that should be returned in the result set.

          Note: This parameter is not supported for use in conjunction with the id parameter.
        maximum: 100
        minimum: 1
      part:
        type: string
        description: The part parameter specifies a comma-separated list of one or more comment resource properties that the API response will include.
      id?:
        type: string
        description: The id parameter specifies a comma-separated list of comment IDs for the resources that are being retrieved. In a comment resource, the id property specifies the comment's ID.
      pageToken?:
        type: string
        description: |-
          The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken property identifies the next page of the result that can be retrieved.

          Note: This parameter is not supported for use in conjunction with the id parameter.
      parentId?:
        type: string
        description: |-
          The parentId parameter specifies the ID of the comment for which replies should be retrieved.

          Note: YouTube currently supports replies only for top-level comments. However, replies to replies may be supported in the future.
      textFormat?:
        type: string
        default: FORMAT_HTML
        description: This parameter indicates whether the API should return comments formatted as HTML or as plain text.
        (commons.EnumDescriptions):
        - Returns the comments in HTML format. This is the default value.
        - Returns the comments in plain text format.
        enum:
        - html
        - plainText
    responses:
      200:
        body:
          application/json: CommentListResponse
    (commons.Id): youtube.comments.list
    (commons.LogicalStructure):
    - Comments
  delete:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube.force-ssl
    description: Deletes a comment.
    displayName: Delete
    is:
    - hasParameters
    queryParameters:
      id:
        type: string
        description: The id parameter specifies the comment ID for the resource that is being deleted.
    (commons.Id): youtube.comments.delete
    (commons.LogicalStructure):
    - Comments
/liveBroadcasts:
  /bind:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube
          - https://www.googleapis.com/auth/youtube.force-ssl
      description: Binds a YouTube broadcast to a stream or removes an existing binding between a broadcast and a stream. A broadcast can only be bound to one video stream, though a video stream may be bound to more than one broadcast.
      displayName: Bind
      is:
      - hasParameters
      queryParameters:
        streamId?:
          type: string
          description: The streamId parameter specifies the unique ID of the video stream that is being bound to a broadcast. If this parameter is omitted, the API will remove any existing binding between the broadcast and a video stream.
        onBehalfOfContentOwner?:
          type: string
          description: |-
            Note: This parameter is intended exclusively for YouTube content partners.

            The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
        onBehalfOfContentOwnerChannel?:
          type: string
          description: |-
            This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.

            The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.

            This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
        part:
          type: string
          description: The part parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.
        id:
          type: string
          description: The id parameter specifies the unique ID of the broadcast that is being bound to a video stream.
      responses:
        200:
          body:
            application/json: LiveBroadcast
      (commons.Id): youtube.liveBroadcasts.bind
      (commons.LogicalStructure):
      - Live Broadcasts
  /control:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube
          - https://www.googleapis.com/auth/youtube.force-ssl
      description: Controls the settings for a slate that can be displayed in the broadcast stream.
      displayName: Control
      is:
      - hasParameters
      queryParameters:
        offsetTimeMs?:
          type: integer
          format: int64
          description: |-
            The offsetTimeMs parameter specifies a positive time offset when the specified slate change will occur. The value is measured in milliseconds from the beginning of the broadcast's monitor stream, which is the time that the testing phase for the broadcast began. Even though it is specified in milliseconds, the value is actually an approximation, and YouTube completes the requested action as closely as possible to that time.

            If you do not specify a value for this parameter, then YouTube performs the action as soon as possible. See the Getting started guide for more details.

            Important: You should only specify a value for this parameter if your broadcast stream is delayed.
        onBehalfOfContentOwner?:
          type: string
          description: |-
            Note: This parameter is intended exclusively for YouTube content partners.

            The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
        onBehalfOfContentOwnerChannel?:
          type: string
          description: |-
            This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.

            The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.

            This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
        part:
          type: string
          description: The part parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.
        id:
          type: string
          description: The id parameter specifies the YouTube live broadcast ID that uniquely identifies the broadcast in which the slate is being updated.
        walltime?:
          type: datetime
          description: The walltime parameter specifies the wall clock time at which the specified slate change will occur. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sssZ) format.
        displaySlate?:
          type: boolean
          description: The displaySlate parameter specifies whether the slate is being enabled or disabled.
      responses:
        200:
          body:
            application/json: LiveBroadcast
      (commons.Id): youtube.liveBroadcasts.control
      (commons.LogicalStructure):
      - Live Broadcasts
  /transition:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube
          - https://www.googleapis.com/auth/youtube.force-ssl
      description: Changes the status of a YouTube live broadcast and initiates any processes associated with the new status. For example, when you transition a broadcast's status to testing, YouTube starts to transmit video to that broadcast's monitor stream. Before calling this method, you should confirm that the value of the status.streamStatus property for the stream bound to your broadcast is active.
      displayName: Transition
      is:
      - hasParameters
      queryParameters:
        onBehalfOfContentOwner?:
          type: string
          description: |-
            Note: This parameter is intended exclusively for YouTube content partners.

            The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
        onBehalfOfContentOwnerChannel?:
          type: string
          description: |-
            This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.

            The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.

            This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
        part:
          type: string
          description: The part parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.
        broadcastStatus:
          type: string
          description: The broadcastStatus parameter identifies the state to which the broadcast is changing. Note that to transition a broadcast to either the testing or live state, the status.streamStatus must be active for the stream that the broadcast is bound to.
          (commons.EnumDescriptions):
          - The broadcast is over. YouTube stops transmitting video.
          - The broadcast is visible to its audience. YouTube transmits video to the broadcast's monitor stream and its broadcast stream.
          - Start testing the broadcast. YouTube transmits video to the broadcast's monitor stream. Note that you can only transition a broadcast to the testing state if its contentDetails.monitorStream.enableMonitorStream property is set to true.
          enum:
          - complete
          - live
          - testing
        id:
          type: string
          description: The id parameter specifies the unique ID of the broadcast that is transitioning to another status.
      responses:
        200:
          body:
            application/json: LiveBroadcast
      (commons.Id): youtube.liveBroadcasts.transition
      (commons.LogicalStructure):
      - Live Broadcasts
  post:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
    description: Creates a broadcast.
    displayName: Insert
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      onBehalfOfContentOwnerChannel?:
        type: string
        description: |-
          This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.

          This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
      part:
        type: string
        description: |-
          The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.

          The part properties that you can include in the parameter value are id, snippet, contentDetails, and status.
    body:
      application/json: LiveBroadcast
    responses:
      200:
        body:
          application/json: LiveBroadcast
    (commons.Id): youtube.liveBroadcasts.insert
    (commons.LogicalStructure):
    - Live Broadcasts
  put:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
    description: Updates a broadcast. For example, you could modify the broadcast settings defined in the liveBroadcast resource's contentDetails object.
    displayName: Update
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      onBehalfOfContentOwnerChannel?:
        type: string
        description: |-
          This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.

          This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
      part:
        type: string
        description: |-
          The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.

          The part properties that you can include in the parameter value are id, snippet, contentDetails, and status.

          Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a broadcast's privacy status is defined in the status part. As such, if your request is updating a private or unlisted broadcast, and the request's part parameter value includes the status part, the broadcast's privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the broadcast will revert to the default privacy setting.
    body:
      application/json: LiveBroadcast
    responses:
      200:
        body:
          application/json: LiveBroadcast
    (commons.Id): youtube.liveBroadcasts.update
    (commons.LogicalStructure):
    - Live Broadcasts
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtube.readonly
    description: Returns a list of YouTube broadcasts that match the API request parameters.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      mine?:
        type: boolean
        description: The mine parameter can be used to instruct the API to only return broadcasts owned by the authenticated user. Set the parameter value to true to only retrieve your own broadcasts.
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      onBehalfOfContentOwnerChannel?:
        type: string
        description: |-
          This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.

          This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
      maxResults?:
        type: integer
        default: 5
        format: int32
        description: The maxResults parameter specifies the maximum number of items that should be returned in the result set.
        maximum: 50
        minimum: 0
      part:
        type: string
        description: The part parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.
      broadcastStatus?:
        type: string
        description: The broadcastStatus parameter filters the API response to only include broadcasts with the specified status.
        (commons.EnumDescriptions):
        - Return current live broadcasts.
        - Return all broadcasts.
        - Return broadcasts that have already ended.
        - Return broadcasts that have not yet started.
        enum:
        - active
        - all
        - completed
        - upcoming
      id?:
        type: string
        description: The id parameter specifies a comma-separated list of YouTube broadcast IDs that identify the broadcasts being retrieved. In a liveBroadcast resource, the id property specifies the broadcast's ID.
      pageToken?:
        type: string
        description: The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
      broadcastType?:
        type: string
        default: BROADCAST_TYPE_FILTER_EVENT
        description: The broadcastType parameter filters the API response to only include broadcasts with the specified type. This is only compatible with the mine filter for now.
        (commons.EnumDescriptions):
        - Return all broadcasts.
        - Return only scheduled event broadcasts.
        - Return only persistent broadcasts.
        enum:
        - all
        - event
        - persistent
    responses:
      200:
        body:
          application/json: LiveBroadcastListResponse
    (commons.Id): youtube.liveBroadcasts.list
    (commons.LogicalStructure):
    - Live Broadcasts
  delete:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
    description: Deletes a broadcast.
    displayName: Delete
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      onBehalfOfContentOwnerChannel?:
        type: string
        description: |-
          This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.

          This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
      id:
        type: string
        description: The id parameter specifies the YouTube live broadcast ID for the resource that is being deleted.
    (commons.Id): youtube.liveBroadcasts.delete
    (commons.LogicalStructure):
    - Live Broadcasts
/playlists:
  post:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtubepartner
    description: Creates a playlist.
    displayName: Insert
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      onBehalfOfContentOwnerChannel?:
        type: string
        description: |-
          This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.

          This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
      part:
        type: string
        description: The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    body:
      application/json: Playlist
    responses:
      200:
        body:
          application/json: Playlist
    (commons.Id): youtube.playlists.insert
    (commons.LogicalStructure):
    - Playlists
  put:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtubepartner
    description: Modifies a playlist. For example, you could change a playlist's title, description, or privacy status.
    displayName: Update
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      part:
        type: string
        description: |-
          The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.

          Note that this method will override the existing values for mutable properties that are contained in any parts that the request body specifies. For example, a playlist's description is contained in the snippet part, which must be included in the request body. If the request does not specify a value for the snippet.description property, the playlist's existing description will be deleted.
    body:
      application/json: Playlist
    responses:
      200:
        body:
          application/json: Playlist
    (commons.Id): youtube.playlists.update
    (commons.LogicalStructure):
    - Playlists
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtube.readonly
        - https://www.googleapis.com/auth/youtubepartner
    description: Returns a collection of playlists that match the API request parameters. For example, you can retrieve all playlists that the authenticated user owns, or you can retrieve one or more playlists by their unique IDs.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      mine?:
        type: boolean
        description: Set this parameter's value to true to instruct the API to only return playlists owned by the authenticated user.
      hl?:
        type: string
        description: The hl parameter should be used for filter out the properties that are not in the given language. Used for the snippet part.
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      onBehalfOfContentOwnerChannel?:
        type: string
        description: |-
          This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.

          This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
      maxResults?:
        type: integer
        default: 5
        format: int32
        description: The maxResults parameter specifies the maximum number of items that should be returned in the result set.
        maximum: 50
        minimum: 0
      part:
        type: string
        description: |-
          The part parameter specifies a comma-separated list of one or more playlist resource properties that the API response will include.

          If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a playlist resource, the snippet property contains properties like author, title, description, tags, and timeCreated. As such, if you set part=snippet, the API response will contain all of those properties.
      id?:
        type: string
        description: The id parameter specifies a comma-separated list of the YouTube playlist ID(s) for the resource(s) that are being retrieved. In a playlist resource, the id property specifies the playlist's YouTube playlist ID.
      pageToken?:
        type: string
        description: The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
      channelId?:
        type: string
        description: This value indicates that the API should only return the specified channel's playlists.
    responses:
      200:
        body:
          application/json: PlaylistListResponse
    (commons.Id): youtube.playlists.list
    (commons.LogicalStructure):
    - Playlists
  delete:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtubepartner
    description: Deletes a playlist.
    displayName: Delete
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      id:
        type: string
        description: The id parameter specifies the YouTube playlist ID for the playlist that is being deleted. In a playlist resource, the id property specifies the playlist's ID.
    (commons.Id): youtube.playlists.delete
    (commons.LogicalStructure):
    - Playlists
/watermarks:
  /set:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube
          - https://www.googleapis.com/auth/youtube.force-ssl
          - https://www.googleapis.com/auth/youtube.upload
          - https://www.googleapis.com/auth/youtubepartner
      description: Uploads a watermark image to YouTube and sets it for a channel.
      displayName: Set
      is:
      - hasParameters
      queryParameters:
        onBehalfOfContentOwner?:
          type: string
          description: |-
            Note: This parameter is intended exclusively for YouTube content partners.

            The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
        channelId:
          type: string
          description: The channelId parameter specifies the YouTube channel ID for which the watermark is being provided.
      body:
        application/json: InvideoBranding
      (commons.Id): youtube.watermarks.set
      (commons.LogicalStructure):
      - Watermarks
  /unset:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube
          - https://www.googleapis.com/auth/youtube.force-ssl
          - https://www.googleapis.com/auth/youtubepartner
      description: Deletes a channel's watermark image.
      displayName: Unset
      is:
      - hasParameters
      queryParameters:
        onBehalfOfContentOwner?:
          type: string
          description: |-
            Note: This parameter is intended exclusively for YouTube content partners.

            The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
        channelId:
          type: string
          description: The channelId parameter specifies the YouTube channel ID for which the watermark is being unset.
      (commons.Id): youtube.watermarks.unset
      (commons.LogicalStructure):
      - Watermarks
/liveStreams:
  post:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
    description: Creates a video stream. The stream enables you to send your video to YouTube, which can then broadcast the video to your audience.
    displayName: Insert
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      onBehalfOfContentOwnerChannel?:
        type: string
        description: |-
          This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.

          This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
      part:
        type: string
        description: |-
          The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.

          The part properties that you can include in the parameter value are id, snippet, cdn, and status.
    body:
      application/json: LiveStream
    responses:
      200:
        body:
          application/json: LiveStream
    (commons.Id): youtube.liveStreams.insert
    (commons.LogicalStructure):
    - Live Streams
  put:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
    description: Updates a video stream. If the properties that you want to change cannot be updated, then you need to create a new stream with the proper settings.
    displayName: Update
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      onBehalfOfContentOwnerChannel?:
        type: string
        description: |-
          This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.

          This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
      part:
        type: string
        description: |-
          The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.

          The part properties that you can include in the parameter value are id, snippet, cdn, and status.

          Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. If the request body does not specify a value for a mutable property, the existing value for that property will be removed.
    body:
      application/json: LiveStream
    responses:
      200:
        body:
          application/json: LiveStream
    (commons.Id): youtube.liveStreams.update
    (commons.LogicalStructure):
    - Live Streams
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtube.readonly
    description: Returns a list of video streams that match the API request parameters.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      mine?:
        type: boolean
        description: The mine parameter can be used to instruct the API to only return streams owned by the authenticated user. Set the parameter value to true to only retrieve your own streams.
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      onBehalfOfContentOwnerChannel?:
        type: string
        description: |-
          This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.

          This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
      maxResults?:
        type: integer
        default: 5
        format: int32
        description: The maxResults parameter specifies the maximum number of items that should be returned in the result set.
        maximum: 50
        minimum: 0
      part:
        type: string
        description: The part parameter specifies a comma-separated list of one or more liveStream resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, cdn, and status.
      id?:
        type: string
        description: The id parameter specifies a comma-separated list of YouTube stream IDs that identify the streams being retrieved. In a liveStream resource, the id property specifies the stream's ID.
      pageToken?:
        type: string
        description: The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    responses:
      200:
        body:
          application/json: LiveStreamListResponse
    (commons.Id): youtube.liveStreams.list
    (commons.LogicalStructure):
    - Live Streams
  delete:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
    description: Deletes a video stream.
    displayName: Delete
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      onBehalfOfContentOwnerChannel?:
        type: string
        description: |-
          This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.

          This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
      id:
        type: string
        description: The id parameter specifies the YouTube live stream ID for the resource that is being deleted.
    (commons.Id): youtube.liveStreams.delete
    (commons.LogicalStructure):
    - Live Streams
/commentThreads:
  post:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube.force-ssl
    description: Creates a new top-level comment. To add a reply to an existing comment, use the comments.insert method instead.
    displayName: Insert
    is:
    - hasParameters
    queryParameters:
      part:
        type: string
        description: The part parameter identifies the properties that the API response will include. Set the parameter value to snippet. The snippet part has a quota cost of 2 units.
    body:
      application/json: CommentThread
    responses:
      200:
        body:
          application/json: CommentThread
    (commons.Id): youtube.commentThreads.insert
    (commons.LogicalStructure):
    - Comment Threads
  put:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube.force-ssl
    description: Modifies the top-level comment in a comment thread.
    displayName: Update
    is:
    - hasParameters
    queryParameters:
      part:
        type: string
        description: The part parameter specifies a comma-separated list of commentThread resource properties that the API response will include. You must at least include the snippet part in the parameter value since that part contains all of the properties that the API request can update.
    body:
      application/json: CommentThread
    responses:
      200:
        body:
          application/json: CommentThread
    (commons.Id): youtube.commentThreads.update
    (commons.LogicalStructure):
    - Comment Threads
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube.force-ssl
    description: Returns a list of comment threads that match the API request parameters.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      searchTerms?:
        type: string
        description: |-
          The searchTerms parameter instructs the API to limit the API response to only contain comments that contain the specified search terms.

          Note: This parameter is not supported for use in conjunction with the id parameter.
      maxResults?:
        type: integer
        default: 20
        format: int32
        description: |-
          The maxResults parameter specifies the maximum number of items that should be returned in the result set.

          Note: This parameter is not supported for use in conjunction with the id parameter.
        maximum: 100
        minimum: 1
      allThreadsRelatedToChannelId?:
        type: string
        description: The allThreadsRelatedToChannelId parameter instructs the API to return all comment threads associated with the specified channel. The response can include comments about the channel or about the channel's videos.
      part:
        type: string
        description: The part parameter specifies a comma-separated list of one or more commentThread resource properties that the API response will include.
      moderationStatus?:
        type: string
        default: MODERATION_STATUS_PUBLISHED
        description: |-
          Set this parameter to limit the returned comment threads to a particular moderation state.

          Note: This parameter is not supported for use in conjunction with the id parameter.
        (commons.EnumDescriptions):
        - Retrieve comment threads that are awaiting review by a moderator. A comment thread can be included in the response if the top-level comment or at least one of the replies to that comment are awaiting review.
        - Retrieve comment threads classified as likely to be spam. A comment thread can be included in the response if the top-level comment or at least one of the replies to that comment is considered likely to be spam.
        - Retrieve threads of published comments. This is the default value. A comment thread can be included in the response if its top-level comment has been published.
        enum:
        - heldForReview
        - likelySpam
        - published
      videoId?:
        type: string
        description: The videoId parameter instructs the API to return comment threads associated with the specified video ID.
      id?:
        type: string
        description: The id parameter specifies a comma-separated list of comment thread IDs for the resources that should be retrieved.
      pageToken?:
        type: string
        description: |-
          The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken property identifies the next page of the result that can be retrieved.

          Note: This parameter is not supported for use in conjunction with the id parameter.
      channelId?:
        type: string
        description: The channelId parameter instructs the API to return comment threads containing comments about the specified channel. (The response will not include comments left on videos that the channel uploaded.)
      order?:
        type: string
        default: 'true'
        description: "The order parameter specifies the order in which the API response\
          \ should list comment threads. Valid values are: \n- time - Comment threads\
          \ are ordered by time. This is the default behavior.\n- relevance - Comment\
          \ threads are ordered by relevance.Note: This parameter is not supported\
          \ for use in conjunction with the id parameter."
        (commons.EnumDescriptions):
        - Order by relevance.
        - Order by time.
        enum:
        - relevance
        - time
      textFormat?:
        type: string
        default: FORMAT_HTML
        description: Set this parameter's value to html or plainText to instruct the API to return the comments left by users in html formatted or in plain text.
        (commons.EnumDescriptions):
        - Returns the comments in HTML format. This is the default value.
        - Returns the comments in plain text format.
        enum:
        - html
        - plainText
    responses:
      200:
        body:
          application/json: CommentThreadListResponse
    (commons.Id): youtube.commentThreads.list
    (commons.LogicalStructure):
    - Comment Threads
/channels:
  put:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtubepartner
    description: Updates a channel's metadata. Note that this method currently only supports updates to the channel resource's brandingSettings and invideoPromotion objects and their child properties.
    displayName: Update
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: The onBehalfOfContentOwner parameter indicates that the authenticated user is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with needs to be linked to the specified YouTube content owner.
      part:
        type: string
        description: |-
          The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.

          The API currently only allows the parameter value to be set to either brandingSettings or invideoPromotion. (You cannot update both of those parts with a single request.)

          Note that this method overrides the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies.
    body:
      application/json: Channel
    responses:
      200:
        body:
          application/json: Channel
    (commons.Id): youtube.channels.update
    (commons.LogicalStructure):
    - Channels
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtube.readonly
        - https://www.googleapis.com/auth/youtubepartner
        - https://www.googleapis.com/auth/youtubepartner-channel-audit
    description: Returns a collection of zero or more channel resources that match the request criteria.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      mine?:
        type: boolean
        description: Set this parameter's value to true to instruct the API to only return channels owned by the authenticated user.
      hl?:
        type: string
        description: The hl parameter should be used for filter out the properties that are not in the given language. Used for the brandingSettings part.
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      maxResults?:
        type: integer
        default: 5
        format: int32
        description: The maxResults parameter specifies the maximum number of items that should be returned in the result set.
        maximum: 50
        minimum: 0
      managedByMe?:
        type: boolean
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          Set this parameter's value to true to instruct the API to only return channels managed by the content owner that the onBehalfOfContentOwner parameter specifies. The user must be authenticated as a CMS account linked to the specified content owner and onBehalfOfContentOwner must be provided.
      mySubscribers?:
        type: boolean
        description: Use the subscriptions.list method and its mySubscribers parameter to retrieve a list of subscribers to the authenticated user's channel.
      part:
        type: string
        description: |-
          The part parameter specifies a comma-separated list of one or more channel resource properties that the API response will include.

          If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a channel resource, the contentDetails property contains other properties, such as the uploads properties. As such, if you set part=contentDetails, the API response will also contain all of those nested properties.
      forUsername?:
        type: string
        description: The forUsername parameter specifies a YouTube username, thereby requesting the channel associated with that username.
      id?:
        type: string
        description: The id parameter specifies a comma-separated list of the YouTube channel ID(s) for the resource(s) that are being retrieved. In a channel resource, the id property specifies the channel's YouTube channel ID.
      pageToken?:
        type: string
        description: The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
      categoryId?:
        type: string
        description: The categoryId parameter specifies a YouTube guide category, thereby requesting YouTube channels associated with that category.
    responses:
      200:
        body:
          application/json: ChannelListResponse
    (commons.Id): youtube.channels.list
    (commons.LogicalStructure):
    - Channels
/activities:
  post:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
    description: |-
      Posts a bulletin for a specific channel. (The user submitting the request must be authorized to act on the channel's behalf.)

      Note: Even though an activity resource can contain information about actions like a user rating a video or marking a video as a favorite, you need to use other API methods to generate those activity resources. For example, you would use the API's videos.rate() method to rate a video and the playlistItems.insert() method to mark a video as a favorite.
    displayName: Insert
    is:
    - hasParameters
    queryParameters:
      part:
        type: string
        description: The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    body:
      application/json: Activity
    responses:
      200:
        body:
          application/json: Activity
    (commons.Id): youtube.activities.insert
    (commons.LogicalStructure):
    - Activities
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtube.readonly
    description: Returns a list of channel activity events that match the request criteria. For example, you can retrieve events associated with a particular channel, events associated with the user's subscriptions and Google+ friends, or the YouTube home page feed, which is customized for each user.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      mine?:
        type: boolean
        description: Set this parameter's value to true to retrieve a feed of the authenticated user's activities.
      publishedAfter?:
        type: datetime
        description: The publishedAfter parameter specifies the earliest date and time that an activity could have occurred for that activity to be included in the API response. If the parameter value specifies a day, but not a time, then any activities that occurred that day will be included in the result set. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      regionCode?:
        type: string
        description: The regionCode parameter instructs the API to return results for the specified country. The parameter value is an ISO 3166-1 alpha-2 country code. YouTube uses this value when the authorized user's previous activity on YouTube does not provide enough information to generate the activity feed.
      maxResults?:
        type: integer
        default: 5
        format: int32
        description: The maxResults parameter specifies the maximum number of items that should be returned in the result set.
        maximum: 50
        minimum: 0
      part:
        type: string
        description: |-
          The part parameter specifies a comma-separated list of one or more activity resource properties that the API response will include.

          If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in an activity resource, the snippet property contains other properties that identify the type of activity, a display title for the activity, and so forth. If you set part=snippet, the API response will also contain all of those nested properties.
      pageToken?:
        type: string
        description: The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
      channelId?:
        type: string
        description: The channelId parameter specifies a unique YouTube channel ID. The API will then return a list of that channel's activities.
      publishedBefore?:
        type: datetime
        description: The publishedBefore parameter specifies the date and time before which an activity must have occurred for that activity to be included in the API response. If the parameter value specifies a day, but not a time, then any activities that occurred that day will be excluded from the result set. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
      home?:
        type: boolean
        description: Set this parameter's value to true to retrieve the activity feed that displays on the YouTube home page for the currently authenticated user.
    responses:
      200:
        body:
          application/json: ActivityListResponse
    (commons.Id): youtube.activities.list
    (commons.LogicalStructure):
    - Activities
/channelSections:
  post:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtubepartner
    description: Adds a channelSection for the authenticated user's channel.
    displayName: Insert
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      onBehalfOfContentOwnerChannel?:
        type: string
        description: |-
          This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.

          This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
      part:
        type: string
        description: |-
          The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.

          The part names that you can include in the parameter value are snippet and contentDetails.
    body:
      application/json: ChannelSection
    responses:
      200:
        body:
          application/json: ChannelSection
    (commons.Id): youtube.channelSections.insert
    (commons.LogicalStructure):
    - Channel Sections
  put:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtubepartner
    description: Update a channelSection.
    displayName: Update
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      part:
        type: string
        description: |-
          The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.

          The part names that you can include in the parameter value are snippet and contentDetails.
    body:
      application/json: ChannelSection
    responses:
      200:
        body:
          application/json: ChannelSection
    (commons.Id): youtube.channelSections.update
    (commons.LogicalStructure):
    - Channel Sections
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtube.readonly
        - https://www.googleapis.com/auth/youtubepartner
    description: Returns channelSection resources that match the API request criteria.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      mine?:
        type: boolean
        description: Set this parameter's value to true to retrieve a feed of the authenticated user's channelSections.
      hl?:
        type: string
        description: The hl parameter indicates that the snippet.localized property values in the returned channelSection resources should be in the specified language if localized values for that language are available. For example, if the API request specifies hl=de, the snippet.localized properties in the API response will contain German titles if German titles are available. Channel owners can provide localized channel section titles using either the channelSections.insert or channelSections.update method.
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      part:
        type: string
        description: |-
          The part parameter specifies a comma-separated list of one or more channelSection resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, and contentDetails.

          If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a channelSection resource, the snippet property contains other properties, such as a display title for the channelSection. If you set part=snippet, the API response will also contain all of those nested properties.
      id?:
        type: string
        description: The id parameter specifies a comma-separated list of the YouTube channelSection ID(s) for the resource(s) that are being retrieved. In a channelSection resource, the id property specifies the YouTube channelSection ID.
      channelId?:
        type: string
        description: The channelId parameter specifies a YouTube channel ID. The API will only return that channel's channelSections.
    responses:
      200:
        body:
          application/json: ChannelSectionListResponse
    (commons.Id): youtube.channelSections.list
    (commons.LogicalStructure):
    - Channel Sections
  delete:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtubepartner
    description: Deletes a channelSection.
    displayName: Delete
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      id:
        type: string
        description: The id parameter specifies the YouTube channelSection ID for the resource that is being deleted. In a channelSection resource, the id property specifies the YouTube channelSection ID.
    (commons.Id): youtube.channelSections.delete
    (commons.LogicalStructure):
    - Channel Sections
/playlistItems:
  post:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtubepartner
    description: Adds a resource to a playlist.
    displayName: Insert
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      part:
        type: string
        description: The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    body:
      application/json: PlaylistItem
    responses:
      200:
        body:
          application/json: PlaylistItem
    (commons.Id): youtube.playlistItems.insert
    (commons.LogicalStructure):
    - Playlist Items
  put:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtubepartner
    description: Modifies a playlist item. For example, you could update the item's position in the playlist.
    displayName: Update
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      part:
        type: string
        description: |-
          The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.

          Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a playlist item can specify a start time and end time, which identify the times portion of the video that should play when users watch the video in the playlist. If your request is updating a playlist item that sets these values, and the request's part parameter value includes the contentDetails part, the playlist item's start and end times will be updated to whatever value the request body specifies. If the request body does not specify values, the existing start and end times will be removed and replaced with the default settings.
    body:
      application/json: PlaylistItem
    responses:
      200:
        body:
          application/json: PlaylistItem
    (commons.Id): youtube.playlistItems.update
    (commons.LogicalStructure):
    - Playlist Items
  get:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtube.readonly
        - https://www.googleapis.com/auth/youtubepartner
    description: Returns a collection of playlist items that match the API request parameters. You can retrieve all of the playlist items in a specified playlist or retrieve one or more playlist items by their unique IDs.
    displayName: List
    is:
    - hasParameters
    queryParameters:
      playlistId?:
        type: string
        description: The playlistId parameter specifies the unique ID of the playlist for which you want to retrieve playlist items. Note that even though this is an optional parameter, every request to retrieve playlist items must specify a value for either the id parameter or the playlistId parameter.
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      maxResults?:
        type: integer
        default: 5
        format: int32
        description: The maxResults parameter specifies the maximum number of items that should be returned in the result set.
        maximum: 50
        minimum: 0
      part:
        type: string
        description: |-
          The part parameter specifies a comma-separated list of one or more playlistItem resource properties that the API response will include.

          If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a playlistItem resource, the snippet property contains numerous fields, including the title, description, position, and resourceId properties. As such, if you set part=snippet, the API response will contain all of those properties.
      videoId?:
        type: string
        description: The videoId parameter specifies that the request should return only the playlist items that contain the specified video.
      id?:
        type: string
        description: The id parameter specifies a comma-separated list of one or more unique playlist item IDs.
      pageToken?:
        type: string
        description: The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    responses:
      200:
        body:
          application/json: PlaylistItemListResponse
    (commons.Id): youtube.playlistItems.list
    (commons.LogicalStructure):
    - Playlist Items
  delete:
    securedBy:
      oath2:
        scopes:
        - https://www.googleapis.com/auth/youtube
        - https://www.googleapis.com/auth/youtube.force-ssl
        - https://www.googleapis.com/auth/youtubepartner
    description: Deletes a playlist item.
    displayName: Delete
    is:
    - hasParameters
    queryParameters:
      onBehalfOfContentOwner?:
        type: string
        description: |-
          Note: This parameter is intended exclusively for YouTube content partners.

          The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
      id:
        type: string
        description: The id parameter specifies the YouTube playlist item ID for the playlist item that is being deleted. In a playlistItem resource, the id property specifies the playlist item's ID.
    (commons.Id): youtube.playlistItems.delete
    (commons.LogicalStructure):
    - Playlist Items
/thumbnails:
  /set:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/youtube
          - https://www.googleapis.com/auth/youtube.force-ssl
          - https://www.googleapis.com/auth/youtube.upload
          - https://www.googleapis.com/auth/youtubepartner
      description: Uploads a custom video thumbnail to YouTube and sets it for a video.
      displayName: Set
      is:
      - hasParameters
      queryParameters:
        onBehalfOfContentOwner?:
          type: string
          description: |-
            Note: This parameter is intended exclusively for YouTube content partners.

            The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
        videoId:
          type: string
          description: The videoId parameter specifies a YouTube video ID for which the custom video thumbnail is being provided.
      responses:
        200:
          body:
            application/json: ThumbnailSetResponse
      (commons.Id): youtube.thumbnails.set
      (commons.LogicalStructure):
      - Thumbnails
