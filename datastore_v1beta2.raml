#%RAML 1.0
title: Google Cloud Datastore API
version: v1beta2
baseUri: https://www.googleapis.com/datastore/v1beta2/datasets/
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
  extras: https://raw.githubusercontent.com/apiregistry/typesExtras/master/typeExtras.raml
(commons.Links):
- title: Developer Documentation
  url: https://developers.google.com/datastore/
  role: documentation
(commons.Icons):
- url: http://www.google.com/images/icons/product/search-32.gif
  name: x32
- url: http://www.google.com/images/icons/product/search-16.gif
  name: x16
(commons.Id): datastore:v1beta2
securitySchemes:
  oath2:
    type: OAuth 2.0
    description: Google Oath2.0 authorization. Detailed documentation can be found at https://developers.google.com/identity/protocols/OAuth2
    settings:
      authorizationGrants:
      - authorization_code
      - implicit
      authorizationUri: https://accounts.google.com/o/oauth2/v2/auth
      accessTokenUri: https://accounts.google.com/o/oauth2/v2/auth
      scopes:
      - https://www.googleapis.com/auth/userinfo.email
      - https://www.googleapis.com/auth/cloud-platform
      - https://www.googleapis.com/auth/datastore
traits:
  hasParameters:
    queryParameters:
      quotaUser?:
        type: string
        description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
      prettyPrint?:
        type: boolean
        default: true
        description: Returns response with indentations and line breaks.
      userIp?:
        type: string
        description: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
      fields?:
        type: string
        description: Selector specifying which fields to include in a partial response.
securedBy:
  oath2: 
types:
  AllocateIdsRequest:
    type: object
    properties:
      keys?:
        type: array
        description: A list of keys with incomplete key paths to allocate IDs for. No key may be reserved/read-only.
        items: Key
  AllocateIdsResponse:
    type: object
    properties:
      keys?:
        type: array
        description: The keys specified in the request (in the same order), each with its key path completed with a newly allocated ID.
        items: Key
      header?: ResponseHeader
  BeginTransactionRequest:
    type: object
    properties:
      isolationLevel?:
        type: string
        description: The transaction isolation level. Either snapshot or serializable. The default isolation level is snapshot isolation, which means that another transaction may not concurrently modify the data that is modified by this transaction. Optionally, a transaction can request to be made serializable which means that another transaction cannot concurrently modify the data that is read or modified by this transaction.
        enum:
        - SERIALIZABLE
        - SNAPSHOT
  BeginTransactionResponse:
    type: object
    properties:
      header?: ResponseHeader
      transaction?:
        type: string
        description: The transaction identifier (always present).
  CommitRequest:
    type: object
    properties:
      ignoreReadOnly?:
        type: boolean
      mode?:
        type: string
        description: The type of commit to perform. Either TRANSACTIONAL or NON_TRANSACTIONAL.
        enum:
        - NON_TRANSACTIONAL
        - TRANSACTIONAL
      mutation?: Mutation
      transaction?:
        type: string
        description: The transaction identifier, returned by a call to beginTransaction. Must be set when mode is TRANSACTIONAL.
  CommitResponse:
    type: object
    properties:
      mutationResult?: MutationResult
      header?: ResponseHeader
  CompositeFilter:
    type: object
    properties:
      filters?:
        type: array
        description: The list of filters to combine. Must contain at least one filter.
        items: Filter
      operator?:
        type: string
        description: The operator for combining multiple filters. Only "and" is currently supported.
        enum:
        - AND
    description: A filter that merges the multiple other filters using the given operation.
  Entity:
    type: object
    properties:
      key?: Key
      properties?:
        type: object
        description: The entity's properties.
    description: An entity.
  EntityResult:
    type: object
    properties:
      entity?: Entity
    description: The result of fetching an entity from the datastore.
  Filter:
    type: object
    properties:
      compositeFilter?: CompositeFilter
      propertyFilter?: PropertyFilter
    description: A holder for any type of filter. Exactly one field should be specified.
  GqlQuery:
    type: object
    properties:
      allowLiteral?:
        type: boolean
        description: When false, the query string must not contain a literal.
      numberArgs?:
        type: array
        description: Numbered binding site @1 references the first numbered argument, effectively using 1-based indexing, rather than the usual 0. A numbered argument must NOT set field GqlQueryArg.name. For each binding site numbered i in query_string, there must be an ith numbered argument. The inverse must also be true.
        items: GqlQueryArg
      nameArgs?:
        type: array
        description: A named argument must set field GqlQueryArg.name. No two named arguments may have the same name. For each non-reserved named binding site in the query string, there must be a named argument with that name, but not necessarily the inverse.
        items: GqlQueryArg
      queryString?:
        type: string
        description: The query string.
    description: A GQL query.
  GqlQueryArg:
    type: object
    properties:
      cursor?:
        type: string
      name?:
        type: string
        description: Must match regex "[A-Za-z_$][A-Za-z_$0-9]*". Must not match regex "__.*__". Must not be "".
      value?: Value
    description: A binding argument for a GQL query.
  Key:
    type: object
    properties:
      path?:
        type: array
        description: 'The entity path. An entity path consists of one or more elements
          composed of a kind and a string or numerical identifier, which identify
          entities. The first element identifies a root entity, the second element
          identifies a child of the root entity, the third element a child of the
          second entity, and so forth. The entities identified by all prefixes of
          the path are called the element''s ancestors. An entity path is always fully
          complete: ALL of the entity''s ancestors are required to be in the path
          along with the entity identifier itself. The only exception is that in some
          documented cases, the identifier in the last path element (for the entity)
          itself may be omitted. A path can never be empty. The path can have at most
          100 elements.'
        items: KeyPathElement
      partitionId?: PartitionId
    description: A unique identifier for an entity.
  KeyPathElement:
    type: object
    properties:
      kind?:
        type: string
        description: The kind of the entity. A kind matching regex "__.*__" is reserved/read-only. A kind must not contain more than 500 characters. Cannot be "".
      name?:
        type: string
        description: The name of the entity. A name matching regex "__.*__" is reserved/read-only. A name must not be more than 500 characters. Cannot be "".
      id?:
        type: integer
        format: int64
        description: The ID of the entity. Never equal to zero. Values less than zero are discouraged and will not be supported in the future.
    description: |-
      A (kind, ID/name) pair used to construct a key path.

      At most one of name or ID may be set. If either is set, the element is complete. If neither is set, the element is incomplete.
  KindExpression:
    type: object
    properties:
      name?:
        type: string
        description: The name of the kind.
    description: A representation of a kind.
  LookupRequest:
    type: object
    properties:
      keys?:
        type: array
        description: Keys of entities to look up from the datastore.
        items: Key
      readOptions?: ReadOptions
  LookupResponse:
    type: object
    properties:
      deferred?:
        type: array
        description: A list of keys that were not looked up due to resource constraints.
        items: Key
      found?:
        type: array
        description: Entities found.
        items: EntityResult
      missing?:
        type: array
        description: Entities not found, with only the key populated.
        items: EntityResult
      header?: ResponseHeader
  Mutation:
    type: object
    properties:
      upsert?:
        type: array
        description: Entities to upsert. Each upserted entity's key must have a complete path and must not be reserved/read-only.
        items: Entity
      insert?:
        type: array
        description: Entities to insert. Each inserted entity's key must have a complete path and must not be reserved/read-only.
        items: Entity
      insertAutoId?:
        type: array
        description: Insert entities with a newly allocated ID. Each inserted entity's key must omit the final identifier in its path and must not be reserved/read-only.
        items: Entity
      update?:
        type: array
        description: Entities to update. Each updated entity's key must have a complete path and must not be reserved/read-only.
        items: Entity
      force?:
        type: boolean
        description: Ignore a user specified read-only period. Optional.
      delete?:
        type: array
        description: Keys of entities to delete. Each key must have a complete key path and must not be reserved/read-only.
        items: Key
    description: A set of changes to apply.
  MutationResult:
    type: object
    properties:
      indexUpdates?:
        type: integer
        format: int32
        description: Number of index writes.
      insertAutoIdKeys?:
        type: array
        description: Keys for insertAutoId entities. One per entity from the request, in the same order.
        items: Key
  PartitionId:
    type: object
    properties:
      namespace?:
        type: string
        description: The namespace.
      datasetId?:
        type: string
        description: The dataset ID.
    description: |-
      An identifier for a particular subset of entities.

      Entities are partitioned into various subsets, each used by different datasets and different namespaces within a dataset and so forth.
  Property:
    type: object
    properties:
      listValue?:
        type: array
        description: A list value. Cannot contain another list value. A Value instance that sets field list_value must not set field meaning or field indexed.
        items: Value
      stringValue?:
        type: string
        description: A UTF-8 encoded string value. When indexed is true, may have at most 500 characters.
      entityValue?: Entity
      dateTimeValue?:
        type: datetime
        description: A timestamp value.
      indexed?:
        type: boolean
        description: |-
          If the value should be indexed.

          The indexed property may be set for a null value. When indexed is true, stringValue is limited to 500 characters and the blob value is limited to 500 bytes. Input values by default have indexed set to true; however, you can explicitly set indexed to true if you want. (An output value never has indexed explicitly set to true.) If a value is itself an entity, it cannot have indexed set to true.
      keyValue?: Key
      meaning?:
        type: integer
        format: int32
        description: The meaning field is reserved and should not be used.
      blobKeyValue?:
        type: string
        description: A blob key value.
      booleanValue?:
        type: boolean
        description: A boolean value.
      integerValue?:
        type: integer
        format: int64
        description: An integer value.
      doubleValue?:
        type: number
        format: double
        description: A double value.
      blobValue?:
        type: string
        description: A blob value. May be a maximum of 1,000,000 bytes. When indexed is true, may have at most 500 bytes.
    description: An entity property.
  PropertyExpression:
    type: object
    properties:
      property?: PropertyReference
      aggregationFunction?:
        type: string
        description: 'The aggregation function to apply to the property. Optional.
          Can only be used when grouping by at least one property. Must then be set
          on all properties in the projection that are not being grouped by. Aggregation
          functions: first selects the first result as determined by the query''s
          order.'
        enum:
        - FIRST
    description: A representation of a property in a projection.
  PropertyFilter:
    type: object
    properties:
      property?: PropertyReference
      value?: Value
      operator?:
        type: string
        description: The operator to filter by. One of lessThan, lessThanOrEqual, greaterThan, greaterThanOrEqual, equal, or hasAncestor.
        enum:
        - EQUAL
        - GREATER_THAN
        - GREATER_THAN_OR_EQUAL
        - HAS_ANCESTOR
        - LESS_THAN
        - LESS_THAN_OR_EQUAL
    description: A filter on a specific property.
  PropertyOrder:
    type: object
    properties:
      property?: PropertyReference
      direction?:
        type: string
        description: The direction to order by. One of ascending or descending. Optional, defaults to ascending.
        enum:
        - ASCENDING
        - DESCENDING
    description: The desired order for a specific property.
  PropertyReference:
    type: object
    properties:
      name?:
        type: string
        description: The name of the property.
    description: A reference to a property relative to the kind expressions.
  Query:
    type: object
    properties:
      filter?: Filter
      offset?:
        type: integer
        format: int32
        description: The number of results to skip. Applies before limit, but after all other constraints (optional, defaults to 0).
      limit?:
        type: integer
        format: int32
        description: The maximum number of results to return. Applies after all other constraints. Optional.
      endCursor?:
        type: string
        description: An ending point for the query results. Optional. Query cursors are returned in query result batches.
      kinds?:
        type: array
        description: The kinds to query (if empty, returns entities from all kinds).
        items: KindExpression
      groupBy?:
        type: array
        description: The properties to group by (if empty, no grouping is applied to the result set).
        items: PropertyReference
      projection?:
        type: array
        description: The projection to return. If not set the entire entity is returned.
        items: PropertyExpression
      startCursor?:
        type: string
        description: A starting point for the query results. Optional. Query cursors are returned in query result batches.
      order?:
        type: array
        description: The order to apply to the query results (if empty, order is unspecified).
        items: PropertyOrder
    description: A query.
  QueryResultBatch:
    type: object
    properties:
      entityResults?:
        type: array
        description: The results for this batch.
        items: EntityResult
      endCursor?:
        type: string
        description: 'A cursor that points to the position after the last result in
          the batch. May be absent. TODO(arfuller): Once all plans produce cursors
          update documentation here.'
      skippedResults?:
        type: integer
        format: int32
        description: The number of results skipped because of Query.offset.
      moreResults?:
        type: string
        description: The state of the query after the current batch. One of notFinished, moreResultsAfterLimit, noMoreResults.
        enum:
        - MORE_RESULTS_AFTER_LIMIT
        - NOT_FINISHED
        - NO_MORE_RESULTS
      entityResultType?:
        type: string
        description: The result type for every entity in entityResults. full for full entities, projection for entities with only projected properties, keyOnly for entities with only a key.
        enum:
        - FULL
        - KEY_ONLY
        - PROJECTION
    description: A batch of results produced by a query.
  ReadOptions:
    type: object
    properties:
      readConsistency?:
        type: string
        description: The read consistency to use. One of default, strong, or eventual. Cannot be set when transaction is set. Lookup and ancestor queries default to strong, global queries default to eventual and cannot be set to strong. Optional. Default is default.
        enum:
        - DEFAULT
        - EVENTUAL
        - STRONG
      transaction?:
        type: string
        description: The transaction to use. Optional.
  ResponseHeader:
    type: object
    properties:
      kind?:
        type: string
        default: datastore#responseHeader
        description: 'Identifies what kind of resource this is. Value: the fixed string
          "datastore#responseHeader".'
  RollbackRequest:
    type: object
    properties:
      transaction?:
        type: string
        description: The transaction identifier, returned by a call to beginTransaction.
  RollbackResponse:
    type: object
    properties:
      header?: ResponseHeader
  RunQueryRequest:
    type: object
    properties:
      partitionId?: PartitionId
      gqlQuery?: GqlQuery
      query?: Query
      readOptions?: ReadOptions
  RunQueryResponse:
    type: object
    properties:
      batch?: QueryResultBatch
      header?: ResponseHeader
  Value:
    type: object
    properties:
      listValue?:
        type: array
        description: A list value. Cannot contain another list value. A Value instance that sets field list_value must not set field meaning or field indexed.
        items: Value
      stringValue?:
        type: string
        description: A UTF-8 encoded string value. When indexed is true, may have at most 500 characters.
      entityValue?: Entity
      dateTimeValue?:
        type: string
        description: A timestamp value.
      indexed?:
        type: boolean
        description: |-
          If the value should be indexed.

          The indexed property may be set for a null value. When indexed is true, stringValue is limited to 500 characters and the blob value is limited to 500 bytes. Input values by default have indexed set to true; however, you can explicitly set indexed to true if you want. (An output value never has indexed explicitly set to true.) If a value is itself an entity, it cannot have indexed set to true.
      keyValue?: Key
      meaning?:
        type: integer
        format: int32
        description: The meaning field is reserved and should not be used.
      blobKeyValue?:
        type: string
        description: A blob key value.
      booleanValue?:
        type: boolean
        description: A boolean value.
      integerValue?:
        type: integer
        format: int64
        description: An integer value.
      doubleValue?:
        type: number
        format: double
        description: A double value.
      blobValue?:
        type: string
        description: A blob value. May be a maximum of 1,000,000 bytes. When indexed is true, may have at most 500 bytes.
    description: A message that can hold any of the supported value types and associated metadata.
/{datasetId}:
  uriParameters:
    datasetId:
      type: string
      description: Identifies the dataset.
  /rollback:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/cloud-platform
          - https://www.googleapis.com/auth/datastore
          - https://www.googleapis.com/auth/userinfo.email
      description: Roll back a transaction.
      displayName: Rollback
      is:
      - hasParameters
      body:
        application/json: RollbackRequest
      responses:
        200:
          body:
            application/json: RollbackResponse
      (commons.Id): datastore.datasets.rollback
      (commons.LogicalStructure):
      - Datasets
  /lookup:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/cloud-platform
          - https://www.googleapis.com/auth/datastore
          - https://www.googleapis.com/auth/userinfo.email
      description: Look up some entities by key.
      displayName: Lookup
      is:
      - hasParameters
      body:
        application/json: LookupRequest
      responses:
        200:
          body:
            application/json: LookupResponse
      (commons.Id): datastore.datasets.lookup
      (commons.LogicalStructure):
      - Datasets
  /beginTransaction:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/cloud-platform
          - https://www.googleapis.com/auth/datastore
          - https://www.googleapis.com/auth/userinfo.email
      description: Begin a new transaction.
      displayName: Begin Transaction
      is:
      - hasParameters
      body:
        application/json: BeginTransactionRequest
      responses:
        200:
          body:
            application/json: BeginTransactionResponse
      (commons.Id): datastore.datasets.beginTransaction
      (commons.LogicalStructure):
      - Datasets
  /commit:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/cloud-platform
          - https://www.googleapis.com/auth/datastore
          - https://www.googleapis.com/auth/userinfo.email
      description: Commit a transaction, optionally creating, deleting or modifying some entities.
      displayName: Commit
      is:
      - hasParameters
      body:
        application/json: CommitRequest
      responses:
        200:
          body:
            application/json: CommitResponse
      (commons.Id): datastore.datasets.commit
      (commons.LogicalStructure):
      - Datasets
  /runQuery:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/cloud-platform
          - https://www.googleapis.com/auth/datastore
          - https://www.googleapis.com/auth/userinfo.email
      description: Query for entities.
      displayName: Run Query
      is:
      - hasParameters
      body:
        application/json: RunQueryRequest
      responses:
        200:
          body:
            application/json: RunQueryResponse
      (commons.Id): datastore.datasets.runQuery
      (commons.LogicalStructure):
      - Datasets
  /allocateIds:
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/cloud-platform
          - https://www.googleapis.com/auth/datastore
          - https://www.googleapis.com/auth/userinfo.email
      description: Allocate IDs for incomplete keys (useful for referencing an entity before it is inserted).
      displayName: Allocate Ids
      is:
      - hasParameters
      body:
        application/json: AllocateIdsRequest
      responses:
        200:
          body:
            application/json: AllocateIdsResponse
      (commons.Id): datastore.datasets.allocateIds
      (commons.LogicalStructure):
      - Datasets
