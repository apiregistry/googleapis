#%RAML 1.0
title: Google Cloud Trace API
version: v1
baseUri: https://cloudtrace.googleapis.com/
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
(commons.Id): cloudtrace:v1
(commons.Links):
- title: Developer Documentation
  url: https://cloud.google.com/tools/cloud-trace
  role: documentation
(commons.Icons):
- url: http://www.google.com/images/icons/product/search-32.gif
  name: x32
- url: http://www.google.com/images/icons/product/search-16.gif
  name: x16
securitySchemes:
  oath2:
    type: OAuth 2.0
    description: Google Oath2.0 authorization. Detailed documentation can be found at https://developers.google.com/identity/protocols/OAuth2
    settings:
      authorizationGrants:
      - authorization_code
      - implicit
      authorizationUri: https://accounts.google.com/o/oauth2/v2/auth
      accessTokenUri: https://accounts.google.com/o/oauth2/v2/auth
      scopes:
      - https://www.googleapis.com/auth/trace.append
      - https://www.googleapis.com/auth/trace.readonly
      - https://www.googleapis.com/auth/cloud-platform
traits:
  hasParameters:
    queryParameters:
      pp?:
        type: boolean
        default: true
        description: Pretty-print response.
      quotaUser?:
        type: string
        description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      prettyPrint?:
        type: boolean
        default: true
        description: Returns response with indentations and line breaks.
      upload_protocol?:
        type: string
        description: Upload protocol for media (e.g. "raw", "multipart").
      $.xgafv?:
        type: string
        description: V1 error format.
        (commons.EnumDescriptions):
        - v1 error format
        - v2 error format
      uploadType?:
        type: string
        description: Legacy upload protocol for media (e.g. "media", "multipart").
      callback?:
        type: string
        description: JSONP
      fields?:
        type: string
        description: Selector specifying which fields to include in a partial response.
securedBy:
  oath2: 
types:
  Empty:
    type: object
    description: 'A generic empty message that you can re-use to avoid defining duplicated
      empty messages in your APIs. A typical example is to use it as the request or
      the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty)
      returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty
      JSON object `{}`.'
  ListTracesResponse:
    type: object
    properties:
      nextPageToken?:
        type: string
        description: If defined, indicates that there are more traces that match the request and that this value should be passed to the next request to continue retrieving additional traces.
      traces?:
        type: array
        description: List of trace records returned.
        items: Trace
    description: The response message for the `ListTraces` method.
  Trace:
    type: object
    properties:
      traceId?:
        type: string
        description: Globally unique identifier for the trace. This identifier is a 128-bit numeric value formatted as a 32-byte hex string.
      spans?:
        type: array
        description: Collection of spans in the trace.
        items: TraceSpan
      projectId?:
        type: string
        description: Project ID of the Cloud project where the trace data is stored.
    description: A trace describes how long it takes for an application to perform an operation. It consists of a set of spans, each of which represent a single timed event within the operation.
  TraceSpan:
    type: object
    properties:
      spanId?:
        type: integer
        format: int64
        description: Identifier for the span. This identifier must be unique within a trace.
      kind?:
        type: string
        description: Distinguishes between spans generated in a particular context. For example, two spans with the same name may be distinguished using `RPC_CLIENT` and `RPC_SERVER` to identify queueing latency associated with the span.
        enum:
        - SPAN_KIND_UNSPECIFIED
        - RPC_SERVER
        - RPC_CLIENT
      name?:
        type: string
        description: Name of the trace. The trace name is sanitized and displayed in the Stackdriver Trace tool in the {% dynamic print site_values.console_name %}. The name may be a method name or some other per-call site name. For the same executable and the same call point, a best practice is to use a consistent name, which makes it easier to correlate cross-trace spans.
      startTime?:
        type: string
        description: Start time of the span in nanoseconds from the UNIX epoch.
      endTime?:
        type: string
        description: End time of the span in nanoseconds from the UNIX epoch.
      parentSpanId?:
        type: integer
        format: int64
        description: ID of the parent span, if any. Optional.
      labels?:
        type: object
        description: Collection of labels associated with the span.
    description: A span represents a single timed event within a trace. Spans can be nested and form a trace tree. Often, a trace contains a root span that describes the end-to-end latency of an operation and, optionally, one or more subspans for its suboperations. Spans do not need to be contiguous. There may be gaps between spans in a trace.
  Traces:
    type: object
    properties:
      traces?:
        type: array
        description: List of traces.
        items: Trace
    description: List of new or updated traces.
/v1:
  /projects:
    /{projectId}:
      uriParameters:
        projectId:
          type: string
          description: ID of the Cloud project where the trace data is stored.
      /traces:
        /{traceId}:
          uriParameters:
            traceId:
              type: string
              description: ID of the trace to return.
          get:
            securedBy:
              oath2:
                scopes:
                - https://www.googleapis.com/auth/cloud-platform
                - https://www.googleapis.com/auth/trace.readonly
            description: Gets a single trace by its ID.
            displayName: get
            is:
            - hasParameters
            responses:
              200:
                body:
                  application/json: Trace
            (commons.Id): cloudtrace.projects.traces.get
            (commons.LogicalStucture):
            - Projects
            - Traces
        patch:
          securedBy:
            oath2:
              scopes:
              - https://www.googleapis.com/auth/cloud-platform
              - https://www.googleapis.com/auth/trace.append
          description: Sends new traces to Stackdriver Trace or updates existing traces. If the ID of a trace that you send matches that of an existing trace, any fields in the existing trace and its spans are overwritten by the provided values, and any new fields provided are merged with the existing trace data. If the ID does not match, a new trace is created.
          displayName: patch Traces
          is:
          - hasParameters
          body:
            application/json: Traces
          responses:
            200:
              body:
                application/json: Empty
          (commons.Id): cloudtrace.projects.patchTraces
          (commons.LogicalStucture):
          - Projects
        get:
          securedBy:
            oath2:
              scopes:
              - https://www.googleapis.com/auth/cloud-platform
              - https://www.googleapis.com/auth/trace.readonly
          description: Returns of a list of traces that match the specified filter conditions.
          displayName: list
          is:
          - hasParameters
          queryParameters:
            filter?:
              type: string
              description: An optional filter for the request.
            view?:
              type: string
              description: Type of data returned for traces in the list. Optional. Default is `MINIMAL`.
              enum:
              - VIEW_TYPE_UNSPECIFIED
              - MINIMAL
              - ROOTSPAN
              - COMPLETE
            pageSize?:
              type: integer
              format: int32
              description: Maximum number of traces to return. If not specified or <= 0, the implementation selects a reasonable value. The implementation may return fewer traces than the requested page size. Optional.
            orderBy?:
              type: string
              description: 'Field used to sort the returned traces. Optional. Can
                be one of the following: * `trace_id` * `name` (`name` field of root
                span in the trace) * `duration` (difference between `end_time` and
                `start_time` fields of the root span) * `start` (`start_time` field
                of the root span) Descending order can be specified by appending `desc`
                to the sort field (for example, `name desc`). Only one sort field
                is permitted.'
            startTime?:
              type: string
              description: End of the time interval (inclusive) during which the trace data was collected from the application.
            pageToken?:
              type: string
              description: Token identifying the page of results to return. If provided, use the value of the `next_page_token` field from a previous request. Optional.
            endTime?:
              type: string
              description: Start of the time interval (inclusive) during which the trace data was collected from the application.
          responses:
            200:
              body:
                application/json: ListTracesResponse
          (commons.Id): cloudtrace.projects.traces.list
          (commons.LogicalStucture):
          - Projects
          - Traces
