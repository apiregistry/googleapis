#%RAML 1.0
title: Google Sheets API
version: v4
baseUri: https://sheets.googleapis.com/
uses:
  commons: https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml
(commons.Links):
- title: Developer Documentation
  url: https://developers.google.com/sheets/
  role: documentation
(commons.Icons):
- url: http://www.google.com/images/icons/product/search-32.gif
  name: x32
- url: http://www.google.com/images/icons/product/search-16.gif
  name: x16
(commons.Id): sheets:v4
securitySchemes:
  oath2:
    type: OAuth 2.0
    description: Google Oath2.0 authorization. Detailed documentation can be found at https://developers.google.com/identity/protocols/OAuth2
    settings:
      authorizationGrants:
      - authorization_code
      - implicit
      authorizationUri: https://accounts.google.com/o/oauth2/v2/auth
      accessTokenUri: https://accounts.google.com/o/oauth2/v2/auth
      scopes:
      - https://www.googleapis.com/auth/spreadsheets.readonly
      - https://www.googleapis.com/auth/spreadsheets
      - https://www.googleapis.com/auth/drive.readonly
      - https://www.googleapis.com/auth/drive
traits:
  hasParameters:
    queryParameters:
      quotaUser?:
        type: string
        description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      pp?:
        type: boolean
        default: true
        description: Pretty-print response.
      prettyPrint?:
        type: boolean
        default: true
        description: Returns response with indentations and line breaks.
      $.xgafv?:
        type: string
        description: V1 error format.
        enum:
        - '1'
        - '2'
      upload_protocol?:
        type: string
        description: Upload protocol for media (e.g. "raw", "multipart").
      uploadType?:
        type: string
        description: Legacy upload protocol for media (e.g. "media", "multipart").
      callback?:
        type: string
        description: JSONP
      fields?:
        type: string
        description: Selector specifying which fields to include in a partial response.
securedBy:
  oath2: 
types:
  AddBandingRequest:
    type: object
    properties:
      bandedRange?: BandedRange
    description: Adds a new banded range to the spreadsheet.
  AddBandingResponse:
    type: object
    properties:
      bandedRange?: BandedRange
    description: The result of adding a banded range.
  AddChartRequest:
    type: object
    properties:
      chart?: EmbeddedChart
    description: Adds a chart to a sheet in the spreadsheet.
  AddChartResponse:
    type: object
    properties:
      chart?: EmbeddedChart
    description: The result of adding a chart to a spreadsheet.
  AddConditionalFormatRuleRequest:
    type: object
    properties:
      rule?: ConditionalFormatRule
      index?:
        type: integer
        format: int32
        description: The zero-based index where the rule should be inserted.
    description: |-
      Adds a new conditional format rule at the given index.
      All subsequent rules' indexes are incremented.
  AddFilterViewRequest:
    type: object
    properties:
      filter?: FilterView
    description: Adds a filter view.
  AddFilterViewResponse:
    type: object
    properties:
      filter?: FilterView
    description: The result of adding a filter view.
  AddNamedRangeRequest:
    type: object
    properties:
      namedRange?: NamedRange
    description: Adds a named range to the spreadsheet.
  AddNamedRangeResponse:
    type: object
    properties:
      namedRange?: NamedRange
    description: The result of adding a named range.
  AddProtectedRangeRequest:
    type: object
    properties:
      protectedRange?: ProtectedRange
    description: Adds a new protected range.
  AddProtectedRangeResponse:
    type: object
    properties:
      protectedRange?: ProtectedRange
    description: The result of adding a new protected range.
  AddSheetRequest:
    type: object
    properties:
      properties?: SheetProperties
    description: |-
      Adds a new sheet.
      When a sheet is added at a given index,
      all subsequent sheets' indexes are incremented.
      To add an object sheet, use AddChartRequest instead and specify
      EmbeddedObjectPosition.sheetId or
      EmbeddedObjectPosition.newSheet.
  AddSheetResponse:
    type: object
    properties:
      properties?: SheetProperties
    description: The result of adding a sheet.
  AppendCellsRequest:
    type: object
    properties:
      sheetId?:
        type: integer
        format: int32
        description: The sheet ID to append the data to.
      rows?:
        type: array
        description: The data to append.
        items: RowData
      fields?:
        type: string
        description: |-
          The fields of CellData that should be updated.
          At least one field must be specified.
          The root is the CellData; 'row.values.' should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
    description: |-
      Adds new cells after the last row with data in a sheet,
      inserting new rows into the sheet if necessary.
  AppendDimensionRequest:
    type: object
    properties:
      length?:
        type: integer
        format: int32
        description: The number of rows or columns to append.
      sheetId?:
        type: integer
        format: int32
        description: The sheet to append rows or columns to.
      dimension?:
        type: string
        description: Whether rows or columns should be appended.
        enum:
        - DIMENSION_UNSPECIFIED
        - ROWS
        - COLUMNS
    description: Appends rows or columns to the end of a sheet.
  AppendValuesResponse:
    type: object
    properties:
      spreadsheetId?:
        type: string
        description: The spreadsheet the updates were applied to.
      tableRange?:
        type: string
        description: |-
          The range (in A1 notation) of the table that values are being appended to
          (before the values were appended).
          Empty if no table was found.
      updates?: UpdateValuesResponse
    description: The response when updating a range of values in a spreadsheet.
  AutoFillRequest:
    type: object
    properties:
      sourceAndDestination?: SourceAndDestination
      useAlternateSeries?:
        type: boolean
        description: |-
          True if we should generate data with the "alternate" series.
          This differs based on the type and amount of source data.
      range?: GridRange
    description: Fills in more data based on existing data.
  AutoResizeDimensionsRequest:
    type: object
    properties:
      dimensions?: DimensionRange
    description: |-
      Automatically resizes one or more dimensions based on the contents
      of the cells in that dimension.
  BandedRange:
    type: object
    properties:
      bandedRangeId?:
        type: integer
        format: int32
        description: The id of the banded range.
      rowProperties?: BandingProperties
      range?: GridRange
      columnProperties?: BandingProperties
    description: A banded (alternating colors) range in a sheet.
  BandingProperties:
    type: object
    properties:
      headerColor?: Color
      footerColor?: Color
      firstBandColor?: Color
      secondBandColor?: Color
    description: |-
      Properties referring a single dimension (either row or column). If both
      BandedRange.row_properties and BandedRange.column_properties are
      set, the fill colors are applied to cells according to the following rules:

      * header_color and footer_color take priority over band colors.
      * first_band_color takes priority over second_band_color.
      * row_properties takes priority over column_properties.

      For example, the first row color takes priority over the first column
      color, but the first column color takes priority over the second row color.
      Similarly, the row header takes priority over the column header in the
      top left cell, but the column header takes priority over the first row
      color if the row header is not set.
  BasicChartAxis:
    type: object
    properties:
      format?: TextFormat
      position?:
        type: string
        description: The position of this axis.
        enum:
        - BASIC_CHART_AXIS_POSITION_UNSPECIFIED
        - BOTTOM_AXIS
        - LEFT_AXIS
        - RIGHT_AXIS
      title?:
        type: string
        description: |-
          The title of this axis. If set, this overrides any title inferred
          from headers of the data.
    description: |-
      An axis of the chart.
      A chart may not have more than one axis per
      axis position.
  BasicChartDomain:
    type: object
    properties:
      domain?: ChartData
    description: |-
      The domain of a chart.
      For example, if charting stock prices over time, this would be the date.
  BasicChartSeries:
    type: object
    properties:
      series?: ChartData
      targetAxis?:
        type: string
        description: |-
          The minor axis that will specify the range of values for this series.
          For example, if charting stocks over time, the "Volume" series
          may want to be pinned to the right with the prices pinned to the left,
          because the scale of trading volume is different than the scale of
          prices.
          It is an error to specify an axis that isn't a valid minor axis
          for the chart's type.
        enum:
        - BASIC_CHART_AXIS_POSITION_UNSPECIFIED
        - BOTTOM_AXIS
        - LEFT_AXIS
        - RIGHT_AXIS
      type?:
        type: string
        description: |-
          The type of this series. Valid only if the
          chartType is
          COMBO.
          Different types will change the way the series is visualized.
          Only LINE, AREA,
          and COLUMN are supported.
        enum:
        - BASIC_CHART_TYPE_UNSPECIFIED
        - BAR
        - LINE
        - AREA
        - COLUMN
        - SCATTER
        - COMBO
    description: |-
      A single series of data in a chart.
      For example, if charting stock prices over time, multiple series may exist,
      one for the "Open Price", "High Price", "Low Price" and "Close Price".
  BasicChartSpec:
    type: object
    properties:
      series?:
        type: array
        description: The data this chart is visualizing.
        items: BasicChartSeries
      chartType?:
        type: string
        description: The type of the chart.
        enum:
        - BASIC_CHART_TYPE_UNSPECIFIED
        - BAR
        - LINE
        - AREA
        - COLUMN
        - SCATTER
        - COMBO
      domains?:
        type: array
        description: |-
          The domain of data this is charting.
          Only a single domain is currently supported.
        items: BasicChartDomain
      headerCount?:
        type: integer
        format: int32
        description: |-
          The number of rows or columns in the data that are "headers".
          If not set, Google Sheets will guess how many rows are headers based
          on the data.

          (Note that BasicChartAxis.title may override the axis title
           inferred from the header values.)
      legendPosition?:
        type: string
        description: The position of the chart legend.
        enum:
        - BASIC_CHART_LEGEND_POSITION_UNSPECIFIED
        - BOTTOM_LEGEND
        - LEFT_LEGEND
        - RIGHT_LEGEND
        - TOP_LEGEND
        - NO_LEGEND
      axis?:
        type: array
        description: The axis on the chart.
        items: BasicChartAxis
    description: |-
      The specification for a basic chart.  See BasicChartType for the list
      of charts this supports.
  BasicFilter:
    type: object
    properties:
      sortSpecs?:
        type: array
        description: |-
          The sort order per column. Later specifications are used when values
          are equal in the earlier specifications.
        items: SortSpec
      criteria?:
        type: object
        description: |-
          The criteria for showing/hiding values per column.
          The map's key is the column index, and the value is the criteria for
          that column.
      range?: GridRange
    description: The default filter associated with a sheet.
  BatchClearValuesRequest:
    type: object
    properties:
      ranges?:
        type: array
        description: The ranges to clear, in A1 notation.
        items:
          type: string
    description: The request for clearing more than one range of values in a spreadsheet.
  BatchClearValuesResponse:
    type: object
    properties:
      clearedRanges?:
        type: array
        description: |-
          The ranges that were cleared, in A1 notation.
          (If the requests were for an unbounded range or a ranger larger
           than the bounds of the sheet, this will be the actual ranges
           that were cleared, bounded to the sheet's limits.)
        items:
          type: string
      spreadsheetId?:
        type: string
        description: The spreadsheet the updates were applied to.
    description: The response when updating a range of values in a spreadsheet.
  BatchGetValuesResponse:
    type: object
    properties:
      valueRanges?:
        type: array
        description: |-
          The requested values. The order of the ValueRanges is the same as the
          order of the requested ranges.
        items: ValueRange
      spreadsheetId?:
        type: string
        description: The ID of the spreadsheet the data was retrieved from.
    description: The response when retrieving more than one range of values in a spreadsheet.
  BatchUpdateSpreadsheetRequest:
    type: object
    properties:
      requests?:
        type: array
        description: A list of updates to apply to the spreadsheet.
        items: Request
    description: The request for updating any aspect of a spreadsheet.
  BatchUpdateSpreadsheetResponse:
    type: object
    properties:
      replies?:
        type: array
        description: |-
          The reply of the updates.  This maps 1:1 with the updates, although
          replies to some requests may be empty.
        items: Response
      spreadsheetId?:
        type: string
        description: The spreadsheet the updates were applied to.
    description: The reply for batch updating a spreadsheet.
  BatchUpdateValuesRequest:
    type: object
    properties:
      valueInputOption?:
        type: string
        description: How the input data should be interpreted.
        enum:
        - INPUT_VALUE_OPTION_UNSPECIFIED
        - RAW
        - USER_ENTERED
      data?:
        type: array
        description: The new values to apply to the spreadsheet.
        items: ValueRange
    description: The request for updating more than one range of values in a spreadsheet.
  BatchUpdateValuesResponse:
    type: object
    properties:
      totalUpdatedColumns?:
        type: integer
        format: int32
        description: |-
          The total number of columns where at least one cell in the column was
          updated.
      totalUpdatedCells?:
        type: integer
        format: int32
        description: The total number of cells updated.
      totalUpdatedRows?:
        type: integer
        format: int32
        description: The total number of rows where at least one cell in the row was updated.
      responses?:
        type: array
        description: |-
          One UpdateValuesResponse per requested range, in the same order as
          the requests appeared.
        items: UpdateValuesResponse
      spreadsheetId?:
        type: string
        description: The spreadsheet the updates were applied to.
      totalUpdatedSheets?:
        type: integer
        format: int32
        description: |-
          The total number of sheets where at least one cell in the sheet was
          updated.
    description: The response when updating a range of values in a spreadsheet.
  BooleanCondition:
    type: object
    properties:
      values?:
        type: array
        description: |-
          The values of the condition. The number of supported values depends
          on the condition type.  Some support zero values,
          others one or two values,
          and ConditionType.ONE_OF_LIST supports an arbitrary number of values.
        items: ConditionValue
      type?:
        type: string
        description: The type of condition.
        enum:
        - CONDITION_TYPE_UNSPECIFIED
        - NUMBER_GREATER
        - NUMBER_GREATER_THAN_EQ
        - NUMBER_LESS
        - NUMBER_LESS_THAN_EQ
        - NUMBER_EQ
        - NUMBER_NOT_EQ
        - NUMBER_BETWEEN
        - NUMBER_NOT_BETWEEN
        - TEXT_CONTAINS
        - TEXT_NOT_CONTAINS
        - TEXT_STARTS_WITH
        - TEXT_ENDS_WITH
        - TEXT_EQ
        - TEXT_IS_EMAIL
        - TEXT_IS_URL
        - DATE_EQ
        - DATE_BEFORE
        - DATE_AFTER
        - DATE_ON_OR_BEFORE
        - DATE_ON_OR_AFTER
        - DATE_BETWEEN
        - DATE_NOT_BETWEEN
        - DATE_IS_VALID
        - ONE_OF_RANGE
        - ONE_OF_LIST
        - BLANK
        - NOT_BLANK
        - CUSTOM_FORMULA
    description: |-
      A condition that can evaluate to true or false.
      BooleanConditions are used by conditional formatting,
      data validation, and the criteria in filters.
  BooleanRule:
    type: object
    properties:
      condition?: BooleanCondition
      format?: CellFormat
    description: A rule that may or may not match, depending on the condition.
  Border:
    type: object
    properties:
      color?: Color
      width?:
        type: integer
        format: int32
        description: |-
          The width of the border, in pixels.
          Deprecated; the width is determined by the "style" field.
      style?:
        type: string
        description: The style of the border.
        enum:
        - STYLE_UNSPECIFIED
        - DOTTED
        - DASHED
        - SOLID
        - SOLID_MEDIUM
        - SOLID_THICK
        - NONE
        - DOUBLE
    description: A border along a cell.
  Borders:
    type: object
    properties:
      top?: Border
      left?: Border
      bottom?: Border
      right?: Border
    description: The borders of the cell.
  CellData:
    type: object
    properties:
      hyperlink?:
        type: string
        description: |-
          A hyperlink this cell points to, if any.
          This field is read-only.  (To set it, use a `=HYPERLINK` formula.)
      note?:
        type: string
        description: Any note on the cell.
      userEnteredFormat?: CellFormat
      effectiveValue?: ExtendedValue
      effectiveFormat?: CellFormat
      formattedValue?:
        type: string
        description: |-
          The formatted value of the cell.
          This is the value as it's shown to the user.
          This field is read-only.
      textFormatRuns?:
        type: array
        description: |-
          Runs of rich text applied to subsections of the cell.  Runs are only valid
          on user entered strings, not formulas, bools, or numbers.
          Runs start at specific indexes in the text and continue until the next
          run. Properties of a run will continue unless explicitly changed
          in a subsequent run (and properties of the first run will continue
          the properties of the cell unless explicitly changed).

          When writing, the new runs will overwrite any prior runs.  When writing a
          new user_entered_value, previous runs will be erased.
        items: TextFormatRun
      dataValidation?: DataValidationRule
      pivotTable?: PivotTable
      userEnteredValue?: ExtendedValue
    description: Data about a specific cell.
  CellFormat:
    type: object
    properties:
      textDirection?:
        type: string
        description: The direction of the text in the cell.
        enum:
        - TEXT_DIRECTION_UNSPECIFIED
        - LEFT_TO_RIGHT
        - RIGHT_TO_LEFT
      padding?: Padding
      horizontalAlignment?:
        type: string
        description: The horizontal alignment of the value in the cell.
        enum:
        - HORIZONTAL_ALIGN_UNSPECIFIED
        - LEFT
        - CENTER
        - RIGHT
      backgroundColor?: Color
      numberFormat?: NumberFormat
      wrapStrategy?:
        type: string
        description: The wrap strategy for the value in the cell.
        enum:
        - WRAP_STRATEGY_UNSPECIFIED
        - OVERFLOW_CELL
        - LEGACY_WRAP
        - CLIP
        - WRAP
      borders?: Borders
      hyperlinkDisplayType?:
        type: string
        description: How a hyperlink, if it exists, should be displayed in the cell.
        enum:
        - HYPERLINK_DISPLAY_TYPE_UNSPECIFIED
        - LINKED
        - PLAIN_TEXT
      verticalAlignment?:
        type: string
        description: The vertical alignment of the value in the cell.
        enum:
        - VERTICAL_ALIGN_UNSPECIFIED
        - TOP
        - MIDDLE
        - BOTTOM
      textFormat?: TextFormat
    description: The format of a cell.
  ChartData:
    type: object
    properties:
      sourceRange?: ChartSourceRange
    description: The data included in a domain or series.
  ChartSourceRange:
    type: object
    properties:
      sources?:
        type: array
        description: |-
          The ranges of data for a series or domain.
          Exactly one dimension must have a length of 1,
          and all sources in the list must have the same dimension
          with length 1.
          The domain (if it exists) & all series must have the same number
          of source ranges. If using more than one source range, then the source
          range at a given offset must be contiguous across the domain and series.

          For example, these are valid configurations:

              domain sources: A1:A5
              series1 sources: B1:B5
              series2 sources: D6:D10

              domain sources: A1:A5, C10:C12
              series1 sources: B1:B5, D10:D12
              series2 sources: C1:C5, E10:E12
        items: GridRange
    description: Source ranges for a chart.
  ChartSpec:
    type: object
    properties:
      basicChart?: BasicChartSpec
      title?:
        type: string
        description: The title of the chart.
      pieChart?: PieChartSpec
      hiddenDimensionStrategy?:
        type: string
        description: Determines how the charts will use hidden rows or columns.
        enum:
        - CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED
        - SKIP_HIDDEN_ROWS_AND_COLUMNS
        - SKIP_HIDDEN_ROWS
        - SKIP_HIDDEN_COLUMNS
        - SHOW_ALL
    description: The specifications of a chart.
  ClearBasicFilterRequest:
    type: object
    properties:
      sheetId?:
        type: integer
        format: int32
        description: The sheet ID on which the basic filter should be cleared.
    description: Clears the basic filter, if any exists on the sheet.
  ClearValuesRequest:
    type: object
    description: The request for clearing a range of values in a spreadsheet.
  ClearValuesResponse:
    type: object
    properties:
      clearedRange?:
        type: string
        description: |-
          The range (in A1 notation) that was cleared.
          (If the request was for an unbounded range or a ranger larger
           than the bounds of the sheet, this will be the actual range
           that was cleared, bounded to the sheet's limits.)
      spreadsheetId?:
        type: string
        description: The spreadsheet the updates were applied to.
    description: The response when clearing a range of values in a spreadsheet.
  Color:
    type: object
    properties:
      red?:
        type: number
        format: float
        description: The amount of red in the color as a value in the interval [0, 1].
      green?:
        type: number
        format: float
        description: The amount of green in the color as a value in the interval [0, 1].
      blue?:
        type: number
        format: float
        description: The amount of blue in the color as a value in the interval [0, 1].
      alpha?:
        type: number
        format: float
        description: |-
          The fraction of this color that should be applied to the pixel. That is,
          the final pixel color is defined by the equation:

            pixel color = alpha * (this color) + (1.0 - alpha) * (background color)

          This means that a value of 1.0 corresponds to a solid color, whereas
          a value of 0.0 corresponds to a completely transparent color. This
          uses a wrapper message rather than a simple float scalar so that it is
          possible to distinguish between a default value and the value being unset.
          If omitted, this color object is to be rendered as a solid color
          (as if the alpha value had been explicitly given with a value of 1.0).
    description: |-
      Represents a color in the RGBA color space. This representation is designed
      for simplicity of conversion to/from color representations in various
      languages over compactness; for example, the fields of this representation
      can be trivially provided to the constructor of "java.awt.Color" in Java; it
      can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
      method in iOS; and, with just a little work, it can be easily formatted into
      a CSS "rgba()" string in JavaScript, as well. Here are some examples:

      Example (Java):

           import com.google.type.Color;

           // ...
           public static java.awt.Color fromProto(Color protocolor) {
             float alpha = protocolor.hasAlpha()
                 ? protocolor.getAlpha().getValue()
                 : 1.0;

             return new java.awt.Color(
                 protocolor.getRed(),
                 protocolor.getGreen(),
                 protocolor.getBlue(),
                 alpha);
           }

           public static Color toProto(java.awt.Color color) {
             float red = (float) color.getRed();
             float green = (float) color.getGreen();
             float blue = (float) color.getBlue();
             float denominator = 255.0;
             Color.Builder resultBuilder =
                 Color
                     .newBuilder()
                     .setRed(red / denominator)
                     .setGreen(green / denominator)
                     .setBlue(blue / denominator);
             int alpha = color.getAlpha();
             if (alpha != 255) {
               result.setAlpha(
                   FloatValue
                       .newBuilder()
                       .setValue(((float) alpha) / denominator)
                       .build());
             }
             return resultBuilder.build();
           }
           // ...

      Example (iOS / Obj-C):

           // ...
           static UIColor* fromProto(Color* protocolor) {
              float red = [protocolor red];
              float green = [protocolor green];
              float blue = [protocolor blue];
              FloatValue* alpha_wrapper = [protocolor alpha];
              float alpha = 1.0;
              if (alpha_wrapper != nil) {
                alpha = [alpha_wrapper value];
              }
              return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
           }

           static Color* toProto(UIColor* color) {
               CGFloat red, green, blue, alpha;
               if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
                 return nil;
               }
               Color* result = [Color alloc] init];
               [result setRed:red];
               [result setGreen:green];
               [result setBlue:blue];
               if (alpha <= 0.9999) {
                 [result setAlpha:floatWrapperWithValue(alpha)];
               }
               [result autorelease];
               return result;
          }
          // ...

       Example (JavaScript):

          // ...

          var protoToCssColor = function(rgb_color) {
             var redFrac = rgb_color.red || 0.0;
             var greenFrac = rgb_color.green || 0.0;
             var blueFrac = rgb_color.blue || 0.0;
             var red = Math.floor(redFrac * 255);
             var green = Math.floor(greenFrac * 255);
             var blue = Math.floor(blueFrac * 255);

             if (!('alpha' in rgb_color)) {
                return rgbToCssColor_(red, green, blue);
             }

             var alphaFrac = rgb_color.alpha.value || 0.0;
             var rgbParams = [red, green, blue].join(',');
             return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
          };

          var rgbToCssColor_ = function(red, green, blue) {
            var rgbNumber = new Number((red << 16) | (green << 8) | blue);
            var hexString = rgbNumber.toString(16);
            var missingZeros = 6 - hexString.length;
            var resultBuilder = ['#'];
            for (var i = 0; i < missingZeros; i++) {
               resultBuilder.push('0');
            }
            resultBuilder.push(hexString);
            return resultBuilder.join('');
          };

          // ...
  ConditionValue:
    type: object
    properties:
      relativeDate?:
        type: string
        description: |-
          A relative date (based on the current date).
          Valid only if the type is
          DATE_BEFORE,
          DATE_AFTER,
          DATE_ON_OR_BEFORE or
          DATE_ON_OR_AFTER.

          Relative dates are not supported in data validation.
          They are supported only in conditional formatting and
          conditional filters.
        enum:
        - RELATIVE_DATE_UNSPECIFIED
        - PAST_YEAR
        - PAST_MONTH
        - PAST_WEEK
        - YESTERDAY
        - TODAY
        - TOMORROW
      userEnteredValue?:
        type: string
        description: |-
          A value the condition is based on.
          The value will be parsed as if the user typed into a cell.
          Formulas are supported (and must begin with an `=`).
    description: The value of the condition.
  ConditionalFormatRule:
    type: object
    properties:
      gradientRule?: GradientRule
      booleanRule?: BooleanRule
      ranges?:
        type: array
        description: |-
          The ranges that will be formatted if the condition is true.
          All the ranges must be on the same grid.
        items: GridRange
    description: A rule describing a conditional format.
  CopyPasteRequest:
    type: object
    properties:
      pasteType?:
        type: string
        description: What kind of data to paste.
        enum:
        - PASTE_NORMAL
        - PASTE_VALUES
        - PASTE_FORMAT
        - PASTE_NO_BORDERS
        - PASTE_FORMULA
        - PASTE_DATA_VALIDATION
        - PASTE_CONDITIONAL_FORMATTING
      destination?: GridRange
      pasteOrientation?:
        type: string
        description: How that data should be oriented when pasting.
        enum:
        - NORMAL
        - TRANSPOSE
      source?: GridRange
    description: Copies data from the source to the destination.
  CopySheetToAnotherSpreadsheetRequest:
    type: object
    properties:
      destinationSpreadsheetId?:
        type: string
        description: The ID of the spreadsheet to copy the sheet to.
    description: The request to copy a sheet across spreadsheets.
  CutPasteRequest:
    type: object
    properties:
      pasteType?:
        type: string
        description: |-
          What kind of data to paste.  All the source data will be cut, regardless
          of what is pasted.
        enum:
        - PASTE_NORMAL
        - PASTE_VALUES
        - PASTE_FORMAT
        - PASTE_NO_BORDERS
        - PASTE_FORMULA
        - PASTE_DATA_VALIDATION
        - PASTE_CONDITIONAL_FORMATTING
      destination?: GridCoordinate
      source?: GridRange
    description: Moves data from the source to the destination.
  DataValidationRule:
    type: object
    properties:
      condition?: BooleanCondition
      inputMessage?:
        type: string
        description: A message to show the user when adding data to the cell.
      showCustomUi?:
        type: boolean
        description: |-
          True if the UI should be customized based on the kind of condition.
          If true, "List" conditions will show a dropdown.
      strict?:
        type: boolean
        description: True if invalid data should be rejected.
    description: A data validation rule.
  DeleteBandingRequest:
    type: object
    properties:
      bandedRangeId?:
        type: integer
        format: int32
        description: The ID of the banded range to delete.
    description: Removes the banded range with the given ID from the spreadsheet.
  DeleteConditionalFormatRuleRequest:
    type: object
    properties:
      sheetId?:
        type: integer
        format: int32
        description: The sheet the rule is being deleted from.
      index?:
        type: integer
        format: int32
        description: The zero-based index of the rule to be deleted.
    description: |-
      Deletes a conditional format rule at the given index.
      All subsequent rules' indexes are decremented.
  DeleteConditionalFormatRuleResponse:
    type: object
    properties:
      rule?: ConditionalFormatRule
    description: The result of deleting a conditional format rule.
  DeleteDimensionRequest:
    type: object
    properties:
      range?: DimensionRange
    description: Deletes the dimensions from the sheet.
  DeleteEmbeddedObjectRequest:
    type: object
    properties:
      objectId?:
        type: integer
        format: int32
        description: The ID of the embedded object to delete.
    description: Deletes the embedded object with the given ID.
  DeleteFilterViewRequest:
    type: object
    properties:
      filterId?:
        type: integer
        format: int32
        description: The ID of the filter to delete.
    description: Deletes a particular filter view.
  DeleteNamedRangeRequest:
    type: object
    properties:
      namedRangeId?:
        type: string
        description: The ID of the named range to delete.
    description: Removes the named range with the given ID from the spreadsheet.
  DeleteProtectedRangeRequest:
    type: object
    properties:
      protectedRangeId?:
        type: integer
        format: int32
        description: The ID of the protected range to delete.
    description: Deletes the protected range with the given ID.
  DeleteSheetRequest:
    type: object
    properties:
      sheetId?:
        type: integer
        format: int32
        description: The ID of the sheet to delete.
    description: Deletes the requested sheet.
  DimensionProperties:
    type: object
    properties:
      hiddenByUser?:
        type: boolean
        description: True if this dimension is explicitly hidden.
      hiddenByFilter?:
        type: boolean
        description: |-
          True if this dimension is being filtered.
          This field is read-only.
      pixelSize?:
        type: integer
        format: int32
        description: The height (if a row) or width (if a column) of the dimension in pixels.
    description: Properties about a dimension.
  DimensionRange:
    type: object
    properties:
      startIndex?:
        type: integer
        format: int32
        description: The start (inclusive) of the span, or not set if unbounded.
      endIndex?:
        type: integer
        format: int32
        description: The end (exclusive) of the span, or not set if unbounded.
      sheetId?:
        type: integer
        format: int32
        description: The sheet this span is on.
      dimension?:
        type: string
        description: The dimension of the span.
        enum:
        - DIMENSION_UNSPECIFIED
        - ROWS
        - COLUMNS
    description: |-
      A range along a single dimension on a sheet.
      All indexes are zero-based.
      Indexes are half open: the start index is inclusive
      and the end index is exclusive.
      Missing indexes indicate the range is unbounded on that side.
  DuplicateFilterViewRequest:
    type: object
    properties:
      filterId?:
        type: integer
        format: int32
        description: The ID of the filter being duplicated.
    description: Duplicates a particular filter view.
  DuplicateFilterViewResponse:
    type: object
    properties:
      filter?: FilterView
    description: The result of a filter view being duplicated.
  DuplicateSheetRequest:
    type: object
    properties:
      insertSheetIndex?:
        type: integer
        format: int32
        description: |-
          The zero-based index where the new sheet should be inserted.
          The index of all sheets after this are incremented.
      sourceSheetId?:
        type: integer
        format: int32
        description: The sheet to duplicate.
      newSheetName?:
        type: string
        description: The name of the new sheet.  If empty, a new name is chosen for you.
      newSheetId?:
        type: integer
        format: int32
        description: |-
          If set, the ID of the new sheet. If not set, an ID is chosen.
          If set, the ID must not conflict with any existing sheet ID.
          If set, it must be non-negative.
    description: Duplicates the contents of a sheet.
  DuplicateSheetResponse:
    type: object
    properties:
      properties?: SheetProperties
    description: The result of duplicating a sheet.
  Editors:
    type: object
    properties:
      groups?:
        type: array
        description: The email addresses of groups with edit access to the protected range.
        items:
          type: string
      domainUsersCanEdit?:
        type: boolean
        description: |-
          True if anyone in the document's domain has edit access to the protected
          range.  Domain protection is only supported on documents within a domain.
      users?:
        type: array
        description: The email addresses of users with edit access to the protected range.
        items:
          type: string
    description: The editors of a protected range.
  EmbeddedChart:
    type: object
    properties:
      chartId?:
        type: integer
        format: int32
        description: The ID of the chart.
      position?: EmbeddedObjectPosition
      spec?: ChartSpec
    description: A chart embedded in a sheet.
  EmbeddedObjectPosition:
    type: object
    properties:
      overlayPosition?: OverlayPosition
      newSheet?:
        type: boolean
        description: |-
          If true, the embedded object will be put on a new sheet whose ID
          is chosen for you. Used only when writing.
      sheetId?:
        type: integer
        format: int32
        description: |-
          The sheet this is on. Set only if the embedded object
          is on its own sheet. Must be non-negative.
    description: The position of an embedded object such as a chart.
  ErrorValue:
    type: object
    properties:
      type?:
        type: string
        description: The type of error.
        enum:
        - ERROR_TYPE_UNSPECIFIED
        - ERROR
        - NULL_VALUE
        - DIVIDE_BY_ZERO
        - VALUE
        - REF
        - NAME
        - NUM
        - N_A
        - LOADING
      message?:
        type: string
        description: |-
          A message with more information about the error
          (in the spreadsheet's locale).
    description: An error in a cell.
  ExtendedValue:
    type: object
    properties:
      stringValue?:
        type: string
        description: |-
          Represents a string value.
          Leading single quotes are not included. For example, if the user typed
          `'123` into the UI, this would be represented as a `stringValue` of
          `"123"`.
      errorValue?: ErrorValue
      formulaValue?:
        type: string
        description: Represents a formula.
      boolValue?:
        type: boolean
        description: Represents a boolean value.
      numberValue?:
        type: number
        format: double
        description: |-
          Represents a double value.
          Note: Dates, Times and DateTimes are represented as doubles in
          "serial number" format.
    description: The kinds of value that a cell in a spreadsheet can have.
  FilterCriteria:
    type: object
    properties:
      condition?: BooleanCondition
      hiddenValues?:
        type: array
        description: Values that should be hidden.
        items:
          type: string
    description: Criteria for showing/hiding rows in a filter or filter view.
  FilterView:
    type: object
    properties:
      filterViewId?:
        type: integer
        format: int32
        description: The ID of the filter view.
      sortSpecs?:
        type: array
        description: |-
          The sort order per column. Later specifications are used when values
          are equal in the earlier specifications.
        items: SortSpec
      namedRangeId?:
        type: string
        description: |-
          The named range this filter view is backed by, if any.

          When writing, only one of range or named_range_id
          may be set.
      criteria?:
        type: object
        description: |-
          The criteria for showing/hiding values per column.
          The map's key is the column index, and the value is the criteria for
          that column.
      range?: GridRange
      title?:
        type: string
        description: The name of the filter view.
    description: A filter view.
  FindReplaceRequest:
    type: object
    properties:
      searchByRegex?:
        type: boolean
        description: |-
          True if the find value is a regex.
          The regular expression and replacement should follow Java regex rules
          at https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html.
          The replacement string is allowed to refer to capturing groups.
          For example, if one cell has the contents `"Google Sheets"` and another
          has `"Google Docs"`, then searching for `"o.* (.*)"` with a replacement of
          `"$1 Rocks"` would change the contents of the cells to
          `"GSheets Rocks"` and `"GDocs Rocks"` respectively.
      matchCase?:
        type: boolean
        description: True if the search is case sensitive.
      find?:
        type: string
        description: The value to search.
      includeFormulas?:
        type: boolean
        description: |-
          True if the search should include cells with formulas.
          False to skip cells with formulas.
      sheetId?:
        type: integer
        format: int32
        description: The sheet to find/replace over.
      range?: GridRange
      matchEntireCell?:
        type: boolean
        description: True if the find value should match the entire cell.
      allSheets?:
        type: boolean
        description: True to find/replace over all sheets.
      replacement?:
        type: string
        description: The value to use as the replacement.
    description: Finds and replaces data in cells over a range, sheet, or all sheets.
  FindReplaceResponse:
    type: object
    properties:
      rowsChanged?:
        type: integer
        format: int32
        description: The number of rows changed.
      sheetsChanged?:
        type: integer
        format: int32
        description: The number of sheets changed.
      valuesChanged?:
        type: integer
        format: int32
        description: The number of non-formula cells changed.
      occurrencesChanged?:
        type: integer
        format: int32
        description: |-
          The number of occurrences (possibly multiple within a cell) changed.
          For example, if replacing `"e"` with `"o"` in `"Google Sheets"`, this would
          be `"3"` because `"Google Sheets"` -> `"Googlo Shoots"`.
      formulasChanged?:
        type: integer
        format: int32
        description: The number of formula cells changed.
    description: The result of the find/replace.
  GradientRule:
    type: object
    properties:
      midpoint?: InterpolationPoint
      maxpoint?: InterpolationPoint
      minpoint?: InterpolationPoint
    description: |-
      A rule that applies a gradient color scale format, based on
      the interpolation points listed. The format of a cell will vary
      based on its contents as compared to the values of the interpolation
      points.
  GridCoordinate:
    type: object
    properties:
      sheetId?:
        type: integer
        format: int32
        description: The sheet this coordinate is on.
      rowIndex?:
        type: integer
        format: int32
        description: The row index of the coordinate.
      columnIndex?:
        type: integer
        format: int32
        description: The column index of the coordinate.
    description: |-
      A coordinate in a sheet.
      All indexes are zero-based.
  GridData:
    type: object
    properties:
      startRow?:
        type: integer
        format: int32
        description: The first row this GridData refers to, zero-based.
      columnMetadata?:
        type: array
        description: |-
          Metadata about the requested columns in the grid, starting with the column
          in start_column.
        items: DimensionProperties
      startColumn?:
        type: integer
        format: int32
        description: The first column this GridData refers to, zero-based.
      rowData?:
        type: array
        description: |-
          The data in the grid, one entry per row,
          starting with the row in startRow.
          The values in RowData will correspond to columns starting
          at start_column.
        items: RowData
      rowMetadata?:
        type: array
        description: |-
          Metadata about the requested rows in the grid, starting with the row
          in start_row.
        items: DimensionProperties
    description: Data in the grid, as well as metadata about the dimensions.
  GridProperties:
    type: object
    properties:
      frozenRowCount?:
        type: integer
        format: int32
        description: The number of rows that are frozen in the grid.
      frozenColumnCount?:
        type: integer
        format: int32
        description: The number of columns that are frozen in the grid.
      hideGridlines?:
        type: boolean
        description: True if the grid isn't showing gridlines in the UI.
      rowCount?:
        type: integer
        format: int32
        description: The number of rows in the grid.
      columnCount?:
        type: integer
        format: int32
        description: The number of columns in the grid.
    description: Properties of a grid.
  GridRange:
    type: object
    properties:
      endColumnIndex?:
        type: integer
        format: int32
        description: The end column (exclusive) of the range, or not set if unbounded.
      endRowIndex?:
        type: integer
        format: int32
        description: The end row (exclusive) of the range, or not set if unbounded.
      sheetId?:
        type: integer
        format: int32
        description: The sheet this range is on.
      startColumnIndex?:
        type: integer
        format: int32
        description: The start column (inclusive) of the range, or not set if unbounded.
      startRowIndex?:
        type: integer
        format: int32
        description: The start row (inclusive) of the range, or not set if unbounded.
    description: |-
      A range on a sheet.
      All indexes are zero-based.
      Indexes are half open, e.g the start index is inclusive
      and the end index is exclusive -- [start_index, end_index).
      Missing indexes indicate the range is unbounded on that side.

      For example, if `"Sheet1"` is sheet ID 0, then:

        `Sheet1!A1:A1 == sheet_id: 0,
                        start_row_index: 0, end_row_index: 1,
                        start_column_index: 0, end_column_index: 1`

        `Sheet1!A3:B4 == sheet_id: 0,
                        start_row_index: 2, end_row_index: 4,
                        start_column_index: 0, end_column_index: 2`

        `Sheet1!A:B == sheet_id: 0,
                      start_column_index: 0, end_column_index: 2`

        `Sheet1!A5:B == sheet_id: 0,
                       start_row_index: 4,
                       start_column_index: 0, end_column_index: 2`

        `Sheet1 == sheet_id:0`

      The start index must always be less than or equal to the end index.
      If the start index equals the end index, then the range is empty.
      Empty ranges are typically not meaningful and are usually rendered in the
      UI as `#REF!`.
  InsertDimensionRequest:
    type: object
    properties:
      range?: DimensionRange
      inheritFromBefore?:
        type: boolean
        description: |-
          Whether dimension properties should be extended from the dimensions
          before or after the newly inserted dimensions.
          True to inherit from the dimensions before (in which case the start
          index must be greater than 0), and false to inherit from the dimensions
          after.

          For example, if row index 0 has red background and row index 1
          has a green background, then inserting 2 rows at index 1 can inherit
          either the green or red background.  If `inheritFromBefore` is true,
          the two new rows will be red (because the row before the insertion point
          was red), whereas if `inheritFromBefore` is false, the two new rows will
          be green (because the row after the insertion point was green).
    description: Inserts rows or columns in a sheet at a particular index.
  InterpolationPoint:
    type: object
    properties:
      color?: Color
      type?:
        type: string
        description: How the value should be interpreted.
        enum:
        - INTERPOLATION_POINT_TYPE_UNSPECIFIED
        - MIN
        - MAX
        - NUMBER
        - PERCENT
        - PERCENTILE
      value?:
        type: string
        description: |-
          The value this interpolation point uses.  May be a formula.
          Unused if type is MIN or
          MAX.
    description: |-
      A single interpolation point on a gradient conditional format.
      These pin the gradient color scale according to the color,
      type and value chosen.
  MergeCellsRequest:
    type: object
    properties:
      mergeType?:
        type: string
        description: How the cells should be merged.
        enum:
        - MERGE_ALL
        - MERGE_COLUMNS
        - MERGE_ROWS
      range?: GridRange
    description: Merges all cells in the range.
  MoveDimensionRequest:
    type: object
    properties:
      destinationIndex?:
        type: integer
        format: int32
        description: |-
          The zero-based start index of where to move the source data to,
          based on the coordinates *before* the source data is removed
          from the grid.  Existing data will be shifted down or right
          (depending on the dimension) to make room for the moved dimensions.
          The source dimensions are removed from the grid, so the
          the data may end up in a different index than specified.

          For example, given `A1..A5` of `0, 1, 2, 3, 4` and wanting to move
          `"1"` and `"2"` to between `"3"` and `"4"`, the source would be
          `ROWS [1..3)`,and the destination index would be `"4"`
          (the zero-based index of row 5).
          The end result would be `A1..A5` of `0, 3, 1, 2, 4`.
      source?: DimensionRange
    description: Moves one or more rows or columns.
  NamedRange:
    type: object
    properties:
      namedRangeId?:
        type: string
        description: The ID of the named range.
      name?:
        type: string
        description: The name of the named range.
      range?: GridRange
    description: A named range.
  NumberFormat:
    type: object
    properties:
      pattern?:
        type: string
        description: |-
          Pattern string used for formatting.  If not set, a default pattern based on
          the user's locale will be used if necessary for the given type.
          See the [Date and Number Formats guide](/sheets/guides/formats) for more
          information about the supported patterns.
      type?:
        type: string
        description: |-
          The type of the number format.
          When writing, this field must be set.
        enum:
        - NUMBER_FORMAT_TYPE_UNSPECIFIED
        - TEXT
        - NUMBER
        - PERCENT
        - CURRENCY
        - DATE
        - TIME
        - DATE_TIME
        - SCIENTIFIC
    description: The number format of a cell.
  OverlayPosition:
    type: object
    properties:
      offsetXPixels?:
        type: integer
        format: int32
        description: |-
          The horizontal offset, in pixels, that the object is offset
          from the anchor cell.
      offsetYPixels?:
        type: integer
        format: int32
        description: |-
          The vertical offset, in pixels, that the object is offset
          from the anchor cell.
      heightPixels?:
        type: integer
        format: int32
        description: The height of the object, in pixels. Defaults to 371.
      widthPixels?:
        type: integer
        format: int32
        description: The width of the object, in pixels. Defaults to 600.
      anchorCell?: GridCoordinate
    description: The location an object is overlaid on top of a grid.
  Padding:
    type: object
    properties:
      top?:
        type: integer
        format: int32
        description: The top padding of the cell.
      left?:
        type: integer
        format: int32
        description: The left padding of the cell.
      bottom?:
        type: integer
        format: int32
        description: The bottom padding of the cell.
      right?:
        type: integer
        format: int32
        description: The right padding of the cell.
    description: |-
      The amount of padding around the cell, in pixels.
      When updating padding, every field must be specified.
  PasteDataRequest:
    type: object
    properties:
      coordinate?: GridCoordinate
      data?:
        type: string
        description: The data to insert.
      delimiter?:
        type: string
        description: The delimiter in the data.
      html?:
        type: boolean
        description: True if the data is HTML.
      type?:
        type: string
        description: How the data should be pasted.
        enum:
        - PASTE_NORMAL
        - PASTE_VALUES
        - PASTE_FORMAT
        - PASTE_NO_BORDERS
        - PASTE_FORMULA
        - PASTE_DATA_VALIDATION
        - PASTE_CONDITIONAL_FORMATTING
    description: Inserts data into the spreadsheet starting at the specified coordinate.
  PieChartSpec:
    type: object
    properties:
      pieHole?:
        type: number
        format: double
        description: The size of the hole in the pie chart.
      threeDimensional?:
        type: boolean
        description: True if the pie is three dimensional.
      series?: ChartData
      domain?: ChartData
      legendPosition?:
        type: string
        description: Where the legend of the pie chart should be drawn.
        enum:
        - PIE_CHART_LEGEND_POSITION_UNSPECIFIED
        - BOTTOM_LEGEND
        - LEFT_LEGEND
        - RIGHT_LEGEND
        - TOP_LEGEND
        - NO_LEGEND
        - LABELED_LEGEND
    description: A <a href="/chart/interactive/docs/gallery/piechart">pie chart</a>.
  PivotFilterCriteria:
    type: object
    properties:
      visibleValues?:
        type: array
        description: Values that should be included.  Values not listed here are excluded.
        items:
          type: string
    description: Criteria for showing/hiding rows in a pivot table.
  PivotGroup:
    type: object
    properties:
      showTotals?:
        type: boolean
        description: True if the pivot table should include the totals for this grouping.
      valueBucket?: PivotGroupSortValueBucket
      sortOrder?:
        type: string
        description: The order the values in this group should be sorted.
        enum:
        - SORT_ORDER_UNSPECIFIED
        - ASCENDING
        - DESCENDING
      valueMetadata?:
        type: array
        description: Metadata about values in the grouping.
        items: PivotGroupValueMetadata
      sourceColumnOffset?:
        type: integer
        format: int32
        description: |-
          The column offset of the source range that this grouping is based on.

          For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`
          means this group refers to column `C`, whereas the offset `1` would refer
          to column `D`.
    description: A single grouping (either row or column) in a pivot table.
  PivotGroupSortValueBucket:
    type: object
    properties:
      valuesIndex?:
        type: integer
        format: int32
        description: |-
          The offset in the PivotTable.values list which the values in this
          grouping should be sorted by.
      buckets?:
        type: array
        description: |-
          Determines the bucket from which values are chosen to sort.

          For example, in a pivot table with one row group & two column groups,
          the row group can list up to two values. The first value corresponds
          to a value within the first column group, and the second value
          corresponds to a value in the second column group.  If no values
          are listed, this would indicate that the row should be sorted according
          to the "Grand Total" over the column groups. If a single value is listed,
          this would correspond to using the "Total" of that bucket.
        items: ExtendedValue
    description: Information about which values in a pivot group should be used for sorting.
  PivotGroupValueMetadata:
    type: object
    properties:
      collapsed?:
        type: boolean
        description: True if the data corresponding to the value is collapsed.
      value?: ExtendedValue
    description: Metadata about a value in a pivot grouping.
  PivotTable:
    type: object
    properties:
      valueLayout?:
        type: string
        description: |-
          Whether values should be listed horizontally (as columns)
          or vertically (as rows).
        enum:
        - HORIZONTAL
        - VERTICAL
      columns?:
        type: array
        description: Each column grouping in the pivot table.
        items: PivotGroup
      criteria?:
        type: object
        description: |-
          An optional mapping of filters per source column offset.

          The filters will be applied before aggregating data into the pivot table.
          The map's key is the column offset of the source range that you want to
          filter, and the value is the criteria for that column.

          For example, if the source was `C10:E15`, a key of `0` will have the filter
          for column `C`, whereas the key `1` is for column `D`.
      values?:
        type: array
        description: A list of values to include in the pivot table.
        items: PivotValue
      source?: GridRange
      rows?:
        type: array
        description: Each row grouping in the pivot table.
        items: PivotGroup
    description: A pivot table.
  PivotValue:
    type: object
    properties:
      summarizeFunction?:
        type: string
        description: |-
          A function to summarize the value.
          If formula is set, the only supported values are
          SUM and
          CUSTOM.
          If sourceColumnOffset is set, then `CUSTOM`
          is not supported.
        enum:
        - PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED
        - SUM
        - COUNTA
        - COUNT
        - COUNTUNIQUE
        - AVERAGE
        - MAX
        - MIN
        - MEDIAN
        - PRODUCT
        - STDEV
        - STDEVP
        - VAR
        - VARP
        - CUSTOM
      name?:
        type: string
        description: |-
          A name to use for the value. This is only used if formula was set.
          Otherwise, the column name is used.
      formula?:
        type: string
        description: |-
          A custom formula to calculate the value.  The formula must start
          with an `=` character.
      sourceColumnOffset?:
        type: integer
        format: int32
        description: |-
          The column offset of the source range that this value reads from.

          For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`
          means this value refers to column `C`, whereas the offset `1` would
          refer to column `D`.
    description: The definition of how a value in a pivot table should be calculated.
  ProtectedRange:
    type: object
    properties:
      namedRangeId?:
        type: string
        description: |-
          The named range this protected range is backed by, if any.

          When writing, only one of range or named_range_id
          may be set.
      unprotectedRanges?:
        type: array
        description: |-
          The list of unprotected ranges within a protected sheet.
          Unprotected ranges are only supported on protected sheets.
        items: GridRange
      description?:
        type: string
        description: The description of this protected range.
      range?: GridRange
      warningOnly?:
        type: boolean
        description: |-
          True if this protected range will show a warning when editing.
          Warning-based protection means that every user can edit data in the
          protected range, except editing will prompt a warning asking the user
          to confirm the edit.

          When writing: if this field is true, then editors is ignored.
          Additionally, if this field is changed from true to false and the
          `editors` field is not set (nor included in the field mask), then
          the editors will be set to all the editors in the document.
      requestingUserCanEdit?:
        type: boolean
        description: |-
          True if the user who requested this protected range can edit the
          protected area.
          This field is read-only.
      protectedRangeId?:
        type: integer
        format: int32
        description: |-
          The ID of the protected range.
          This field is read-only.
      editors?: Editors
    description: A protected range.
  RepeatCellRequest:
    type: object
    properties:
      range?: GridRange
      cell?: CellData
      fields?:
        type: string
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `cell` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
    description: |-
      Updates all cells in the range to the values in the given Cell object.
      Only the fields listed in the fields field are updated; others are
      unchanged.

      If writing a cell with a formula, the formula's ranges will automatically
      increment for each field in the range.
      For example, if writing a cell with formula `=A1` into range B2:C4,
      B2 would be `=A1`, B3 would be `=A2`, B4 would be `=A3`,
      C2 would be `=B1`, C3 would be `=B2`, C4 would be `=B3`.

      To keep the formula's ranges static, use the `$` indicator.
      For example, use the formula `=$A$1` to prevent both the row and the
      column from incrementing.
  Request:
    type: object
    properties:
      deleteFilterView?: DeleteFilterViewRequest
      deleteSheet?: DeleteSheetRequest
      repeatCell?: RepeatCellRequest
      updateCells?: UpdateCellsRequest
      unmergeCells?: UnmergeCellsRequest
      pasteData?: PasteDataRequest
      updateFilterView?: UpdateFilterViewRequest
      updateDimensionProperties?: UpdateDimensionPropertiesRequest
      addBanding?: AddBandingRequest
      duplicateFilterView?: DuplicateFilterViewRequest
      deleteBanding?: DeleteBandingRequest
      appendCells?: AppendCellsRequest
      addSheet?: AddSheetRequest
      appendDimension?: AppendDimensionRequest
      duplicateSheet?: DuplicateSheetRequest
      mergeCells?: MergeCellsRequest
      addFilterView?: AddFilterViewRequest
      updateProtectedRange?: UpdateProtectedRangeRequest
      deleteDimension?: DeleteDimensionRequest
      deleteConditionalFormatRule?: DeleteConditionalFormatRuleRequest
      insertDimension?: InsertDimensionRequest
      addConditionalFormatRule?: AddConditionalFormatRuleRequest
      cutPaste?: CutPasteRequest
      updateSpreadsheetProperties?: UpdateSpreadsheetPropertiesRequest
      deleteProtectedRange?: DeleteProtectedRangeRequest
      autoFill?: AutoFillRequest
      updateNamedRange?: UpdateNamedRangeRequest
      updateBorders?: UpdateBordersRequest
      findReplace?: FindReplaceRequest
      updateChartSpec?: UpdateChartSpecRequest
      clearBasicFilter?: ClearBasicFilterRequest
      updateConditionalFormatRule?: UpdateConditionalFormatRuleRequest
      deleteNamedRange?: DeleteNamedRangeRequest
      textToColumns?: TextToColumnsRequest
      setBasicFilter?: SetBasicFilterRequest
      addProtectedRange?: AddProtectedRangeRequest
      setDataValidation?: SetDataValidationRequest
      autoResizeDimensions?: AutoResizeDimensionsRequest
      sortRange?: SortRangeRequest
      moveDimension?: MoveDimensionRequest
      deleteEmbeddedObject?: DeleteEmbeddedObjectRequest
      updateEmbeddedObjectPosition?: UpdateEmbeddedObjectPositionRequest
      addChart?: AddChartRequest
      updateSheetProperties?: UpdateSheetPropertiesRequest
      addNamedRange?: AddNamedRangeRequest
      copyPaste?: CopyPasteRequest
      updateBanding?: UpdateBandingRequest
    description: A single kind of update to apply to a spreadsheet.
  Response:
    type: object
    properties:
      duplicateFilterView?: DuplicateFilterViewResponse
      addProtectedRange?: AddProtectedRangeResponse
      deleteConditionalFormatRule?: DeleteConditionalFormatRuleResponse
      addSheet?: AddSheetResponse
      updateEmbeddedObjectPosition?: UpdateEmbeddedObjectPositionResponse
      findReplace?: FindReplaceResponse
      addChart?: AddChartResponse
      duplicateSheet?: DuplicateSheetResponse
      updateConditionalFormatRule?: UpdateConditionalFormatRuleResponse
      addNamedRange?: AddNamedRangeResponse
      addFilterView?: AddFilterViewResponse
      addBanding?: AddBandingResponse
    description: A single response from an update.
  RowData:
    type: object
    properties:
      values?:
        type: array
        description: The values in the row, one per column.
        items: CellData
    description: Data about each cell in a row.
  SetBasicFilterRequest:
    type: object
    properties:
      filter?: BasicFilter
    description: Sets the basic filter associated with a sheet.
  SetDataValidationRequest:
    type: object
    properties:
      rule?: DataValidationRule
      range?: GridRange
    description: |-
      Sets a data validation rule to every cell in the range.
      To clear validation in a range, call this with no rule specified.
  Sheet:
    type: object
    properties:
      charts?:
        type: array
        description: The specifications of every chart on this sheet.
        items: EmbeddedChart
      conditionalFormats?:
        type: array
        description: The conditional format rules in this sheet.
        items: ConditionalFormatRule
      data?:
        type: array
        description: |-
          Data in the grid, if this is a grid sheet.
          The number of GridData objects returned is dependent on the number of
          ranges requested on this sheet. For example, if this is representing
          `Sheet1`, and the spreadsheet was requested with ranges
          `Sheet1!A1:C10` and `Sheet1!D15:E20`, then the first GridData will have a
          startRow/startColumn of `0`,
          while the second one will have `startRow 14` (zero-based row 15),
          and `startColumn 3` (zero-based column D).
        items: GridData
      filterViews?:
        type: array
        description: The filter views in this sheet.
        items: FilterView
      protectedRanges?:
        type: array
        description: The protected ranges in this sheet.
        items: ProtectedRange
      basicFilter?: BasicFilter
      bandedRanges?:
        type: array
        description: The banded (i.e. alternating colors) ranges on this sheet.
        items: BandedRange
      properties?: SheetProperties
      merges?:
        type: array
        description: The ranges that are merged together.
        items: GridRange
    description: A sheet in a spreadsheet.
  SheetProperties:
    type: object
    properties:
      hidden?:
        type: boolean
        description: True if the sheet is hidden in the UI, false if it's visible.
      sheetType?:
        type: string
        description: |-
          The type of sheet. Defaults to GRID.
          This field cannot be changed once set.
        enum:
        - SHEET_TYPE_UNSPECIFIED
        - GRID
        - OBJECT
      index?:
        type: integer
        format: int32
        description: |-
          The index of the sheet within the spreadsheet.
          When adding or updating sheet properties, if this field
          is excluded then the sheet will be added or moved to the end
          of the sheet list.
      sheetId?:
        type: integer
        format: int32
        description: |-
          The ID of the sheet. Must be non-negative.
          This field cannot be changed once set.
      rightToLeft?:
        type: boolean
        description: True if the sheet is an RTL sheet instead of an LTR sheet.
      title?:
        type: string
        description: The name of the sheet.
      tabColor?: Color
      gridProperties?: GridProperties
    description: Properties of a sheet.
  SortRangeRequest:
    type: object
    properties:
      sortSpecs?:
        type: array
        description: |-
          The sort order per column. Later specifications are used when values
          are equal in the earlier specifications.
        items: SortSpec
      range?: GridRange
    description: Sorts data in rows based on a sort order per column.
  SortSpec:
    type: object
    properties:
      sortOrder?:
        type: string
        description: The order data should be sorted.
        enum:
        - SORT_ORDER_UNSPECIFIED
        - ASCENDING
        - DESCENDING
      dimensionIndex?:
        type: integer
        format: int32
        description: The dimension the sort should be applied to.
    description: A sort order associated with a specific column or row.
  SourceAndDestination:
    type: object
    properties:
      source?: GridRange
      dimension?:
        type: string
        description: The dimension that data should be filled into.
        enum:
        - DIMENSION_UNSPECIFIED
        - ROWS
        - COLUMNS
      fillLength?:
        type: integer
        format: int32
        description: |-
          The number of rows or columns that data should be filled into.
          Positive numbers expand beyond the last row or last column
          of the source.  Negative numbers expand before the first row
          or first column of the source.
    description: A combination of a source range and how to extend that source.
  Spreadsheet:
    type: object
    properties:
      sheets?:
        type: array
        description: The sheets that are part of a spreadsheet.
        items: Sheet
      namedRanges?:
        type: array
        description: The named ranges defined in a spreadsheet.
        items: NamedRange
      spreadsheetId?:
        type: string
        description: |-
          The ID of the spreadsheet.
          This field is read-only.
      properties?: SpreadsheetProperties
    description: Resource that represents a spreadsheet.
  SpreadsheetProperties:
    type: object
    properties:
      autoRecalc?:
        type: string
        description: The amount of time to wait before volatile functions are recalculated.
        enum:
        - RECALCULATION_INTERVAL_UNSPECIFIED
        - ON_CHANGE
        - MINUTE
        - HOUR
      timeZone?:
        type: string
        description: |-
          The time zone of the spreadsheet, in CLDR format such as
          `America/New_York`. If the time zone isn't recognized, this may
          be a custom time zone such as `GMT-07:00`.
      locale?:
        type: string
        description: |-
          The locale of the spreadsheet in one of the following formats:

          * an ISO 639-1 language code such as `en`

          * an ISO 639-2 language code such as `fil`, if no 639-1 code exists

          * a combination of the ISO language code and country code, such as `en_US`

          Note: when updating this field, not all locales/languages are supported.
      title?:
        type: string
        description: The title of the spreadsheet.
      defaultFormat?: CellFormat
    description: Properties of a spreadsheet.
  TextFormat:
    type: object
    properties:
      fontFamily?:
        type: string
        description: The font family.
      underline?:
        type: boolean
        description: True if the text is underlined.
      foregroundColor?: Color
      fontSize?:
        type: integer
        format: int32
        description: The size of the font.
      bold?:
        type: boolean
        description: True if the text is bold.
      strikethrough?:
        type: boolean
        description: True if the text has a strikethrough.
      italic?:
        type: boolean
        description: True if the text is italicized.
    description: |-
      The format of a run of text in a cell.
      Absent values indicate that the field isn't specified.
  TextFormatRun:
    type: object
    properties:
      startIndex?:
        type: integer
        format: int32
        description: The character index where this run starts.
      format?: TextFormat
    description: |-
      A run of a text format. The format of this run continues until the start
      index of the next run.
      When updating, all fields must be set.
  TextToColumnsRequest:
    type: object
    properties:
      delimiter?:
        type: string
        description: |-
          The delimiter to use. Used only if delimiterType is
          CUSTOM.
      delimiterType?:
        type: string
        description: The delimiter type to use.
        enum:
        - DELIMITER_TYPE_UNSPECIFIED
        - COMMA
        - SEMICOLON
        - PERIOD
        - SPACE
        - CUSTOM
      source?: GridRange
    description: |-
      Splits a column of text into multiple columns,
      based on a delimiter in each cell.
  UnmergeCellsRequest:
    type: object
    properties:
      range?: GridRange
    description: Unmerges cells in the given range.
  UpdateBandingRequest:
    type: object
    properties:
      bandedRange?: BandedRange
      fields?:
        type: string
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `bandedRange` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
    description: Updates properties of the supplied banded range.
  UpdateBordersRequest:
    type: object
    properties:
      top?: Border
      left?: Border
      bottom?: Border
      innerHorizontal?: Border
      range?: GridRange
      right?: Border
      innerVertical?: Border
    description: |-
      Updates the borders of a range.
      If a field is not set in the request, that means the border remains as-is.
      For example, with two subsequent UpdateBordersRequest:

       1. range: A1:A5 `{ top: RED, bottom: WHITE }`
       2. range: A1:A5 `{ left: BLUE }`

      That would result in A1:A5 having a borders of
      `{ top: RED, bottom: WHITE, left: BLUE }`.
      If you want to clear a border, explicitly set the style to
      NONE.
  UpdateCellsRequest:
    type: object
    properties:
      start?: GridCoordinate
      range?: GridRange
      rows?:
        type: array
        description: The data to write.
        items: RowData
      fields?:
        type: string
        description: |-
          The fields of CellData that should be updated.
          At least one field must be specified.
          The root is the CellData; 'row.values.' should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
    description: Updates all cells in a range with new data.
  UpdateChartSpecRequest:
    type: object
    properties:
      chartId?:
        type: integer
        format: int32
        description: The ID of the chart to update.
      spec?: ChartSpec
    description: |-
      Updates a chart's specifications.
      (This does not move or resize a chart. To move or resize a chart, use
       UpdateEmbeddedObjectPositionRequest.)
  UpdateConditionalFormatRuleRequest:
    type: object
    properties:
      sheetId?:
        type: integer
        format: int32
        description: |-
          The sheet of the rule to move.  Required if new_index is set,
          unused otherwise.
      rule?: ConditionalFormatRule
      index?:
        type: integer
        format: int32
        description: The zero-based index of the rule that should be replaced or moved.
      newIndex?:
        type: integer
        format: int32
        description: The zero-based new index the rule should end up at.
    description: |-
      Updates a conditional format rule at the given index,
      or moves a conditional format rule to another index.
  UpdateConditionalFormatRuleResponse:
    type: object
    properties:
      oldRule?: ConditionalFormatRule
      newRule?: ConditionalFormatRule
      oldIndex?:
        type: integer
        format: int32
        description: |-
          The old index of the rule. Not set if a rule was replaced
          (because it is the same as new_index).
      newIndex?:
        type: integer
        format: int32
        description: The index of the new rule.
    description: The result of updating a conditional format rule.
  UpdateDimensionPropertiesRequest:
    type: object
    properties:
      range?: DimensionRange
      fields?:
        type: string
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `properties` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
      properties?: DimensionProperties
    description: Updates properties of dimensions within the specified range.
  UpdateEmbeddedObjectPositionRequest:
    type: object
    properties:
      newPosition?: EmbeddedObjectPosition
      fields?:
        type: string
        description: |-
          The fields of OverlayPosition
          that should be updated when setting a new position. Used only if
          newPosition.overlayPosition
          is set, in which case at least one field must
          be specified.  The root `newPosition.overlayPosition` is implied and
          should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
      objectId?:
        type: integer
        format: int32
        description: The ID of the object to moved.
    description: |-
      Update an embedded object's position (such as a moving or resizing a
      chart or image).
  UpdateEmbeddedObjectPositionResponse:
    type: object
    properties:
      position?: EmbeddedObjectPosition
    description: The result of updating an embedded object's position.
  UpdateFilterViewRequest:
    type: object
    properties:
      filter?: FilterView
      fields?:
        type: string
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `filter` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
    description: Updates properties of the filter view.
  UpdateNamedRangeRequest:
    type: object
    properties:
      fields?:
        type: string
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `namedRange` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
      namedRange?: NamedRange
    description: |-
      Updates properties of the named range with the specified
      namedRangeId.
  UpdateProtectedRangeRequest:
    type: object
    properties:
      protectedRange?: ProtectedRange
      fields?:
        type: string
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `protectedRange` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
    description: |-
      Updates an existing protected range with the specified
      protectedRangeId.
  UpdateSheetPropertiesRequest:
    type: object
    properties:
      fields?:
        type: string
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `properties` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
      properties?: SheetProperties
    description: |-
      Updates properties of the sheet with the specified
      sheetId.
  UpdateSpreadsheetPropertiesRequest:
    type: object
    properties:
      fields?:
        type: string
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root 'properties' is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
      properties?: SpreadsheetProperties
    description: Updates properties of a spreadsheet.
  UpdateValuesResponse:
    type: object
    properties:
      updatedRange?:
        type: string
        description: The range (in A1 notation) that updates were applied to.
      updatedCells?:
        type: integer
        format: int32
        description: The number of cells updated.
      spreadsheetId?:
        type: string
        description: The spreadsheet the updates were applied to.
      updatedRows?:
        type: integer
        format: int32
        description: The number of rows where at least one cell in the row was updated.
      updatedColumns?:
        type: integer
        format: int32
        description: The number of columns where at least one cell in the column was updated.
    description: The response when updating a range of values in a spreadsheet.
  ValueRange:
    type: object
    properties:
      majorDimension?:
        type: string
        description: |-
          The major dimension of the values.

          For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,
          then requesting `range=A1:B2,majorDimension=ROWS` will return
          `[[1,2],[3,4]]`,
          whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return
          `[[1,3],[2,4]]`.

          For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]`
          will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS`
          then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`.

          When writing, if this field is not set, it defaults to ROWS.
        enum:
        - DIMENSION_UNSPECIFIED
        - ROWS
        - COLUMNS
      values?:
        type: array
        description: |-
          The data that was read or to be written.  This is an array of arrays,
          the outer array representing all the data and each inner array
          representing a major dimension. Each item in the inner array
          corresponds with one cell.

          For output, empty trailing rows and columns will not be included.

          For input, supported value types are: bool, string, and double.
          Null values will be skipped.
          To set a cell to an empty value, set the string value to an empty string.
        items:
          type: array
          items:
            type: any
      range?:
        type: string
        description: |-
          The range the values cover, in A1 notation.
          For output, this range indicates the entire requested range,
          even though the values will exclude trailing rows and columns.
          When appending values, this field represents the range to search for a
          table, after which values will be appended.
    description: Data within a range of the spreadsheet.
/v4:
  /spreadsheets:
    /{spreadsheetId}:
      uriParameters:
        spreadsheetId:
          type: string
          description: The spreadsheet to request.
      /sheets:
        /{sheetId}:copyTo:
          uriParameters:
            sheetId:
              type: integer
              format: int32
              description: The ID of the sheet to copy.
          post:
            securedBy:
              oath2:
                scopes:
                - https://www.googleapis.com/auth/drive
                - https://www.googleapis.com/auth/spreadsheets
            description: |-
              Copies a single sheet from a spreadsheet to another spreadsheet.
              Returns the properties of the newly created sheet.
            displayName: CopyTo Sheets Spreadsheets
            is:
            - hasParameters
            body:
              application/json: CopySheetToAnotherSpreadsheetRequest
            responses:
              200:
                body:
                  application/json: SheetProperties
      /values:batchClear:
        post:
          securedBy:
            oath2:
              scopes:
              - https://www.googleapis.com/auth/drive
              - https://www.googleapis.com/auth/spreadsheets
          description: |-
            Clears one or more ranges of values from a spreadsheet.
            The caller must specify the spreadsheet ID and one or more ranges.
            Only values are cleared -- all other properties of the cell (such as
            formatting, data validation, etc..) are kept.
          displayName: BatchClear Values Spreadsheets
          is:
          - hasParameters
          body:
            application/json: BatchClearValuesRequest
          responses:
            200:
              body:
                application/json: BatchClearValuesResponse
      /values:batchUpdate:
        post:
          securedBy:
            oath2:
              scopes:
              - https://www.googleapis.com/auth/drive
              - https://www.googleapis.com/auth/spreadsheets
          description: |-
            Sets values in one or more ranges of a spreadsheet.
            The caller must specify the spreadsheet ID,
            a valueInputOption, and one or more
            ValueRanges.
          displayName: BatchUpdate Values Spreadsheets
          is:
          - hasParameters
          body:
            application/json: BatchUpdateValuesRequest
          responses:
            200:
              body:
                application/json: BatchUpdateValuesResponse
      /values:
        /{range}:
          uriParameters:
            range:
              type: string
              description: The A1 notation of the values to retrieve.
          get:
            securedBy:
              oath2:
                scopes:
                - https://www.googleapis.com/auth/drive
                - https://www.googleapis.com/auth/drive.readonly
                - https://www.googleapis.com/auth/spreadsheets
                - https://www.googleapis.com/auth/spreadsheets.readonly
            description: |-
              Returns a range of values from a spreadsheet.
              The caller must specify the spreadsheet ID and a range.
            displayName: Get Values Spreadsheets
            is:
            - hasParameters
            queryParameters:
              majorDimension?:
                type: string
                description: |-
                  The major dimension that results should use.

                  For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,
                  then requesting `range=A1:B2,majorDimension=ROWS` will return
                  `[[1,2],[3,4]]`,
                  whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return
                  `[[1,3],[2,4]]`.
                enum:
                - DIMENSION_UNSPECIFIED
                - ROWS
                - COLUMNS
              valueRenderOption?:
                type: string
                description: How values should be represented in the output.
                enum:
                - FORMATTED_VALUE
                - UNFORMATTED_VALUE
                - FORMULA
              dateTimeRenderOption?:
                type: string
                description: |-
                  How dates, times, and durations should be represented in the output.
                  This is ignored if value_render_option is
                  FORMATTED_VALUE.
                enum:
                - SERIAL_NUMBER
                - FORMATTED_STRING
            responses:
              200:
                body:
                  application/json: ValueRange
          put:
            securedBy:
              oath2:
                scopes:
                - https://www.googleapis.com/auth/drive
                - https://www.googleapis.com/auth/spreadsheets
            description: |-
              Sets values in a range of a spreadsheet.
              The caller must specify the spreadsheet ID, range, and
              a valueInputOption.
            displayName: Update Values Spreadsheets
            is:
            - hasParameters
            queryParameters:
              valueInputOption?:
                type: string
                description: How the input data should be interpreted.
                enum:
                - INPUT_VALUE_OPTION_UNSPECIFIED
                - RAW
                - USER_ENTERED
            body:
              application/json: ValueRange
            responses:
              200:
                body:
                  application/json: UpdateValuesResponse
        /{range}:clear:
          uriParameters:
            range:
              type: string
              description: The A1 notation of the values to clear.
          post:
            securedBy:
              oath2:
                scopes:
                - https://www.googleapis.com/auth/drive
                - https://www.googleapis.com/auth/spreadsheets
            description: |-
              Clears values from a spreadsheet.
              The caller must specify the spreadsheet ID and range.
              Only values are cleared -- all other properties of the cell (such as
              formatting, data validation, etc..) are kept.
            displayName: Clear Values Spreadsheets
            is:
            - hasParameters
            body:
              application/json: ClearValuesRequest
            responses:
              200:
                body:
                  application/json: ClearValuesResponse
        /{range}:append:
          uriParameters:
            range:
              type: string
              description: |-
                The A1 notation of a range to search for a logical table of data.
                Values will be appended after the last row of the table.
          post:
            securedBy:
              oath2:
                scopes:
                - https://www.googleapis.com/auth/drive
                - https://www.googleapis.com/auth/spreadsheets
            description: |-
              Appends values to a spreadsheet. The input range is used to search for
              existing data and find a "table" within that range. Values will be
              appended to the next row of the table, starting with the first column of
              the table. See the
              [guide](/sheets/guides/values#appending_values)
              and
              [sample code](/sheets/samples/writing#append_values)
              for specific details of how tables are detected and data is appended.

              The caller must specify the spreadsheet ID, range, and
              a valueInputOption.  The `valueInputOption` only
              controls how the input data will be added to the sheet (column-wise or
              row-wise), it does not influence what cell the data starts being written
              to.
            displayName: Append Values Spreadsheets
            is:
            - hasParameters
            queryParameters:
              valueInputOption?:
                type: string
                description: How the input data should be interpreted.
                enum:
                - INPUT_VALUE_OPTION_UNSPECIFIED
                - RAW
                - USER_ENTERED
              insertDataOption?:
                type: string
                description: How the input data should be inserted.
                enum:
                - OVERWRITE
                - INSERT_ROWS
            body:
              application/json: ValueRange
            responses:
              200:
                body:
                  application/json: AppendValuesResponse
      /values:batchGet:
        get:
          securedBy:
            oath2:
              scopes:
              - https://www.googleapis.com/auth/drive
              - https://www.googleapis.com/auth/drive.readonly
              - https://www.googleapis.com/auth/spreadsheets
              - https://www.googleapis.com/auth/spreadsheets.readonly
          description: |-
            Returns one or more ranges of values from a spreadsheet.
            The caller must specify the spreadsheet ID and one or more ranges.
          displayName: BatchGet Values Spreadsheets
          is:
          - hasParameters
          queryParameters:
            majorDimension?:
              type: string
              description: |-
                The major dimension that results should use.

                For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,
                then requesting `range=A1:B2,majorDimension=ROWS` will return
                `[[1,2],[3,4]]`,
                whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return
                `[[1,3],[2,4]]`.
              enum:
              - DIMENSION_UNSPECIFIED
              - ROWS
              - COLUMNS
            ranges?:
              type: string
              description: The A1 notation of the values to retrieve.
            valueRenderOption?:
              type: string
              description: How values should be represented in the output.
              enum:
              - FORMATTED_VALUE
              - UNFORMATTED_VALUE
              - FORMULA
            dateTimeRenderOption?:
              type: string
              description: |-
                How dates, times, and durations should be represented in the output.
                This is ignored if value_render_option is
                FORMATTED_VALUE.
              enum:
              - SERIAL_NUMBER
              - FORMATTED_STRING
          responses:
            200:
              body:
                application/json: BatchGetValuesResponse
      get:
        securedBy:
          oath2:
            scopes:
            - https://www.googleapis.com/auth/drive
            - https://www.googleapis.com/auth/drive.readonly
            - https://www.googleapis.com/auth/spreadsheets
            - https://www.googleapis.com/auth/spreadsheets.readonly
        description: |-
          Returns the spreadsheet at the given ID.
          The caller must specify the spreadsheet ID.

          By default, data within grids will not be returned.
          You can include grid data one of two ways:

          * Specify a field mask listing your desired fields using the `fields` URL
          parameter in HTTP

          * Set the includeGridData
          URL parameter to true.  If a field mask is set, the `includeGridData`
          parameter is ignored

          For large spreadsheets, it is recommended to retrieve only the specific
          fields of the spreadsheet that you want.

          To retrieve only subsets of the spreadsheet, use the
          ranges URL parameter.
          Multiple ranges can be specified.  Limiting the range will
          return only the portions of the spreadsheet that intersect the requested
          ranges. Ranges are specified using A1 notation.
        displayName: Get Spreadsheets
        is:
        - hasParameters
        queryParameters:
          ranges?:
            type: string
            description: The ranges to retrieve from the spreadsheet.
          includeGridData?:
            type: boolean
            description: |-
              True if grid data should be returned.
              This parameter is ignored if a field mask was set in the request.
        responses:
          200:
            body:
              application/json: Spreadsheet
    /{spreadsheetId}:batchUpdate:
      uriParameters:
        spreadsheetId:
          type: string
          description: The spreadsheet to apply the updates to.
      post:
        securedBy:
          oath2:
            scopes:
            - https://www.googleapis.com/auth/drive
            - https://www.googleapis.com/auth/spreadsheets
        description: |-
          Applies one or more updates to the spreadsheet.

          Each request is validated before
          being applied. If any request is not valid then the entire request will
          fail and nothing will be applied.

          Some requests have replies to
          give you some information about how
          they are applied. The replies will mirror the requests.  For example,
          if you applied 4 updates and the 3rd one had a reply, then the
          response will have 2 empty replies, the actual reply, and another empty
          reply, in that order.

          Due to the collaborative nature of spreadsheets, it is not guaranteed that
          the spreadsheet will reflect exactly your changes after this completes,
          however it is guaranteed that the updates in the request will be
          applied together atomically. Your changes may be altered with respect to
          collaborator changes. If there are no collaborators, the spreadsheet
          should reflect your changes.
        displayName: BatchUpdate Spreadsheets
        is:
        - hasParameters
        body:
          application/json: BatchUpdateSpreadsheetRequest
        responses:
          200:
            body:
              application/json: BatchUpdateSpreadsheetResponse
    post:
      securedBy:
        oath2:
          scopes:
          - https://www.googleapis.com/auth/drive
          - https://www.googleapis.com/auth/spreadsheets
      description: Creates a spreadsheet, returning the newly created spreadsheet.
      displayName: Create Spreadsheets
      is:
      - hasParameters
      body:
        application/json: Spreadsheet
      responses:
        200:
          body:
            application/json: Spreadsheet
